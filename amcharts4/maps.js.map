{"version":3,"sources":["webpack:///../../../../../src/.internal/charts/map/MapObject.ts","webpack:///../../../../../src/.internal/charts/map/Geo.ts","webpack:///../../../../../src/.internal/charts/map/MapLine.ts","webpack:///../../../../../src/.internal/charts/map/MapUtils.ts","webpack:///../../../../../src/.internal/charts/map/MapImage.ts","webpack:///../../../../../src/.internal/charts/map/MapPolygon.ts","webpack:///../../../../../src/.internal/charts/map/MapLineSeries.ts","webpack:///../../../../../src/.internal/charts/map/SmallMap.ts","webpack:///../../../../../src/.internal/charts/map/MapSpline.ts","webpack:///../../../../../src/.internal/charts/map/MapArc.ts","webpack:///../../../../../src/.internal/charts/map/ZoomControl.ts","webpack:///./maps.js","webpack:///../../src/maps.ts","webpack:///../../../../../src/.internal/charts/types/MapChart.ts","webpack:///../../../../../src/.internal/charts/map/MapLineObject.ts","webpack:///../../../../../src/.internal/charts/map/MapPolygonSeries.ts","webpack:///../../../../../src/.internal/charts/map/MapSplineSeries.ts","webpack:///../../../../../src/.internal/charts/map/MapImageSeries.ts","webpack:///../../../../../src/.internal/charts/map/MapArcSeries.ts","webpack:///../../../../../src/.internal/charts/map/projections.ts","webpack:///../../../../../../src/.internal/charts/map/projections/Mercator.ts","webpack:///../../../../../../src/.internal/charts/map/projections/Miller.ts","webpack:///../../../../../../src/.internal/charts/map/projections/Eckert6.ts","webpack:///../../../../../../src/.internal/charts/map/projections/Orthographic.ts","webpack:///../../../../../../src/.internal/charts/map/projections/Projection.ts"],"names":["__webpack_require__","d","__webpack_exports__","MapObject","__WEBPACK_IMPORTED_MODULE_0_tslib__","__WEBPACK_IMPORTED_MODULE_1__core_Container__","__WEBPACK_IMPORTED_MODULE_2__core_Registry__","_super","_this","call","this","className","isMeasured","layout","clickable","applyTheme","prototype","validate","series","readerTitle","itemReaderText","registeredClasses","Object","defineProperty","value","normalizePoint","multiline","multiline_1","multiline_1_1","next","done","segment","segment_1","segment_1_1","point","wrapAngleTo180","geoPoint","x","longitude","y","latitude","__WEBPACK_IMPORTED_MODULE_1__core_utils_Math__","Math","asin","sin","latitude180","abs","angle","MapLine","__WEBPACK_IMPORTED_MODULE_1__MapObject__","__WEBPACK_IMPORTED_MODULE_2__MapLineObject__","__WEBPACK_IMPORTED_MODULE_3__core_elements_Triangle__","__WEBPACK_IMPORTED_MODULE_4__core_utils_List__","__WEBPACK_IMPORTED_MODULE_5__core_elements_Polyline__","__WEBPACK_IMPORTED_MODULE_6__core_Registry__","__WEBPACK_IMPORTED_MODULE_7__core_utils_Color__","__WEBPACK_IMPORTED_MODULE_8__core_utils_InterfaceColorSet__","__WEBPACK_IMPORTED_MODULE_9__core_utils_Percent__","__WEBPACK_IMPORTED_MODULE_10__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_11__core_utils_Iterator__","__WEBPACK_IMPORTED_MODULE_12__Geo__","line","stroke","strokeOpacity","interfaceColors","getFor","shortestDistance","positionToPoint","position","getPropertyValue","multiGeoLine","setPropertyValue","images","i","len","length","image","map","hasKey","getKey","events","on","event","property","invalidate","chart","imagesToConnect","_a","_b","push","newMultiGeoLine","geoLine","newGeoLine","p","plen","geoPointA","geoPointB","stepCount","max","intermediatePoint","projection","previousPoint","segments","projectGeoLine","_arrow","validatePosition","lineObjects","iterator","parent","measureElement","_lineObjects","handleLineObjectAdded","_disposers","template","mapLineObject","newValue","mapLine","arrow","createChild","shouldClone","width","height","triangle","fillOpacity","rotation","horizontalCenter","verticalCenter","copyFrom","source","clone","dataItem","north","south","east","west","multiPointToGeo","points","geoPoints","pointToGeo","multiPolygon","multiGeoArea","surface","hole","multiLine","MapImage","__WEBPACK_IMPORTED_MODULE_3__core_utils_Type__","moveTo","convert","MapPolygon","__WEBPACK_IMPORTED_MODULE_2__core_elements_Polygon__","__WEBPACK_IMPORTED_MODULE_3__core_Registry__","__WEBPACK_IMPORTED_MODULE_4__core_utils_InterfaceColorSet__","polygon","fill","tooltipPosition","multiGeoPolygon","projectGeoArea","pixelWidth","pixelHeight","MapLineSeriesDataItem","MapLineSeries","__WEBPACK_IMPORTED_MODULE_1__MapSeries__","__WEBPACK_IMPORTED_MODULE_2__MapLine__","__WEBPACK_IMPORTED_MODULE_3__core_utils_List__","__WEBPACK_IMPORTED_MODULE_4__core_Registry__","__WEBPACK_IMPORTED_MODULE_5__MapUtils__","__WEBPACK_IMPORTED_MODULE_6__core_utils_Array__","__WEBPACK_IMPORTED_MODULE_7__core_utils_Utils__","__WEBPACK_IMPORTED_MODULE_8__core_utils_Iterator__","__WEBPACK_IMPORTED_MODULE_9__core_utils_Disposer__","_mapLine","mapLine_1","component","mapLines","create","addSprite","removeValue","_line","_multiLine","_geoLine","_multiGeoLine","updateLineExtremes","updateExtremes","dataFields","createDataItem","validateData","data","clear","useGeodata","geodata","geoJSON","features","type","indexOf","geometry","console","log","feature","id_1","id","this_1","checkInclude","include","exclude","coordinates","dataObject","multiLineString","properties","dataItems","moveValue","_mapLines","lineTemplate","createLine","handleObjectAdded","SmallMap","__WEBPACK_IMPORTED_MODULE_2__core_elements_Rectangle__","__WEBPACK_IMPORTED_MODULE_4__core_utils_Disposer__","__WEBPACK_IMPORTED_MODULE_5__core_Registry__","__WEBPACK_IMPORTED_MODULE_6__core_utils_Color__","__WEBPACK_IMPORTED_MODULE_7__core_utils_InterfaceColorSet__","__WEBPACK_IMPORTED_MODULE_8__core_utils_Utils__","__WEBPACK_IMPORTED_MODULE_9__core_utils_Type__","_chart","align","valign","percentHeight","percentWidth","margin","background","moveToPosition","updateMapSize","seriesContainer","rectangle","strokeWidth","_series","handleSeriesAdded","handleSeriesRemoved","contains","newSeries","dataUsers","interactionsEnabled","svgPoint","rectPoint","zoomLevel","scale","min","svgPointToGeo","zoomToGeoPoint","get","set","updateRectangle","ceil","pixelX","pixelY","scaleRatio","afterDraw","maskRectangle","processConfig","config","MapSpline","__WEBPACK_IMPORTED_MODULE_1__MapLine__","__WEBPACK_IMPORTED_MODULE_2__core_elements_Polyspline__","tensionX","tensionY","MapArc","__WEBPACK_IMPORTED_MODULE_2__core_elements_Polyarc__","ZoomControl","__WEBPACK_IMPORTED_MODULE_2__core_elements_Button__","__WEBPACK_IMPORTED_MODULE_3__core_elements_RoundedRectangle__","__WEBPACK_IMPORTED_MODULE_5__core_utils_Keyboard__","__WEBPACK_IMPORTED_MODULE_6__core_interaction_Interaction__","__WEBPACK_IMPORTED_MODULE_7__core_utils_Percent__","__WEBPACK_IMPORTED_MODULE_8__core_Registry__","__WEBPACK_IMPORTED_MODULE_9__core_utils_InterfaceColorSet__","padding","plusButton","label","text","fontFamily","slider","handleBackgroundClick","updateThumbSize","thumb","draggable","handleThumbDrag","minusButton","role","readerLive","language","translate","fixLayout","undefined","marginTop","marginBottom","toFront","toBack","minX","maxX","minY","maxY","marginLeft","marginRight","sprite","target","spritePoint","maxPower","maxZoomLevel","LN2","minPower","minZoomLevel","power","pow","zoomGeoPoint","updateThumb","zoomOut","body","ev","topParent","hasFocused","isKey","isFocused","zoomIn","minHeight","visible","minWidth","isDown","step","createBackground","__WEBPACK_IMPORTED_MODULE_0__es2015_maps__","window","am4maps","__WEBPACK_IMPORTED_MODULE_0__internal_charts_Legend__","__WEBPACK_IMPORTED_MODULE_1__internal_charts_elements_HeatLegend__","__WEBPACK_IMPORTED_MODULE_2__internal_charts_types_MapChart__","__WEBPACK_IMPORTED_MODULE_3__internal_charts_map_MapSeries__","__WEBPACK_IMPORTED_MODULE_4__internal_charts_map_MapObject__","__WEBPACK_IMPORTED_MODULE_5__internal_charts_map_MapPolygon__","__WEBPACK_IMPORTED_MODULE_6__internal_charts_map_MapImage__","__WEBPACK_IMPORTED_MODULE_7__internal_charts_map_MapLine__","__WEBPACK_IMPORTED_MODULE_8__internal_charts_map_MapSpline__","__WEBPACK_IMPORTED_MODULE_9__internal_charts_map_MapArc__","__WEBPACK_IMPORTED_MODULE_10__internal_charts_map_MapPolygonSeries__","__WEBPACK_IMPORTED_MODULE_11__internal_charts_map_MapLineSeries__","__WEBPACK_IMPORTED_MODULE_12__internal_charts_map_MapSplineSeries__","__WEBPACK_IMPORTED_MODULE_13__internal_charts_map_MapImageSeries__","__WEBPACK_IMPORTED_MODULE_14__internal_charts_map_MapArcSeries__","__WEBPACK_IMPORTED_MODULE_15__internal_charts_map_MapUtils__","__WEBPACK_IMPORTED_MODULE_16__internal_charts_map_ZoomControl__","__WEBPACK_IMPORTED_MODULE_17__internal_charts_map_SmallMap__","__WEBPACK_IMPORTED_MODULE_18__internal_charts_map_projections_Projection__","__WEBPACK_IMPORTED_MODULE_19__internal_charts_map_projections__","__WEBPACK_IMPORTED_MODULE_20__internal_charts_map_Geo__","MapChartDataItem","MapChart","__WEBPACK_IMPORTED_MODULE_1__SerialChart__","__WEBPACK_IMPORTED_MODULE_2__map_MapSeries__","__WEBPACK_IMPORTED_MODULE_3__map_MapImage__","__WEBPACK_IMPORTED_MODULE_4__map_MapPolygon__","__WEBPACK_IMPORTED_MODULE_5__map_projections_Projection__","__WEBPACK_IMPORTED_MODULE_6__map_SmallMap__","__WEBPACK_IMPORTED_MODULE_7__core_utils_Keyboard__","__WEBPACK_IMPORTED_MODULE_8__core_interaction_Interaction__","__WEBPACK_IMPORTED_MODULE_9__core_Registry__","__WEBPACK_IMPORTED_MODULE_10__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_11__core_utils_Utils__","__WEBPACK_IMPORTED_MODULE_12__core_utils_Ease__","__WEBPACK_IMPORTED_MODULE_13__core_utils_Iterator__","__WEBPACK_IMPORTED_MODULE_14__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_15__map_Geo__","zoomDuration","zoomEasing","_prevZoomGeoPoint","deltaLongitude","maxPanOut","homeZoomLevel","once","goHome","inert","resizable","handleMapTransform","handleDoubleHit","handleDrag","zIndex","chartContainer","inited","_mapAnimation","stop","updateScaleRatio","_zoomGeoPointReal","each","updateTooltipBounds","chartContainerBg","e","dragStart","interactions","downPointers","getIndex","dragStop","focusable","handleMapDown","_zoomControl","getEventKey","pan","mouseWheelBehavior","ww","seriesWidth","hh","seriesHeight","maxWidth","maxHeight","applyInternalDefaults","htmlContainer","handleWheel","shift","_mouseWheelDisposer","dispose","wheelable","centerPoint","westPoint","eastPoint","northPoint","southPoint","vScale","innerWidth","hScale","innerHeight","Infinity","northPoint2","westPoint2","definedBBox","dispatch","seriesPoint","seriesPointToGeo","geoPointToSVG","geoPointToSeries","invert","_geodata","invalidateData","_dataUsers","center","duration","animate","to","pixelPaddingLeft","pixelPaddingTop","zoomToMapObject","mapObject","zoomToRectangle","level","_prevZoomLevel","_smallMap","smallMap","removeDispose","zoomControl","createSeries","invalidateProjection","_dataSources","getDataSource","loadData","setDataSourceEvents","createClassInstance","configOrder","a","b","asIs","field","measuredWidth","measuredHeight","homeGeoPoint","centerGeoPoint","MapLineObject","adjustRotation","MapPolygonSeriesDataItem","MapPolygonSeries","__WEBPACK_IMPORTED_MODULE_2__MapPolygon__","_mapPolygon","mapPolygon_1","mapPolygons","_polygon","_multiPolygon","_geoPolygon","geoPolygon","_multiGeoPolygon","updateAreaExtremes","mapPolygon","parsingStepDuration","processIncExc","_parseDataFrom","_mapPolygons","polygonTemplate","getPolygonById","dataContext","MapSplineSeriesDataItem","MapSplineSeries","__WEBPACK_IMPORTED_MODULE_1__MapLineSeries__","__WEBPACK_IMPORTED_MODULE_2__MapSpline__","MapImageSeriesDataItem","MapImageSeries","__WEBPACK_IMPORTED_MODULE_2__MapImage__","__WEBPACK_IMPORTED_MODULE_5__core_utils_Array__","__WEBPACK_IMPORTED_MODULE_6__MapUtils__","_mapImage","mapImage_1","mapImages","_point","_geoPoint","mapImage","multiPoint","multiGeoPoint","_mapImages","validateDataElement","MapArcSeriesDataItem","MapArcSeries","__WEBPACK_IMPORTED_MODULE_2__MapArc__","__WEBPACK_IMPORTED_MODULE_0__projections_Mercator__","__WEBPACK_IMPORTED_MODULE_1__projections_Miller__","__WEBPACK_IMPORTED_MODULE_2__projections_Eckert6__","__WEBPACK_IMPORTED_MODULE_3__projections_Orthographic__","__WEBPACK_IMPORTED_MODULE_4__projections_Projection__","Mercator","__WEBPACK_IMPORTED_MODULE_1__Projection__","unproject","atan","exp","PI","project","lambda","phi","tan","Miller","Eckert6","j","k","sqrt","cos","delta","Orthographic","__WEBPACK_IMPORTED_MODULE_3__core_utils_Math__","getClipRectangle1","deltaLatitude","getRect1","getClipRectangle2","getRect2","clipGeoArea","geoArea","clippedArea","clipRectangle1","clipRectangle2","rect1","rect2","clippedAreas","surfaceRect","getExtremes","isInside","isOutside","clippedSurface1","clip","clippedHole1","clippedSurface2","clippedHole2","clippedAreas_1","clippedAreas_1_1","area","len_1","prevPoint","i_1","extraPoints","s","splice","apply","Projection","__WEBPACK_IMPORTED_MODULE_1__core_Registry__","__WEBPACK_IMPORTED_MODULE_2__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_3__Geo__","deltaGama","clippedGeoArea","convertGeoArea","convertGeoLine","clipGeoLine","clippedLine","clippedSegments","clipLine","concat","clippedSegments2","convertedPoints","convertedAreaPoints","convertedSurface","slen","convertedHole","hlen","convertedSegmentPoints","rotate","pointInRadians","unrotate","deltaGamma","deltaLambda","deltaPhi","cosDeltaPhi","sinDeltaPhi","cosDeltaGamma","sinDeltaGamma","cosPhi","z","atan2","subjectPolyline","clipPolygon","cp1","cp2","inside","intersection","dc","dp","n1","n2","n3","inputList","subjectPolygon","outputList","r1","r2","pointA","pointB","phi1","lambda1","phi2","lambda2","sinPhi1","cosPhi1","sinLambda1","cosLambda1","sinPhi2","cosPhi2","sinLambda2","cosLambda2","A","B","phi3","lambda3"],"mappings":";;;;;;;;;;;;;;;;;;;mDAAAA,EAAAC,EAAAC,EAAA,sBAAAC,IAAA,IAAAC,EAAAJ,EAAA,GAAAK,EAAAL,EAAA,GAAAM,EAAAN,EAAA,GAsDAG,EAAA,SAAAI,GAiCC,SAAAJ,IAAA,IAAAK,EAGCD,EAAAE,KAAAC,OAAOA,YACPF,EAAKG,UAAY,YAGjBH,EAAKI,YAAa,EAClBJ,EAAKK,OAAS,OACdL,EAAKM,WAAY,EAGjBN,EAAKO,eAgBP,OA7D+BX,EAAA,EAAAD,EAAAI,GAsDvBJ,EAAAa,UAAAC,SAAP,WACKP,KAAKQ,SACRR,KAAKS,YAAcT,KAAKQ,OAAOE,gBAEhCb,EAAAS,UAAMC,SAAQR,KAAAC,OAGhBP,EA7DA,CAA+BE,EAAA,GAqE/BC,EAAA,EAASe,kBAA6B,UAAIlB,oCC3H1CmB,OAAAC,eAAArB,EAAA,cAAAsB,OAAA,IAAAtB,EAAA,eAAAuB,EAAAvB,EAAA,mBA6CO,SAA4BwB,OAClC,IAAoB,IAAAC,EAAAvB,EAAA,EAAAsB,GAASE,EAAAD,EAAAE,QAAAD,EAAAE,KAAAF,EAAAD,EAAAE,OAAA,CAAxB,IAAIE,EAAOH,EAAAJ,UACf,IAAkB,IAAAQ,EAAA5B,EAAA,EAAA2B,GAAOE,EAAAD,EAAAH,QAAAI,EAAAH,KAAAG,EAAAD,EAAAH,OAAA,CAApB,IAAIK,EAAKD,EAAAT,MACbU,EAAQT,EAAeS,wMAGzB,OAAOR,eAnDRxB,EAAA,eAAAiC,EAAAjC,EAAA,WAkFO,SAAoBkC,GAC1B,OAASC,EAAGD,EAASE,UAAWC,EAAGH,EAASI,WAnF7C,IAAApC,EAAAJ,EAAA,GAAAyC,EAAAzC,EAAA,GAsBO,SAAAyB,EAAwBW,GAC9B,IAAIE,EAAYH,EAAeC,EAASE,WACpCE,EAAWE,KAAKC,KAAKD,KAAKE,IAAKR,EAASI,SAAWC,EAAA,UAAmBA,EAAA,QAEtEI,EAAcV,EAAeC,EAASI,UAS1C,OAPIE,KAAKI,IAAID,GAAe,KAC3BP,EAAYH,EAAeG,EAAY,MAGxCF,EAASE,UAAYA,EACrBF,EAASI,SAAWA,EAEbJ,EA2BD,SAAAD,EAAwBY,GAU9B,OATAA,GAAgB,KAEJ,MACXA,GAAS,KAENA,GAAS,MACZA,GAAS,KAGHA,qCCxER/C,EAAAC,EAAAC,EAAA,sBAAA8C,IAAA,IAAA5C,EAAAJ,EAAA,GAAAiD,EAAAjD,EAAA,KAAAkD,EAAAlD,EAAA,KAAAmD,EAAAnD,EAAA,KAAAoD,EAAApD,EAAA,IAAAqD,EAAArD,EAAA,KAAAsD,EAAAtD,EAAA,GAAAuD,EAAAvD,EAAA,IAAAwD,EAAAxD,EAAA,IAAAyD,EAAAzD,EAAA,GAAA0D,EAAA1D,EAAA,GAAA2D,EAAA3D,EAAA,GAAA4D,EAAA5D,EAAA,KAuFAgD,EAAA,SAAAzC,GA6EC,SAAAyC,IAAA,IAAAxC,EAGCD,EAAAE,KAAAC,OAAOA,KACPF,EAAKG,UAAY,UAGjBH,EAAKqD,KAAO,IAAIR,EAAA,EAChB7C,EAAKqD,KAAKC,OAASxC,OAAAiC,EAAA,EAAAjC,GACnBd,EAAKuD,cAAgB,EAErB,IAAIC,EAAkB,IAAIR,EAAA,SAE1BhD,EAAKsD,OAASE,EAAgBC,OAAO,QACrCzD,EAAK0D,kBAAmB,EAGxB1D,EAAKO,eAqRP,OAnX6BX,EAAA,EAAA4C,EAAAzC,GA2GrByC,EAAAhC,UAAAmD,gBAAP,SAAuBC,GACtB,OAAI1D,KAAKmD,KACDnD,KAAKmD,KAAKM,gBAAgBC,IAEzB/B,EAAG,EAAGE,EAAG,EAAGQ,MAAO,IAS7BzB,OAAAC,eAAWyB,EAAAhC,UAAA,oBAOX,WACC,OAAON,KAAK2D,iBAAiB,qBAR9B,SAAwBC,GACvB5D,KAAK6D,iBAAiB,eAAgBX,EAAA,mBAAwBU,IAAe,oCAmB9EhD,OAAAC,eAAWyB,EAAAhC,UAAA,uBAyBX,WACC,OAAON,KAAK2D,iBAAiB,wBA1B9B,SAA2BG,GAE1B,IAFD,IAAAhE,EAAAE,KAEU+D,EAAI,EAAGC,EAAMF,EAAOG,OAAQF,EAAIC,EAAKD,IAAK,CAClD,IAAIG,EAAQJ,EAAOC,GACnB,GAAIf,EAAA,SAAekB,GAAQ,CAC1B,IAAIlE,KAAKmE,IAAIC,OAAOF,GAKnB,SAJAA,EAAkBlE,KAAKmE,IAAIE,OAAOH,GAClCJ,EAAOC,GAAKG,EAMdA,EAAMI,OAAOC,GAAG,kBAAmB,SAACC,GACb,aAAlBA,EAAMC,UAA6C,YAAlBD,EAAMC,UAC1C3E,EAAK4E,cAEJ1E,MAAM,GAEVA,KAAK6D,iBAAiB,kBAAmBC,oCAenCxB,EAAAhC,UAAAC,SAAP,WACC,QAAIoE,EAAkB3E,KAAKQ,OAAOmE,MAE9Bf,EAA8B5D,KAAK4D,iBAEvC,GAAI5D,KAAK4E,gBAAiB,CACzB,IAAIvD,KACJuC,GAAgBvC,OAEhB,IAAkB,IAAAwD,EAAAnF,EAAA,EAAAM,KAAK4E,iBAAeE,EAAAD,EAAA1D,QAAA2D,EAAA1D,KAAA0D,EAAAD,EAAA1D,OAAA,CAAjC,IAAI+C,EAAKY,EAAAhE,MACbO,EAAQ0D,MAAOnD,UAAsBsC,EAAOtC,UAAWE,SAAqBoC,EAAOpC,8GAIrF,GAAI9B,KAAKwD,iBAAkB,CAG1B,IAFA,IAAIwB,KAEKjB,EAAI,EAAGC,EAAMJ,EAAaK,OAAQF,EAAIC,EAAKD,IAAK,CAIxD,IAHA,IAAIkB,EAAuBrB,EAAaG,GACpCmB,KAEKC,EAAI,EAAGC,EAAOH,EAAQhB,OAAQkB,EAAIC,EAAMD,IAAK,CAQrD,IAPA,IAAIE,EAAuBJ,EAAQE,EAAI,GACnCG,EAAuBL,EAAQE,GAE/BI,EAAoBvD,KAAKwD,IAAIxD,KAAKI,IAAIiD,EAAUvD,SAAWwD,EAAUxD,UAAWE,KAAKI,IAAIiD,EAAUzD,UAAY0D,EAAU1D,YAIpHrC,EAAI,EAAGA,EAAIgG,EAAWhG,IAAK,CACnC,IAAIkG,EAAoBd,EAAMe,WAAWD,kBAAkBJ,EAAWC,EAAW/F,EAAIgG,GAErF,GAAIL,EAAWjB,OAAS,EAAG,CAC1B,IAAI0B,EAAgBT,EAAWA,EAAWjB,OAAS,GAC/CjC,KAAKI,IAAIuD,EAAc/D,UAAY6D,EAAkB7D,WAAa,MACrEoD,EAAgBD,KAAKG,GACrBA,MAIFA,EAAWH,KAAKU,GAGjBP,EAAWH,KAAKO,GAEjBN,EAAgBD,KAAKG,GAEtBtB,EAAeoB,EAGhBhF,KAAKmD,KAAKyC,SAAWjB,EAAMe,WAAWG,eAAejC,GAEjD5D,KAAK8F,QACR9F,KAAK8F,OAAOC,mBAGb9C,EAAA,KAAWjD,KAAKgG,YAAYC,WAAY,SAACtE,GACxCA,EAAEoE,qBAGH/F,KAAKmD,KAAK+C,OAASlG,KACnBH,EAAAS,UAAMC,SAAQR,KAAAC,OAMRsC,EAAAhC,UAAA6F,eAAP,aAcAvF,OAAAC,eAAWyB,EAAAhC,UAAA,wBAOX,WACC,OAAON,KAAK2D,iBAAiB,yBAR9B,SAA4B7C,GAC3Bd,KAAK6D,iBAAiB,mBAAoB/C,GAAO,oCAiBlDF,OAAAC,eAAWyB,EAAAhC,UAAA,mBAAX,WAQC,OAPKN,KAAKoG,eACTpG,KAAKoG,aAAe,IAAI1D,EAAA,EAA4B,IAAIF,EAAA,GACxDxC,KAAKoG,aAAa9B,OAAOC,GAAG,WAAYvE,KAAKqG,sBAAuBrG,MAAM,GAC1EA,KAAKsG,WAAWvB,KAAK,IAAIrC,EAAA,EAAa1C,KAAKoG,eAC3CpG,KAAKsG,WAAWvB,KAAK/E,KAAKoG,aAAaG,WAGjCvG,KAAKoG,8CAQH9D,EAAAhC,UAAA+F,sBAAV,SAAgC7B,GAC/B,IAAIgC,EAA+BhC,EAAMiC,SACzCD,EAAcE,QAAU1G,KACxBwG,EAAcN,OAASlG,MAWxBY,OAAAC,eAAWyB,EAAAhC,UAAA,aASX,WACC,IAAKN,KAAK8F,OAAQ,CACjB,IAAIa,EAAuB3G,KAAK4G,YAAYpE,EAAA,GAC5CmE,EAAME,aAAc,EACpBF,EAAMG,MAAQ,EACdH,EAAMI,OAAS,GACfJ,EAAMD,QAAU1G,KAChB2G,EAAMjD,SAAW,GAEjB,IAAIsD,EAAWL,EAAMC,YAAYnE,EAAA,GACjCuE,EAASH,aAAc,EACvBG,EAASC,YAAc,EACvBD,EAASF,MAAQlG,OAAAmC,EAAA,EAAAnC,CAAQ,KACzBoG,EAASD,OAASnG,OAAAmC,EAAA,EAAAnC,CAAQ,KAC1BoG,EAASE,SAAW,GACpBF,EAASG,iBAAmB,SAC5BH,EAASI,eAAiB,SAC1BpH,KAAK8F,OAASa,EAEf,OAAO3G,KAAK8F,YA5Bb,SAAiBa,GAChB3G,KAAK8F,OAASa,EACdA,EAAMD,QAAU1G,KAChB2G,EAAMT,OAASlG,sCAkCTsC,EAAAhC,UAAA+G,SAAP,SAAgBC,GACfzH,EAAAS,UAAM+G,SAAQtH,KAAAC,KAACsH,GACftH,KAAKmD,KAAKkE,SAASC,EAAOnE,MAC1BnD,KAAKgG,YAAYqB,SAASC,EAAOtB,aAC7BsB,EAAOxB,SACV9F,KAAK2G,MAAuBW,EAAOX,MAAMY,UAU3C3G,OAAAC,eAAWyB,EAAAhC,UAAA,gBAAX,WACC,IAAIkH,EAAWxH,KAAKwH,SACpB,OAAOA,EAASC,OAASD,EAASE,MAAQF,EAASC,OAAS,mCAS7D7G,OAAAC,eAAWyB,EAAAhC,UAAA,iBAAX,WACC,IAAIkH,EAAWxH,KAAKwH,SACpB,OAAOA,EAASG,MAAQH,EAASI,KAAOJ,EAASG,MAAQ,mCAG3DrF,EAnXA,CAA6BC,EAAA,GA2X7BK,EAAA,EAASjC,kBAA2B,QAAI2B,oCCjZjC,SAAAuF,EAAyBC,GAE/B,IADA,IAAIC,KACKhE,EAAI,EAAGC,EAAM8D,EAAO7D,OAAQF,EAAIC,EAAKD,IAC7CgE,EAAUhD,KAAKiD,EAAWF,EAAO/D,KAElC,OAAOgE,EASD,SAAAC,EAAoBxG,GAC1B,OAASI,UAAWJ,EAAM,GAAIM,SAAUN,EAAM,IAhF/ChC,EAAA,EAoBO,SAA2ByI,GAGjC,IAFA,IAAIC,KAEKnE,EAAI,EAAGC,EAAMiE,EAAahE,OAAQF,EAAIC,EAAKD,IAAK,CAExD,IAAIoE,EAAsBF,EAAalE,GAAG,GACtCqE,EAAmBH,EAAalE,GAAG,GAIvCmE,EAAanE,MAEToE,GACHD,EAAanE,GAAGgB,KAAK8C,EAAgBM,IAGlCC,GACHF,EAAanE,GAAGgB,KAAK8C,EAAgBO,IAGvC,OAAOF,GAxCR1I,EAAA,EAkDO,SAAwB6I,GAG9B,IAFA,IAAIzE,KAEKG,EAAI,EAAGC,EAAMqE,EAAUpE,OAAQF,EAAIC,EAAKD,IAChDH,EAAamB,KAAK8C,EAAgBQ,EAAUtE,KAE7C,OAAOH,GAxDRpE,EAAA,EAAAqI,EAAArI,EAAA,EAAAwI,oCCAA1I,EAAAC,EAAAC,EAAA,sBAAA8I,IAAA,IAAA5I,EAAAJ,EAAA,GAAAiD,EAAAjD,EAAA,KAAAM,EAAAN,EAAA,GAAAiJ,EAAAjJ,EAAA,GAuEAgJ,EAAA,SAAAzI,GAwCC,SAAAyI,IAAA,IAAAxI,EACCD,EAAAE,KAAAC,OAAOA,YAEPF,EAAKG,UAAY,WACjBH,EAAKO,eA+CP,OA3F8BX,EAAA,EAAA4I,EAAAzI,GAoD7Be,OAAAC,eAAWyH,EAAAhI,UAAA,gBAOX,WACC,OAAON,KAAK2D,iBAAiB,iBAR9B,SAAoB7C,GACnBd,KAAK6D,iBAAiB,WAAY/C,GAAO,GAAO,oCAejDF,OAAAC,eAAWyH,EAAAhI,UAAA,iBAOX,WACC,OAAON,KAAK2D,iBAAiB,kBAR9B,SAAqB7C,GACpBd,KAAK6D,iBAAiB,YAAa/C,GAAO,GAAO,oCAe3CwH,EAAAhI,UAAAyF,iBAAP,WACKwC,EAAA,SAAevI,KAAK8B,WAAayG,EAAA,SAAevI,KAAK4B,YACxD5B,KAAKwI,OAAOxI,KAAKQ,OAAOmE,MAAMe,WAAW+C,SAAU3G,SAAU9B,KAAK8B,SAAUF,UAAW5B,KAAK4B,aAE7F/B,EAAAS,UAAMyF,iBAAgBhG,KAAAC,OAGxBsI,EA3FA,CAA8B/F,EAAA,GAmG9B3C,EAAA,EAASe,kBAA4B,SAAI2H,oCC1KzChJ,EAAAC,EAAAC,EAAA,sBAAAkJ,IAAA,IAAAhJ,EAAAJ,EAAA,GAAAiD,EAAAjD,EAAA,KAAAqJ,EAAArJ,EAAA,KAAAsJ,EAAAtJ,EAAA,GAAAuJ,EAAAvJ,EAAA,IAgEAoJ,EAAA,SAAA7I,GAgDC,SAAA6I,IAAA,IAAA5I,EACCD,EAAAE,KAAAC,OAAOA,KAEPF,EAAKG,UAAY,aAEjBH,EAAKgJ,QAAUhJ,EAAK8G,YAAY+B,EAAA,GAChC7I,EAAKgJ,QAAQjC,aAAc,EAE3B,IAAIvD,EAAkB,IAAIuF,EAAA,SAE1B/I,EAAKiJ,KAAOzF,EAAgBC,OAAO,mBACnCzD,EAAKsD,OAASE,EAAgBC,OAAO,yBACrCzD,EAAKuD,cAAgB,EAErBvD,EAAKkJ,gBAAkB,UAEvBlJ,EAAKO,eAuFP,OAvJgCX,EAAA,EAAAgJ,EAAA7I,GAwE/Be,OAAAC,eAAW6H,EAAApI,UAAA,uBAOX,WACC,OAAON,KAAK2D,iBAAiB,wBAR9B,SAA2BsF,GAC1BjJ,KAAK6D,iBAAiB,kBAAmBoF,GAAiB,oCAepDP,EAAApI,UAAAC,SAAP,WACKP,KAAKQ,SACRR,KAAK8I,QAAQhB,OAAS9H,KAAKQ,OAAOmE,MAAMe,WAAWwD,eAAelJ,KAAKiJ,kBAGxEpJ,EAAAS,UAAMC,SAAQR,KAAAC,OAMR0I,EAAApI,UAAA6F,eAAP,aAUAvF,OAAAC,eAAW6H,EAAApI,UAAA,gBAAX,WACC,IAAIkH,EAAWxH,KAAKwH,SACpB,OAAOA,EAASC,OAASD,EAASE,MAAQF,EAASC,OAAS,mCAS7D7G,OAAAC,eAAW6H,EAAApI,UAAA,iBAAX,WACC,IAAIkH,EAAWxH,KAAKwH,SACpB,OAAOA,EAASG,MAAQH,EAASI,KAAOJ,EAASG,MAAQ,mCAgB1D/G,OAAAC,eAAW6H,EAAApI,UAAA,kBAAX,WACC,OAAON,KAAK8I,QAAQK,4CASrBvI,OAAAC,eAAW6H,EAAApI,UAAA,mBAAX,WACC,OAAON,KAAK8I,QAAQM,6CAEtBV,EAvJA,CAAgCnG,EAAA,GA+JhCqG,EAAA,EAASjI,kBAA8B,WAAI+H,oCC/N3CpJ,EAAAC,EAAAC,EAAA,sBAAA6J,IAAA/J,EAAAC,EAAAC,EAAA,sBAAA8J,IAAA,IAAA5J,EAAAJ,EAAA,GAAAiK,EAAAjK,EAAA,KAAAkK,EAAAlK,EAAA,KAAAmK,EAAAnK,EAAA,IAAAoK,EAAApK,EAAA,GAAAqK,EAAArK,EAAA,KAAAsK,EAAAtK,EAAA,IAAAuK,EAAAvK,EAAA,GAAAwK,EAAAxK,EAAA,GAAAyK,EAAAzK,EAAA,GAmCA+J,EAAA,SAAAxJ,GA8CC,SAAAwJ,IAAA,IAAAvJ,EACCD,EAAAE,KAAAC,OAAOA,YACPF,EAAKG,UAAY,wBACjBH,EAAKO,eA2JP,OA5M2CX,EAAA,EAAA2J,EAAAxJ,GA0D1Ce,OAAAC,eAAWwI,EAAA/I,UAAA,eAAX,eAAAR,EAAAE,KACC,IAAKA,KAAKgK,SAAU,CACnB,IAAIC,EAAUjK,KAAKkK,UAAUC,SAASC,SAEtCpK,KAAKgK,SAAWC,EAChBjK,KAAKqK,UAAUJ,GAEfjK,KAAKsG,WAAWvB,KAAKkF,GACrBjK,KAAKsG,WAAWvB,KAAK,IAAIgF,EAAA,EAAS,WACjCjK,EAAKoK,UAAUC,SAASG,YAAYL,MAGtC,OAAOjK,KAAKgK,0CAebpJ,OAAAC,eAAWwI,EAAA/I,UAAA,YAQX,WACC,OAAON,KAAKuK,WATb,SAAgBpH,GACfnD,KAAKuK,MAAQpH,EACbnD,KAAK4D,aAAe+F,EAAA,GAA0BxG,qCA+B/CvC,OAAAC,eAAWwI,EAAA/I,UAAA,iBAQX,WACC,OAAON,KAAKwK,gBATb,SAAqBnC,GACpBrI,KAAKwK,WAAanC,EAClBrI,KAAK4D,aAAe+F,EAAA,EAAyBtB,oCAuB9CzH,OAAAC,eAAWwI,EAAA/I,UAAA,eAQX,WACC,OAAON,KAAKyK,cATb,SAAmBxF,GAClBjF,KAAKyK,SAAWxF,EAChBjF,KAAK4D,cAAgBqB,oCAgCtBrE,OAAAC,eAAWwI,EAAA/I,UAAA,oBASX,WACC,OAAON,KAAK0K,mBAVb,SAAwB9G,GACvB5D,KAAK0K,cAAgB9G,EACrB5D,KAAK2K,mBAAmB/G,GACxB5D,KAAK0G,QAAQ9C,aAAe5D,KAAK0K,+CAiB3BrB,EAAA/I,UAAAqK,mBAAP,SAA0B/G,GACzB,IAAK,IAAIG,EAAI,EAAGC,EAAMJ,EAAaK,OAAQF,EAAIC,EAAKD,IAAK,CACxD,IAAIkB,EAAuBrB,EAAaG,GACxC/D,KAAK4K,eAAe3F,KAIvBoE,EA5MA,CAA2CE,EAAA,GAyR3CD,EAAA,SAAAzJ,GA8DC,SAAAyJ,IAAA,IAAAxJ,EAGCD,EAAAE,KAAAC,OAAOA,YACPF,EAAKG,UAAY,gBAGjBH,EAAK+K,WAAWxC,UAAY,YAC5BvI,EAAK+K,WAAW1H,KAAO,OAEvBrD,EAAK+K,WAAW5F,QAAU,UAC1BnF,EAAK+K,WAAWjH,aAAe,eAG/B9D,EAAKO,eAqJP,OAjOmCX,EAAA,EAAA4J,EAAAzJ,GAsFxByJ,EAAAhJ,UAAAwK,eAAV,WACC,OAAO,IAAIzB,GASLC,EAAAhJ,UAAAyK,aAAP,eAAAjL,EAAAE,KAMC,GALIA,KAAKgL,KAAK/G,OAAS,GACtBjE,KAAKmK,SAASc,QAIXjL,KAAKkL,YAAclL,KAAKmL,QAAS,CACpC,IAAIC,EAAepL,KAAK2E,MAAMwG,QAC9B,GAAIC,EAAS,CAEZ,IAAIC,OAAQ,EAeZ,GAboB,qBAAhBD,EAAQE,KACXD,EAAWD,EAAQC,SAEK,WAAhBD,EAAQE,KAChBD,GAAYD,IAE0G,IAA7G,QAAS,aAAc,UAAW,aAAc,kBAAmB,gBAAgBG,QAAQH,EAAQE,MAC5GD,IAAcG,SAAUJ,IAGxBK,QAAQC,IAAI,4BAGTL,EACH,mBAAStH,EAAOC,GAEf,IAAI2H,EAAeN,EAAStH,GACxByH,EAAgBG,EAAQH,SAC5B,GAAIA,EAAU,CACb,IAAIF,EAAyCE,EAASF,KAClDM,EAAaD,EAAQE,GACzB,GAAY,cAARP,GAAgC,mBAARA,EAA2B,CAEtD,IAAKQ,EAAKC,aAAaD,EAAKE,QAASF,EAAKG,QAASL,oBAInD,IAAIM,EAAqBV,EAASU,YAE9BA,GAES,mBAARZ,IACHY,GAAeA,IAIjB,IAAIC,EAAiCvC,EAAA,EAAYkC,EAAKd,KAAM,SAAClK,EAAOiD,GACnE,OAAOjD,EAAM+K,IAAMD,IAGfO,EAKCA,EAAWC,kBACfD,EAAWC,gBAAkBF,IAL9BC,GAAeC,gBAAiBF,EAAaL,GAAID,GACjDE,EAAKd,KAAKjG,KAAKoH,IAShBtC,EAAA,mBAA0B8B,EAAQU,WAAYF,aArCxCpI,EAAI,EAAGC,EAAMqH,EAASpH,OAAQF,EAAIC,EAAKD,MAAvCA,IA6CZlE,EAAAS,UAAMyK,aAAYhL,KAAAC,MAGlB8J,EAAA,KAAW9J,KAAKsM,UAAUrG,WAAY,SAACuB,GACtC1H,EAAKqK,SAASoC,UAAU/E,EAASd,YASnC9F,OAAAC,eAAWyI,EAAAhJ,UAAA,gBAAX,WAEC,IAAKN,KAAKwM,UAAW,CACpB,IAAIC,EAAwBzM,KAAK0M,aAC7BvC,EAAW,IAAIV,EAAA,EAAsBgD,GACzCzM,KAAKsG,WAAWvB,KAAK,IAAI0E,EAAA,EAAaU,IACtCnK,KAAKsG,WAAWvB,KAAKoF,EAAS5D,UAC9B4D,EAAS7F,OAAOC,GAAG,WAAYvE,KAAK2M,kBAAmB3M,MAAM,GAC7DA,KAAKwM,UAAYrC,EAGlB,OAAOnK,KAAKwM,2CAQHlD,EAAAhJ,UAAAoM,WAAV,WACC,OAAO,IAAIlD,EAAA,GAQLF,EAAAhJ,UAAAC,SAAP,WACCV,EAAAS,UAAMC,SAAQR,KAAAC,MACd8J,EAAA,KAAW9J,KAAKmK,SAASlE,WAAY,SAACS,GACrCA,EAAQnG,cASH+I,EAAAhJ,UAAA+G,SAAP,SAAgBC,GACftH,KAAKmK,SAAS5D,SAASc,SAASC,EAAO6C,SAAS5D,UAChD1G,EAAAS,UAAM+G,SAAQtH,KAAAC,KAACsH,IAGjBgC,EAjOA,CAAmCC,EAAA,GAyOnCG,EAAA,EAAS/I,kBAAiC,cAAI2I,EAC9CI,EAAA,EAAS/I,kBAAyC,sBAAI0I,oCCtiBtD/J,EAAAC,EAAAC,EAAA,sBAAAoN,IAAA,IAAAlN,EAAAJ,EAAA,GAAAK,EAAAL,EAAA,GAAAuN,EAAAvN,EAAA,KAAAmK,EAAAnK,EAAA,IAAAwN,EAAAxN,EAAA,GAAAyN,EAAAzN,EAAA,GAAA0N,EAAA1N,EAAA,IAAA2N,EAAA3N,EAAA,IAAA4N,EAAA5N,EAAA,GAAA6N,EAAA7N,EAAA,GAoEAsN,EAAA,SAAA/M,GAuDC,SAAA+M,IAAA,IAAA9M,EAGCD,EAAAE,KAAAC,OAAOA,KA9BEF,EAAAsN,OAAyC,IAAIN,EAAA,EA+BtDhN,EAAKG,UAAY,WAGjBH,EAAKuN,MAAQ,OACbvN,EAAKwN,OAAS,SACdxN,EAAKyN,cAAgB,GACrBzN,EAAK0N,aAAe,GACpB1N,EAAK2N,OAAO,EAAG,EAAG,EAAG,GAErB,IAAInK,EAAkB,IAAI2J,EAAA,EAG1BnN,EAAK4N,WAAWzG,YAAc,GAC9BnH,EAAK4N,WAAW3E,KAAOzF,EAAgBC,OAAO,cAG9CzD,EAAKwE,OAAOC,GAAG,MAAOzE,EAAK6N,eAAgB7N,GAAM,GACjDA,EAAKwE,OAAOC,GAAG,iBAAkBzE,EAAK8N,cAAe9N,GAAM,GAG3DA,EAAK+N,gBAAkB/N,EAAK8G,YAAYjH,EAAA,GACxCG,EAAK+N,gBAAgBhH,aAAc,EAGnC,IAAIiH,EAAuBhO,EAAK8G,YAAYiG,EAAA,UAC5CiB,EAAUjH,aAAc,EACxBiH,EAAU1K,OAASE,EAAgBC,OAAO,yBAC1CuK,EAAUC,YAAc,EACxBD,EAAUzK,cAAgB,GAC1ByK,EAAU/E,KAAOnI,OAAAoM,EAAA,EAAApM,GACjBkN,EAAU1G,eAAiB,SAC3B0G,EAAU3G,iBAAmB,SAC7B2G,EAAU5N,YAAa,EACvBJ,EAAKgO,UAAYA,EAEjBhO,EAAKwG,WAAWvB,KAAKjF,EAAKsN,QAG1BtN,EAAKO,eAsKP,OAvQ8BX,EAAA,EAAAkN,EAAA/M,GA4G7Be,OAAAC,eAAW+L,EAAAtM,UAAA,cAAX,WAMC,OALKN,KAAKgO,UACThO,KAAKgO,QAAU,IAAIvE,EAAA,EACnBzJ,KAAKgO,QAAQ1J,OAAOC,GAAG,WAAYvE,KAAKiO,kBAAmBjO,MAAM,GACjEA,KAAKgO,QAAQ1J,OAAOC,GAAG,UAAWvE,KAAKkO,oBAAqBlO,MAAM,IAE5DA,KAAKgO,yCASHpB,EAAAtM,UAAA2N,kBAAV,SAA4BzJ,GAC3B,IAAIhE,EAAoBgE,EAAMiC,SAC9B,GAAIzG,KAAK2E,MAAMnE,OAAO2N,SAAS3N,GAAS,CACvC,IAAI4N,EAAY5N,EAAO+G,QACvBvH,KAAKgO,QAAQ1D,YAAY9J,GACzBR,KAAKgO,QAAQjJ,KAAKqJ,GAClB5N,EAAS4N,EAETpO,KAAK2E,MAAM0J,UAAUtJ,KAAKqJ,GAE3B5N,EAAOmE,MAAQ3E,KAAK2E,MACpBnE,EAAO0F,OAASlG,KAAK6N,gBACrBrN,EAAO8N,qBAAsB,GASpB1B,EAAAtM,UAAA4N,oBAAV,SAA8B1J,GAE7BxE,KAAK0E,cASCkI,EAAAtM,UAAAqN,eAAP,SAAsBnJ,GACrB,IAAI+J,EAAmB/J,EAAM+J,SACzBC,EAAoBtB,EAAA,iBAAwBqB,EAAUvO,KAAK8N,WAE3DW,EAAoBzO,KAAK2E,MAAM8J,UAC/BC,EAAgB1M,KAAK2M,IAAI3O,KAAKwN,aAAcxN,KAAKuN,eAAiB,IAClE5L,GAAa6M,EAAU7M,EAAI3B,KAAK8N,UAAU3E,WAAa,GAAKuF,EAAQD,EACpE5M,GAAa2M,EAAU3M,EAAI7B,KAAK8N,UAAU1E,YAAc,GAAKsF,EAAQD,EAErE/M,EAAsB1B,KAAK2E,MAAMiK,eAAgBjN,EAAGA,EAAGE,EAAGA,IAE9D7B,KAAK2E,MAAMkK,eAAenN,EAAU1B,KAAK2E,MAAM8J,WAAW,IAQ3D7N,OAAAC,eAAW+L,EAAAtM,UAAA,aAaX,WACC,OAAON,KAAKoN,OAAO0B,WAdpB,SAAiBnK,GACZ3E,KAAK2E,OAASA,GACjB3E,KAAKoN,OAAO2B,IAAIpK,EAAO,IAAImI,EAAA,GAE1BnI,EAAML,OAAOC,GAAG,qBAAsBvE,KAAKgP,gBAAiBhP,MAAM,GAClE2E,EAAML,OAAOC,GAAG,oBAAqBvE,KAAK4N,cAAe5N,MAAM,uCAiB3D4M,EAAAtM,UAAA0O,gBAAP,WACC,IAAIrK,EAAkB3E,KAAK2E,MACvB8J,EAAoB9J,EAAM8J,UAC1BX,EAAuB9N,KAAK8N,UAEhCA,EAAUhH,MAAQ9G,KAAKmJ,WAAasF,EACpCX,EAAU/G,OAAS/G,KAAKoJ,YAAcqF,EAEtC,IAAIC,EAAgB1M,KAAK2M,IAAI3O,KAAKwN,aAAcxN,KAAKuN,eAAiB,IAElEM,EAA6BlJ,EAAMkJ,gBAEvCC,EAAUnM,EAAIK,KAAKiN,MAAMR,EAAYZ,EAAgB1E,WAAa,EAAI0E,EAAgBqB,QAAUR,EAAQD,EAAYX,EAAU3E,WAAa,GAC3I2E,EAAUjM,EAAIG,KAAKiN,MAAMR,EAAYZ,EAAgBzE,YAAc,EAAIyE,EAAgBsB,QAAUT,EAAQD,EAAYX,EAAU1E,YAAc,GAE7I0E,EAAUvN,YASJqM,EAAAtM,UAAAsN,cAAP,WACK5N,KAAK2E,QACR3E,KAAK6N,gBAAgBa,MAAQ1O,KAAK2E,MAAMyK,WAAapN,KAAK2M,IAAI3O,KAAKwN,aAAcxN,KAAKuN,eAAiB,IACvGvN,KAAKgP,kBACLhP,KAAKqP,cAOGzC,EAAAtM,UAAA+O,UAAV,WACCxP,EAAAS,UAAM+O,UAAStP,KAAAC,MACfA,KAAK6N,gBAAgBrF,QAAS7G,EAAG3B,KAAKmJ,WAAa,EAAGtH,EAAG7B,KAAKoJ,YAAc,IAC5EpJ,KAAK8N,UAAUwB,eAAkB3N,GAAI,EAAGE,GAAI,EAAGiF,MAAO9E,KAAKiN,KAAKjP,KAAKmJ,WAAa,GAAIpC,OAAQ/E,KAAKiN,KAAKjP,KAAKoJ,YAAc,KASrHwD,EAAAtM,UAAAiP,cAAP,SAAqBC,GAEpB,GAAIA,GAGCrC,EAAA,SAAeqC,EAAOhP,SAAW2M,EAAA,QAAcqC,EAAOhP,QACzD,IAAK,IAAIuD,EAAI,EAAGC,EAAMwL,EAAOhP,OAAOyD,OAAQF,EAAIC,EAAKD,IAAK,CACzD,IAAIvD,EAASgP,EAAOhP,OAAOuD,GACvBoJ,EAAA,SAAe3M,IAAW2M,EAAA,SAAe3M,IAAWR,KAAKmE,IAAIC,OAAO5D,KACvEgP,EAAOhP,OAAOuD,GAAK/D,KAAKmE,IAAIE,OAAO7D,IAOvCX,EAAAS,UAAMiP,cAAaxP,KAAAC,KAACwP,IAItB5C,EAvQA,CAA8BjN,EAAA,GA+Q9BoN,EAAA,EAASpM,kBAA4B,SAAIiM,oCCnVzCtN,EAAAC,EAAAC,EAAA,sBAAAiQ,IAAA,IAAA/P,EAAAJ,EAAA,GAAAoQ,EAAApQ,EAAA,KAAAqQ,EAAArQ,EAAA,KAAAsJ,EAAAtJ,EAAA,GAuDAmQ,EAAA,SAAA5P,GA+CC,SAAA4P,IAAA,IAAA3P,EAGCD,EAAAE,KAAAC,OAAOA,YACPF,EAAKG,UAAY,YAGjBH,EAAKqD,KAAO,IAAIwM,EAAA,EAChB7P,EAAKqD,KAAKyM,SAAW,GACrB9P,EAAKqD,KAAK0M,SAAW,GAIrB/P,EAAKO,eAiBP,OA7E+BX,EAAA,EAAA+P,EAAA5P,GAsE9Be,OAAAC,eAAW4O,EAAAnP,UAAA,wBAAX,WACC,OAAO,OAGR,SAA4BQ,qCAG7B2O,EA7EA,CAA+BC,EAAA,GAqF/B9G,EAAA,EAASjI,kBAA6B,UAAI8O,oCC5I1CnQ,EAAAC,EAAAC,EAAA,sBAAAsQ,IAAA,IAAApQ,EAAAJ,EAAA,GAAAoQ,EAAApQ,EAAA,KAAAyQ,EAAAzQ,EAAA,KAAAsJ,EAAAtJ,EAAA,GAuDAwQ,EAAA,SAAAjQ,GAwCC,SAAAiQ,IAAA,IAAAhQ,EAGCD,EAAAE,KAAAC,OAAOA,YACPF,EAAKG,UAAY,SAGjBH,EAAKqD,KAAO,IAAI4M,EAAA,EAGhBjQ,EAAKO,eAmBP,OArE4BX,EAAA,EAAAoQ,EAAAjQ,GA6D3Be,OAAAC,eAAWiP,EAAAxP,UAAA,wBAAX,WACC,OAAO,OAGR,SAA4BQ,qCAI7BgP,EArEA,CAA4BJ,EAAA,GA6E5B9G,EAAA,EAASjI,kBAA0B,OAAImP,oCCpIvCxQ,EAAAC,EAAAC,EAAA,sBAAAwQ,IAAA,IAAAtQ,EAAAJ,EAAA,GAAAK,EAAAL,EAAA,GAAA2Q,EAAA3Q,EAAA,IAAA4Q,EAAA5Q,EAAA,IAAAwN,EAAAxN,EAAA,GAAA6Q,EAAA7Q,EAAA,IAAA8Q,EAAA9Q,EAAA,IAAA+Q,EAAA/Q,EAAA,GAAAgR,EAAAhR,EAAA,GAAAiR,EAAAjR,EAAA,IA8DA0Q,EAAA,SAAAnQ,GAmEC,SAAAmQ,IAAA,IAAAlQ,EACCD,EAAAE,KAAAC,OAAOA,KAbEF,EAAAsN,OAAyC,IAAIN,EAAA,EAetDhN,EAAKG,UAAY,cAEjBH,EAAKuN,MAAQ,QACbvN,EAAKwN,OAAS,SAEdxN,EAAKK,OAAS,WACdL,EAAK0Q,QAAQ,EAAG,EAAG,EAAG,GAEtB,IAAIlN,EAAkB,IAAIiN,EAAA,EAEtBE,EAAqB3Q,EAAK8G,YAAYqJ,EAAA,GAC1CQ,EAAW5J,aAAc,EACzB4J,EAAWC,MAAMC,KAAO,IACxBF,EAAW3J,MAAQlG,OAAAyP,EAAA,EAAAzP,CAAQ,KAC3B6P,EAAWD,QAAQ,EAAG,EAAG,EAAG,GAC5BC,EAAWG,WAAa,UACxB9Q,EAAK2Q,WAAaA,EAElB,IAAII,EAAoB/Q,EAAK8G,YAAYjH,EAAA,GACzCkR,EAAOhK,aAAc,EACrBgK,EAAO/J,MAAQlG,OAAAyP,EAAA,EAAAzP,CAAQ,KACvBiQ,EAAOnD,WAAW3E,KAAOzF,EAAgBC,OAAO,yBAChDsN,EAAOnD,WAAWzG,YAAc,IAChC4J,EAAOnD,WAAWpJ,OAAOC,GAAG,MAAOzE,EAAKgR,sBAAuBhR,GAAM,GACrE+Q,EAAOvM,OAAOC,GAAG,cAAezE,EAAKiR,gBAAiBjR,GAAM,GAC5DA,EAAK+Q,OAASA,EAEd,IAAIG,EAAgBH,EAAOjK,YAAYqJ,EAAA,GACvCe,EAAMnK,aAAc,EACpBmK,EAAMR,QAAQ,EAAG,EAAG,EAAG,GACvBQ,EAAMC,WAAY,EAClBD,EAAM1M,OAAOC,GAAG,OAAQzE,EAAKoR,gBAAiBpR,GAAM,GACpDA,EAAKkR,MAAQA,EAEb,IAAIG,EAAsBrR,EAAK8G,YAAYqJ,EAAA,UAC3CkB,EAAYtK,aAAc,EAC1BsK,EAAYT,MAAMC,KAAO,IACzBQ,EAAYX,QAAQ,EAAG,EAAG,EAAG,GAC7BW,EAAYP,WAAa,UACzB9Q,EAAKqR,YAAcA,EAGnBrR,EAAKkR,MAAMI,KAAO,SAClBtR,EAAKkR,MAAMK,WAAa,SAGxBvR,EAAKkR,MAAMvQ,YAAcX,EAAKwR,SAASC,UAAU,qCACjDzR,EAAKqR,YAAY1Q,YAAcX,EAAKwR,SAASC,UAAU,0BACvDzR,EAAK2Q,WAAWhQ,YAAcX,EAAKwR,SAASC,UAAU,2BAEtDzR,EAAKO,aAELP,EAAKwE,OAAOC,GAAG,kBAAmB,SAACC,GACZ,UAAlBA,EAAMC,UACT3E,EAAK0R,kBAEJC,GAAW,GAEd3R,EAAKwG,WAAWvB,KAAKjF,EAAKsN,QAE1BtN,EAAK0R,cAgNP,OAlViC9R,EAAA,EAAAsQ,EAAAnQ,GAqItBmQ,EAAA1P,UAAAkR,UAAV,WACoB,YAAfxR,KAAKG,QACRH,KAAK8G,MAAQ,GACb9G,KAAK+G,YAAS0K,EACdzR,KAAKmR,YAAYrK,MAAQlG,OAAAyP,EAAA,EAAAzP,CAAQ,KACjCZ,KAAKgR,MAAMlK,MAAQlG,OAAAyP,EAAA,EAAAzP,CAAQ,KAC3BZ,KAAKyQ,WAAW3J,MAAQlG,OAAAyP,EAAA,EAAAzP,CAAQ,KAChCZ,KAAK6Q,OAAO/J,MAAQlG,OAAAyP,EAAA,EAAAzP,CAAQ,KAC5BZ,KAAKmR,YAAYO,UAAY,EAC7B1R,KAAKyQ,WAAWkB,aAAe,EAC/B3R,KAAK6Q,OAAO9J,OAAS,EACrB/G,KAAKmR,YAAYS,UACjB5R,KAAKyQ,WAAWoB,SAChB7R,KAAKgR,MAAMc,KAAO,EAClB9R,KAAKgR,MAAMe,KAAO,EAClB/R,KAAKgR,MAAMgB,KAAO,GAEK,cAAfhS,KAAKG,SACbH,KAAKgR,MAAMc,KAAO,EAClB9R,KAAKgR,MAAMgB,KAAO,EAClBhS,KAAKgR,MAAMiB,KAAO,EAClBjS,KAAK+G,OAAS,GACd/G,KAAK8G,WAAQ2K,EACbzR,KAAKmR,YAAYpK,OAASnG,OAAAyP,EAAA,EAAAzP,CAAQ,KAClCZ,KAAKmR,YAAYrK,MAAQ,GACzB9G,KAAKgR,MAAMjK,OAASnG,OAAAyP,EAAA,EAAAzP,CAAQ,KAC5BZ,KAAKgR,MAAMlK,WAAQ2K,EACnBzR,KAAKyQ,WAAW1J,OAASnG,OAAAyP,EAAA,EAAAzP,CAAQ,KACjCZ,KAAKyQ,WAAW3J,MAAQ,GACxB9G,KAAK6Q,OAAO9J,OAASnG,OAAAyP,EAAA,EAAAzP,CAAQ,KAC7BZ,KAAK6Q,OAAO/J,MAAQ,EACpB9G,KAAKmR,YAAYe,WAAa,EAC9BlS,KAAKyQ,WAAW0B,YAAc,EAC9BnS,KAAKmR,YAAYU,SACjB7R,KAAKyQ,WAAWmB,YAWX5B,EAAA1P,UAAAwQ,sBAAP,SAA6BtM,GAC5B,IAAI4N,EAAiB5N,EAAM6N,OACvBxQ,EAAY2C,EAAM8N,YAAYzQ,EAC9B8C,EAAkB3E,KAAK2E,MAEvB4N,EAAmBvQ,KAAK0J,IAAI/G,EAAM6N,cAAgBxQ,KAAKyQ,IACvDC,EAAmB1Q,KAAK0J,IAAI/G,EAAMgO,cAAgB3Q,KAAKyQ,IAEvDG,GAAiBR,EAAOhJ,YAAcvH,GAAKuQ,EAAOhJ,aAAesJ,GAAYH,EAAWG,IACxFjE,EAAoBzM,KAAK6Q,IAAI,EAAGD,GACpCjO,EAAMkK,eAAelK,EAAMmO,aAAcrE,IAQ1C7N,OAAAC,eAAWmP,EAAA1P,UAAA,aAgCX,WACC,OAAON,KAAKoN,OAAO0B,WAjCpB,SAAiBnK,GAAjB,IAAA7E,EAAAE,KACCA,KAAKoN,OAAO2B,IAAIpK,EAAO,IAAImI,EAAA,GAC1BnI,EAAML,OAAOC,GAAG,iBAAkBvE,KAAK+Q,gBAAiB/Q,MAAM,GAC9D2E,EAAML,OAAOC,GAAG,mBAAoBvE,KAAK+S,YAAa/S,MAAM,GAE5DA,KAAKmR,YAAY7M,OAAOC,GAAG,MAAO,WAAQI,EAAMqO,QAAQrO,EAAMmO,eAAiBnO,GAAO,GAEtF/D,OAAAwP,EAAA,EAAAxP,GAAiBqS,KAAK3O,OAAOC,GAAG,QAAS,SAAC2O,GACrCpT,EAAKqT,UAAUC,aACdjD,EAAA,EAASkD,MAAMH,EAAG1O,MAAO,SACxB1E,EAAKqR,YAAYmC,UACpB3O,EAAMqO,UAEElT,EAAK2Q,WAAW6C,WACxB3O,EAAM4O,SAGCpD,EAAA,EAASkD,MAAMH,EAAG1O,MAAO,QACjCG,EAAM4O,SAEEpD,EAAA,EAASkD,MAAMH,EAAG1O,MAAO,UACjCG,EAAMqO,YAGNrO,GACH3E,KAAKyQ,WAAWnM,OAAOC,GAAG,MAAO,WAAQI,EAAM4O,OAAO5O,EAAMmO,eAAiBnO,GAAO,uCAgB/EqL,EAAA1P,UAAAyQ,gBAAP,WAEC,GADY/Q,KAAK2E,MACN,CACV,IAAIkM,EAAoB7Q,KAAK6Q,OACzBG,EAAgBhR,KAAKgR,MACN,YAAfhR,KAAKG,QACR6Q,EAAMwC,UAAYxR,KAAK2M,IAAI3O,KAAK6Q,OAAOzH,YAAa,IAEpD4H,EAAMjK,OAAS8J,EAAOzH,YAAcpJ,KAAKuF,UACzCyL,EAAMiB,KAAOpB,EAAOzH,YAAc4H,EAAM5H,YAEpC4H,EAAM5H,aAAe,EACxB4H,EAAMyC,SAAU,EAGhBzC,EAAMyC,SAAU,IAIjBzC,EAAM0C,SAAW1R,KAAK2M,IAAI3O,KAAK6Q,OAAO1H,WAAY,IAClD6H,EAAMlK,MAAQ+J,EAAO1H,WAAanJ,KAAKuF,UACvCyL,EAAMe,KAAOlB,EAAO1H,WAAa6H,EAAM7H,WAEnC6H,EAAM7H,YAAc,EACvB6H,EAAMyC,SAAU,EAGhBzC,EAAMyC,SAAU,KAWbzD,EAAA1P,UAAAyS,YAAP,WACC,IAAIlC,EAAoB7Q,KAAK6Q,OACzBlM,EAAkB3E,KAAK2E,MACvBqM,EAAgBhR,KAAKgR,MAEzB,IAAKA,EAAM2C,OAAQ,CAClB,IAAIC,GAAgB5R,KAAK0J,IAAI/G,EAAM8J,WAAazM,KAAK0J,IAAI1L,KAAK2E,MAAMgO,eAAiB3Q,KAAKyQ,IAEvE,YAAfzS,KAAKG,OACR6Q,EAAMnP,EAAIgP,EAAOzH,aAAeyH,EAAOzH,YAAc4H,EAAM5H,aAAewK,EAAO5T,KAAKuF,UAAYyL,EAAM5H,YAGxG4H,EAAMrP,EAAIkP,EAAO1H,WAAayK,EAAO5T,KAAKuF,YAUtCyK,EAAA1P,UAAA4Q,gBAAP,WACC,IAGI0C,EAHA/C,EAAoB7Q,KAAK6Q,OACzBlM,EAAkB3E,KAAK2E,MACvBqM,EAAgBhR,KAAKgR,MAWzB4C,EARc5R,KAAK0J,IAAI1L,KAAK2E,MAAMgO,cAAgB3Q,KAAKyQ,KAGtDmB,EADkB,YAAf5T,KAAKG,OACDH,KAAKuF,WAAasL,EAAOzH,YAAc4H,EAAM7B,OAAS6B,EAAM5H,cAAgByH,EAAOzH,YAAc4H,EAAM5H,aAGvGpJ,KAAKuF,UAAYyL,EAAM9B,OAAS2B,EAAO1H,YAI/C,IAAIsF,EAAoBzM,KAAK6Q,IAAI,EAAGe,GACpCjP,EAAMkK,oBAAe4C,EAAWhD,GAAW,EAAO,IAUnD7N,OAAAC,eAAWmP,EAAA1P,UAAA,iBAAX,WACC,OAAO0B,KAAK0J,IAAI1L,KAAK2E,MAAM6N,cAAgBxQ,KAAKyQ,IAAMzQ,KAAK0J,IAAI1L,KAAK2E,MAAMgO,cAAgB3Q,KAAKyQ,qCASzFzC,EAAA1P,UAAAuT,iBAAP,WACC,OAAO,IAAI3D,EAAA,GAGbF,EAlVA,CAAiCrQ,EAAA,GA0VjC2Q,EAAA,EAAS3P,kBAA+B,YAAIqP,oCCxZ5CpP,OAAAC,eAAArB,EAAA,cAAAsB,OAAA,QAAAgT,EAAAxU,EAAA,KACAyU,OAAAC,QAAiBF,oCCDjBlT,OAAAC,eAAArB,EAAA,cAAAsB,OAAA,QAAAmT,EAAA3U,EAAA,KAAAA,EAAAC,EAAAC,EAAA,mCAAAyU,EAAA,IAAA3U,EAAAC,EAAAC,EAAA,2BAAAyU,EAAA,IAAA3U,EAAAC,EAAAC,EAAA,mCAAAyU,EAAA,QAAAC,EAAA5U,EAAA,KAAAA,EAAAC,EAAAC,EAAA,+BAAA0U,EAAA,QAAAC,EAAA7U,EAAA,KAAAA,EAAAC,EAAAC,EAAA,qCAAA2U,EAAA,IAAA7U,EAAAC,EAAAC,EAAA,6BAAA2U,EAAA,QAAAC,EAAA9U,EAAA,KAAAA,EAAAC,EAAAC,EAAA,sCAAA4U,EAAA,IAAA9U,EAAAC,EAAAC,EAAA,8BAAA4U,EAAA,QAAAC,EAAA/U,EAAA,KAAAA,EAAAC,EAAAC,EAAA,8BAAA6U,EAAA,QAAAC,EAAAhV,EAAA,KAAAA,EAAAC,EAAAC,EAAA,+BAAA8U,EAAA,QAAAC,EAAAjV,EAAA,KAAAA,EAAAC,EAAAC,EAAA,6BAAA+U,EAAA,QAAAC,EAAAlV,EAAA,KAAAA,EAAAC,EAAAC,EAAA,4BAAAgV,EAAA,QAAAC,EAAAnV,EAAA,KAAAA,EAAAC,EAAAC,EAAA,8BAAAiV,EAAA,QAAAC,EAAApV,EAAA,KAAAA,EAAAC,EAAAC,EAAA,2BAAAkV,EAAA,QAAAC,EAAArV,EAAA,KAAAA,EAAAC,EAAAC,EAAA,6CAAAmV,EAAA,IAAArV,EAAAC,EAAAC,EAAA,qCAAAmV,EAAA,QAAAC,EAAAtV,EAAA,KAAAA,EAAAC,EAAAC,EAAA,0CAAAoV,EAAA,IAAAtV,EAAAC,EAAAC,EAAA,kCAAAoV,EAAA,QAAAC,EAAAvV,EAAA,KAAAA,EAAAC,EAAAC,EAAA,4CAAAqV,EAAA,IAAAvV,EAAAC,EAAAC,EAAA,oCAAAqV,EAAA,QAAAC,EAAAxV,EAAA,KAAAA,EAAAC,EAAAC,EAAA,2CAAAsV,EAAA,IAAAxV,EAAAC,EAAAC,EAAA,mCAAAsV,EAAA,QAAAC,EAAAzV,EAAA,KAAAA,EAAAC,EAAAC,EAAA,yCAAAuV,EAAA,IAAAzV,EAAAC,EAAAC,EAAA,iCAAAuV,EAAA,QAAAC,EAAA1V,EAAA,KAAAA,EAAAC,EAAAC,EAAA,sCAAAwV,EAAA,IAAA1V,EAAAC,EAAAC,EAAA,mCAAAwV,EAAA,IAAA1V,EAAAC,EAAAC,EAAA,oCAAAwV,EAAA,IAAA1V,EAAAC,EAAAC,EAAA,+BAAAwV,EAAA,QAAAC,EAAA3V,EAAA,KAAAA,EAAAC,EAAAC,EAAA,gCAAAyV,EAAA,QAAAC,EAAA5V,EAAA,KAAAA,EAAAC,EAAAC,EAAA,6BAAA0V,EAAA,QAAAC,EAAA7V,EAAA,IAAAA,EAAAC,EAAAC,EAAA,+BAAA2V,EAAA,QAAAC,EAAA9V,EAAA,KAAAA,EAAAC,EAAAC,EAAA,gCAAA4V,IAAA,IAAAC,EAAA/V,EAAA,KAAAA,EAAAC,EAAAC,EAAA,wBAAA6V,sCCAA/V,EAAAC,EAAAC,EAAA,sBAAA8V,IAAAhW,EAAAC,EAAAC,EAAA,sBAAA+V,IAAA,IAAA7V,EAAAJ,EAAA,GAAAkW,EAAAlW,EAAA,KAAAmW,EAAAnW,EAAA,KAAAoW,EAAApW,EAAA,KAAAqW,EAAArW,EAAA,KAAAsW,EAAAtW,EAAA,IAAAuW,EAAAvW,EAAA,KAAAwW,EAAAxW,EAAA,IAAAyW,EAAAzW,EAAA,IAAA0W,EAAA1W,EAAA,GAAA2W,EAAA3W,EAAA,GAAA4W,EAAA5W,EAAA,GAAA6W,EAAA7W,EAAA,IAAA8W,EAAA9W,EAAA,GAAA+W,EAAA/W,EAAA,GAAAgX,EAAAhX,EAAA,KAkDAgW,EAAA,SAAAzV,GAYC,SAAAyV,IAAA,IAAAxV,EACCD,EAAAE,KAAAC,OAAOA,YACPF,EAAKG,UAAY,mBACjBH,EAAKO,eAGP,OAlBsCX,EAAA,EAAA4V,EAAAzV,GAkBtCyV,EAlBA,CAAsCE,EAAA,GA0PtCD,EAAA,SAAA1V,GA+NC,SAAA0V,IAAA,IAAAzV,EAGCD,EAAAE,KAAAC,OAAOA,KAlKDF,EAAAsP,WAAqB,EA2FrBtP,EAAAyW,aAAuB,IAOvBzW,EAAA0W,WAAwCL,EAAA,SAWxCrW,EAAA6S,aAAuB,EAWvB7S,EAAA0S,aAAuB,GAgBpB1S,EAAA2W,mBAAiC3U,SAAU,EAAGF,UAAW,GA2BlE9B,EAAKG,UAAY,WAGjBH,EAAK4F,WAAa,IAAIkQ,EAAA,EAEtB9V,EAAK4W,eAAiB,EACtB5W,EAAK6W,UAAY,GACjB7W,EAAK8W,cAAgB,EAGrB9W,EAAK0Q,QAAQ,EAAG,EAAG,EAAG,GAGtB1Q,EAAK4T,SAAW,GAChB5T,EAAK0T,UAAY,GAEjB1T,EAAKwE,OAAOuS,KAAK,SAAU,WAC1B/W,EAAKgX,OAAO,KAIb,IAAIjJ,EAAkB/N,EAAK+N,gBAC3BA,EAAgBoD,WAAY,EAC5BpD,EAAgBkJ,OAAQ,EACxBlJ,EAAgBmJ,WAAY,EAC5BnJ,EAAgBvJ,OAAOC,GAAG,cAAezE,EAAKmX,mBAAoBnX,GAAM,GACxE+N,EAAgBvJ,OAAOC,GAAG,YAAazE,EAAKoX,gBAAiBpX,GAAM,GACnE+N,EAAgBvJ,OAAOC,GAAG,OAAQzE,EAAKqX,WAAYrX,GAAM,GACzD+N,EAAgBuJ,OAAS,EACzBvJ,EAAgBH,WAAWzG,YAAc,EAIzCnH,EAAKwE,OAAOC,GAAG,gBAAiBzE,EAAK8K,eAAgB9K,GAAM,GAI3D,IAAIuX,EAAiBvX,EAAKuX,eAC1BvX,EAAKwG,WAAWvB,KAAK8I,EAAgBvJ,OAAOC,GAAG,iBAAkB,WAC5DzE,EAAKwX,SACJxX,EAAKyX,eACRzX,EAAKyX,cAAcC,OAEpB1X,EAAK2X,mBACL3X,EAAK+O,eAAe/O,EAAK4X,kBAAmB5X,EAAK2O,WAAW,EAAM,GAElE3O,EAAKU,OAAOmX,KAAK,SAACnX,GACjBA,EAAOoX,+BAGPnG,GAAW,IAEd,IAAIoG,EAAmBR,EAAe3J,kBACtCmK,EAAiB5Q,YAAc,EAC/B4Q,EAAiBvT,OAAOC,GAAG,OAAQ,SAACuT,GAAQhY,EAAK+N,gBAAgBkK,UAAUD,EAAEzF,OAAO2F,aAAaC,aAAaC,SAAS,KAAQpY,GAC/H+X,EAAiBvT,OAAOC,GAAG,KAAM,SAACuT,GAAQhY,EAAK+N,gBAAgBsK,YAAcrY,GAC7E+X,EAAiBvT,OAAOC,GAAG,YAAazE,EAAKoX,gBAAiBpX,GAC9D+X,EAAiBO,WAAY,EAE7Bf,EAAe/S,OAAOC,GAAG,OAAQzE,EAAKuY,cAAevY,GAAM,GAG3DA,EAAK4N,WAAWzG,YAAc,EAC9BnH,EAAK4N,WAAWjN,YAAcX,EAAKwR,SAASC,UAAU,+DAGtDzR,EAAKwG,WAAWvB,KAAKnE,OAAAmV,EAAA,EAAAnV,GAAiBqS,KAAK3O,OAAOC,GAAG,QAAS,SAAC2O,GAC9D,GAAIpT,EAAKqT,UAAUC,cAAgBtT,EAAKwY,eAAiBxY,EAAKwY,aAAatH,MAAMsC,WAChF,OAAQwC,EAAA,EAASyC,YAAYrF,EAAG1O,QAC/B,IAAK,KACJ1E,EAAK0Y,KAAM7W,EAAG,EAAGE,EAAG,KACpB,MACD,IAAK,OACJ/B,EAAK0Y,KAAM7W,EAAG,EAAGE,GAAI,KACrB,MACD,IAAK,OACJ/B,EAAK0Y,KAAM7W,EAAG,GAAKE,EAAG,IACtB,MACD,IAAK,QACJ/B,EAAK0Y,KAAM7W,GAAI,GAAKE,EAAG,MAIxB/B,IAEHA,EAAK2Y,mBAAqB,OAG1B3Y,EAAKO,eAo3BP,OA/qC8BX,EAAA,EAAA6V,EAAA1V,GAmUnB0V,EAAAjV,UAAA6W,WAAV,WAEC,IAAIuB,EAAK1Y,KAAK2Y,YAAc3Y,KAAKyO,UAAYzO,KAAKoP,WAC9CwJ,EAAK5Y,KAAK6Y,aAAe7Y,KAAKyO,UAAYzO,KAAKoP,WAC/CzN,EAAI3B,KAAK6N,gBAAgBqB,OACzBrN,EAAI7B,KAAK6N,gBAAgBsB,OAEzBwH,EAAY3W,KAAK2W,UAEjB7E,EAAO9P,KAAK2M,IAAI3O,KAAK8Y,UAAY,EAAInC,GAAa+B,EAAK,GAAIA,GAAM/B,EAAY,KAC7EhV,EAAImQ,IACPnQ,EAAImQ,GAGL,IAAIC,EAAO/P,KAAKwD,IAAIxF,KAAK8Y,SAAWnC,EAAY+B,EAAK,EAAG1Y,KAAK8Y,SAAWJ,GAAM/B,EAAY,KACtFhV,EAAIoQ,IACPpQ,EAAIoQ,GAIL,IAAIC,EAAOhQ,KAAK2M,IAAI3O,KAAK+Y,WAAa,EAAIpC,GAAaiC,EAAK,GAAIA,GAAMjC,EAAY,KAC9E9U,EAAImQ,IACPnQ,EAAImQ,GAGL,IAAIC,EAAOjQ,KAAKwD,IAAIxF,KAAK+Y,UAAYpC,EAAYiC,EAAK,EAAG5Y,KAAK+Y,UAAYH,GAAMjC,EAAY,KACxF9U,EAAIoQ,IACPpQ,EAAIoQ,GAGLjS,KAAK6N,gBAAgBrF,QAAS7G,EAAGA,EAAGE,EAAGA,QAAK4P,OAAWA,GAAW,GAElEzR,KAAK0X,kBAAoB1X,KAAK8S,cAOrByC,EAAAjV,UAAA0Y,sBAAV,WAECnZ,EAAAS,UAAM0Y,sBAAqBjZ,KAAAC,MAItBqW,EAAA,SAAerW,KAAKS,eACxBT,KAAKS,YAAcT,KAAKsR,SAASC,UAAU,SAWnCgE,EAAAjV,UAAA+X,cAAV,WACKrY,KAAKuX,eACRvX,KAAKuX,cAAcC,QAUXjC,EAAAjV,UAAA4W,gBAAV,SAA0B1S,GACzB,IAAI+J,EAAmB2H,EAAA,mBAA0B1R,EAAMhD,MAAOxB,KAAKiZ,eAC/DvX,EAAsB1B,KAAK4O,cAAcL,GAC7CvO,KAAKuT,OAAO7R,IASH6T,EAAAjV,UAAA4Y,YAAV,SAAsB1U,GAErB,IAAI+J,EAAmB2H,EAAA,mBAA0B1R,EAAMhD,MAAOxB,KAAKiZ,eAC/DvX,EAAsB1B,KAAK4O,cAAcL,GAEzC/J,EAAM2U,MAAMtX,EAAI,EACnB7B,KAAKuT,OAAO7R,GAGZ1B,KAAKgT,QAAQtR,IAWfd,OAAAC,eAAW0U,EAAAjV,UAAA,0BAmBX,WACC,OAAON,KAAK2D,iBAAiB,2BApB9B,SAA8B7C,GAEzBd,KAAK6D,iBAAiB,qBAAsB/C,KAClC,QAATA,GACHd,KAAKoZ,oBAAsBpZ,KAAKqX,eAAe/S,OAAOC,GAAG,QAASvE,KAAKkZ,YAAalZ,MAAM,GAC1FA,KAAKsG,WAAWvB,KAAK/E,KAAKoZ,uBAGtBpZ,KAAKoZ,qBACRpZ,KAAKoZ,oBAAoBC,UAE1BrZ,KAAKqX,eAAeiC,WAAY,qCAqCnC1Y,OAAAC,eAAW0U,EAAAjV,UAAA,kBAQX,WACC,OAAON,KAAK2D,iBAAiB,mBAT9B,SAAsB+B,GACrBA,EAAWgR,eAAiB1W,KAAK0W,eACjC1W,KAAK6D,iBAAiB,aAAc6B,GAAY,oCAgB1C6P,EAAAjV,UAAAsK,eAAP,eAAA9K,EAAAE,KAsBC,GApBAA,KAAK4H,KAAO,KACZ5H,KAAK2H,KAAO,KACZ3H,KAAKyH,MAAQ,KACbzH,KAAK0H,MAAQ,KAEb0O,EAAA,KAAWpW,KAAKQ,OAAOyF,WAAY,SAACzF,IAC9BV,EAAK8H,KAAOpH,EAAOoH,OAAUyO,EAAA,SAAevW,EAAK8H,SACrD9H,EAAK8H,KAAOpH,EAAOoH,OAEf9H,EAAK6H,KAAOnH,EAAOmH,OAAU0O,EAAA,SAAevW,EAAK6H,SACrD7H,EAAK6H,KAAOnH,EAAOmH,OAGf7H,EAAK2H,MAAQjH,EAAOiH,QAAW4O,EAAA,SAAevW,EAAK2H,UACvD3H,EAAK2H,MAAQjH,EAAOiH,QAEhB3H,EAAK4H,MAAQlH,EAAOkH,QAAW2O,EAAA,SAAevW,EAAK4H,UACvD5H,EAAK4H,MAAQlH,EAAOkH,SAGlB2O,EAAA,SAAerW,KAAK2H,OAAS0O,EAAA,SAAerW,KAAKyH,OAAQ,CAE5DzH,KAAK0F,WAAW6T,aAAgB5X,EAAG,EAAGE,EAAG,GACzC7B,KAAK0F,WAAWgJ,MAAQ,EAGxB,IAAIgI,EAAiB1W,KAAK0F,WAAWgR,eACrC1W,KAAK0F,WAAWgR,eAAiB,EACjC,IAAI8C,EAAoBxZ,KAAK0F,WAAW+C,SAAU7G,UAAW5B,KAAK4H,KAAM9F,UAAW9B,KAAK0H,MAAQ1H,KAAKyH,OAAS,IAC1GgS,EAAoBzZ,KAAK0F,WAAW+C,SAAU7G,UAAW5B,KAAK2H,KAAM7F,UAAW9B,KAAK0H,MAAQ1H,KAAKyH,OAAS,IAE1GiS,EAAqB1Z,KAAK0F,WAAW+C,SAAU7G,WAAY5B,KAAK2H,KAAO3H,KAAK4H,MAAQ,EAAG9F,SAAU9B,KAAKyH,QACtGkS,EAAqB3Z,KAAK0F,WAAW+C,SAAU7G,WAAY5B,KAAK2H,KAAO3H,KAAK4H,MAAQ,EAAG9F,SAAU9B,KAAK0H,QAC1G1H,KAAK0F,WAAWgR,eAAiBA,EAEjC1W,KAAK0F,WAAW6T,aAAgB5X,EAAG6X,EAAU7X,GAAK8X,EAAU9X,EAAI6X,EAAU7X,GAAK,EAAGE,EAAG6X,EAAW7X,GAAK8X,EAAW9X,EAAI6X,EAAW7X,GAAK,GAEpI,IAAIuN,OAAU,EAEVuJ,EAAcc,EAAU9X,EAAI6X,EAAU7X,EACtCkX,EAAec,EAAW9X,EAAI6X,EAAW7X,EAEzC+X,EAAiB5Z,KAAKqX,eAAewC,WAAalB,EAClDmB,EAAiB9Z,KAAKqX,eAAe0C,YAAclB,EAGtDzJ,EADGwK,EAASE,EACCA,EAEAF,GAGVvD,EAAA,MAAYjH,IAAeA,GAAc4K,OAC5C5K,EAAa,GAGdpP,KAAK0F,WAAWgJ,MAAQU,EACxBpP,KAAK2Y,YAAcA,EAAcvJ,EACjCpP,KAAK6Y,aAAeA,EAAezJ,EAGnC,IAAI6K,EAAsBja,KAAK0F,WAAW+C,SAAU7G,WAAY5B,KAAK2H,KAAO3H,KAAK4H,MAAQ,EAAG9F,SAAU9B,KAAKyH,QACvGyS,EAAqBla,KAAK0F,WAAW+C,SAAU7G,UAAW5B,KAAK4H,KAAM9F,UAAW9B,KAAK0H,MAAQ1H,KAAKyH,OAAS,IAK/GzH,KAAK6N,gBAAgBsM,aAAgBxY,EAAGuY,EAAWvY,EAAGE,EAAGoY,EAAYpY,EAAGiF,MAAO9G,KAAK2Y,YAAa5R,OAAO/G,KAAK6Y,cAE7G7Y,KAAKyX,mBAEL,IAAI5J,EAA6B7N,KAAK6N,gBAClCwJ,EAA4BrX,KAAKqX,eAErCxJ,EAAgBlM,EAAI0V,EAAelO,WAAa,EAChD0E,EAAgBhM,EAAIwV,EAAejO,YAAc,IAUzCmM,EAAAjV,UAAAmX,iBAAV,eACKrI,EADLtP,EAAAE,KAGK4Z,EAAiB5Z,KAAKqX,eAAewC,WAAa7Z,KAAK2Y,YACvDmB,EAAiB9Z,KAAKqX,eAAe0C,YAAc/Z,KAAK6Y,aAG3DzJ,EADGwK,EAASE,EACCA,EAEAF,GAGVvD,EAAA,MAAYjH,IAAeA,GAAc4K,OAC5C5K,EAAa,GAGVA,GAAcpP,KAAKoP,aACtBpP,KAAKoP,WAAaA,EAElBgH,EAAA,KAAWpW,KAAKQ,OAAOyF,WAAY,SAACzF,GACnCA,EAAOkO,MAAQ5O,EAAKsP,WACpB5O,EAAOoX,wBAGR5X,KAAKoa,SAAS,uBAWT7E,EAAAjV,UAAAsO,cAAP,SAAqBpN,GACpB,IAAIhB,EAA+BR,KAAKQ,OAAO0X,SAAS,GACxD,GAAI1X,EAAQ,CACX,IAAI6Z,EAAsBnE,EAAA,iBAAwB1U,EAAOhB,GACzD,OAAOR,KAAKsa,iBAAiBD,KAWxB9E,EAAAjV,UAAAia,cAAP,SAAqB/Y,GACpB,IAAIhB,EAA+BR,KAAKQ,OAAO0X,SAAS,GACxD,GAAI1X,EAAQ,CACX,IAAI6Z,EAAsBra,KAAKwa,iBAAiBhZ,GAChD,OAAO0U,EAAA,iBAAwBmE,EAAa7Z,KAWvC+U,EAAAjV,UAAAga,iBAAP,SAAwB9Y,GACvB,OAAOxB,KAAK0F,WAAW+U,OAAOjZ,IAUxB+T,EAAAjV,UAAAka,iBAAP,SAAwBhZ,GACvB,OAAOxB,KAAK0F,WAAW+C,QAAQjH,IAYhCZ,OAAAC,eAAW0U,EAAAjV,UAAA,eAcX,WACC,OAAON,KAAK0a,cAfb,SAAmBvP,GACdA,GAAWnL,KAAK0a,WACnB1a,KAAK0a,SAAWvP,EAChBnL,KAAK2a,iBAELvE,EAAA,KAAWpW,KAAK4a,WAAW3U,WAAY,SAACtE,GACvCA,EAAEgZ,qDAsBEpF,EAAAjV,UAAAuO,eAAP,SAAsBrN,EAAkBiN,EAAmBoM,EAAkBC,GAA7E,IAAAhb,EAAAE,KAUC,GAJKwB,IACJA,EAAQxB,KAAK8S,cAGTtR,EAAL,CAIAxB,KAAK0X,kBAAoBlW,EAEzBiN,EAAYwH,EAAA,WAAiBxH,EAAWzO,KAAK2S,aAAc3S,KAAKwS,cAEhE,IAAI6H,EAAsBra,KAAK0F,WAAW+C,QAAQjH,GAE9C+M,EAAmBvO,KAAKua,cAAc/Y,GA8B1C,OA7BIqZ,IACHtM,GACC5M,EAAG3B,KAAK8Y,SAAW,EACnBjX,EAAG7B,KAAK+Y,UAAY,IAIjB1C,EAAA,SAAeyE,KACnBA,EAAW9a,KAAKuW,cAGjBvW,KAAKuX,cAAgBvX,KAAK6N,gBAAgBkN,UAExCtW,SAAU,QACVuW,GAAIvM,IAEJhK,SAAU,IACVuW,GAAIzM,EAAS5M,EAAI0Y,EAAY1Y,EAAI8M,EAAYzO,KAAKoP,WAAapP,KAAKib,mBAEpExW,SAAU,IACVuW,GAAIzM,EAAS1M,EAAIwY,EAAYxY,EAAI4M,EAAYzO,KAAKoP,WAAapP,KAAKkb,kBACjEJ,EAAU9a,KAAKwW,YAEpBxW,KAAKsG,WAAWvB,KAAK/E,KAAKuX,cAAcjT,OAAOC,GAAG,iBAAkB,WACnEzE,EAAK4X,kBAAoB5X,EAAKgT,gBAG/B9S,KAAK6N,gBAAgB9H,mBAEd/F,KAAKuX,gBAYNhC,EAAAjV,UAAA6a,gBAAP,SAAuBC,EAAsB3M,EAAoBoM,EAAkBC,GAMlF,QAJcrJ,GAAVoJ,IACHA,GAAS,GAGNO,aAAqB1F,EAAA,EAIxB,OAHIW,EAAA,MAAY5H,KACfA,EAAY,GAENzO,KAAK6O,gBAAiB/M,SAAUsZ,EAAUtZ,SAAUF,UAAWwZ,EAAUxZ,WAAa6M,EAAWoM,EAAQC,GAGjH,GAAIM,aAAqBzF,EAAA,EAAY,CACpC,IAAInO,EAAW4T,EAAU5T,SACzB,OAAI6O,EAAA,SAAe5H,GACXzO,KAAK6O,gBAAiB/M,SAAUsZ,EAAUtZ,SAAUF,UAAWwZ,EAAUxZ,WAAa6M,EAAWoM,EAAQC,GAGzG9a,KAAKqb,gBAAgB7T,EAASC,MAAOD,EAASG,KAAMH,EAASE,MAAOF,EAASI,KAAM,KAAMiT,EAAQC,KAuBpGvF,EAAAjV,UAAA+a,gBAAP,SAAuB5T,EAAeE,EAAcD,EAAeE,EAAc0T,EAAgBT,EAAkBC,GAC9GzE,EAAA,MAAYiF,KACfA,EAAQ,GAGT,IAAI7M,EAAY6M,EAAQtZ,KAAK2M,KAAK3O,KAAK0H,MAAQ1H,KAAKyH,QAAUC,EAAQD,IAASzH,KAAK4H,KAAO5H,KAAK2H,OAASC,EAAOD,IAEhH,OAAO3H,KAAK6O,gBAAiB/M,SAAU2F,GAASC,EAAQD,GAAS,EAAG7F,UAAWgG,GAAQD,EAAOC,GAAQ,GAAK6G,EAAWoM,EAAQC,IAWxHvF,EAAAjV,UAAAiT,OAAP,SAAc7R,EAAsBoZ,GACnC,OAAO9a,KAAK6O,eAAenN,EAA2B,EAAjB1B,KAAKyO,WAAe,EAAOqM,IAW1DvF,EAAAjV,UAAA0S,QAAP,SAAetR,EAAsBoZ,GACpC,OAAO9a,KAAK6O,eAAenN,EAAU1B,KAAKyO,UAAY,GAAG,EAAOqM,IAkB1DvF,EAAAjV,UAAAkY,IAAP,SAAWW,EAAe2B,GACzB,IAAItZ,EAAQxB,KAAKua,cAAcva,KAAK8S,cACpCtR,EAAMG,GAAK3B,KAAKmJ,WAAagQ,EAAMxX,EACnCH,EAAMK,GAAK7B,KAAKoJ,YAAc+P,EAAMtX,EACpC7B,KAAK6O,eAAe7O,KAAK4O,cAAcpN,GAAQxB,KAAKyO,WAAW,EAAMqM,IAUtEla,OAAAC,eAAW0U,EAAAjV,UAAA,oBAAX,WACC,OAAON,KAAK4O,eACXjN,EAAG3B,KAAKmJ,WAAa,EACrBtH,EAAG7B,KAAKoJ,YAAc,qCAWxBxI,OAAAC,eAAW0U,EAAAjV,UAAA,iBAAX,WACC,OAAON,KAAK6N,gBAAgBa,WAG7B,SAAqB5N,GACpBd,KAAK6N,gBAAgBa,MAAQ5N,mCAMpByU,EAAAjV,UAAA2W,mBAAV,WACKjX,KAAKyO,WAAazO,KAAKub,iBAC1Bvb,KAAKoa,SAAS,oBACdpa,KAAKub,eAAiBvb,KAAKyO,YAGxBzO,KAAK8S,cAAiB9S,KAAKyW,kBAAkB3U,UAAY9B,KAAK8S,aAAahR,UAAY9B,KAAKyW,kBAAkB7U,WAAa5B,KAAK8S,aAAalR,WAChJ5B,KAAKoa,SAAS,uBA4BhBxZ,OAAAC,eAAW0U,EAAAjV,UAAA,gBAYX,WACC,IAAKN,KAAKwb,UAAW,CACpB,IAAIC,EAAqB,IAAI5F,EAAA,EAC7B7V,KAAKyb,SAAWA,EAEjB,OAAOzb,KAAKwb,eAjBb,SAAoBC,GACfzb,KAAKwb,WACRxb,KAAK0b,cAAc1b,KAAKwb,WAEzBxb,KAAKwb,UAAYC,EACjBzb,KAAKwb,UAAU7W,MAAQ3E,KACvByb,EAASvV,OAASlG,KAAKqX,gDAsCxBzW,OAAAC,eAAW0U,EAAAjV,UAAA,mBAYX,WACC,OAAON,KAAKsY,kBAbb,SAAuBqD,GAClB3b,KAAKsY,cACRtY,KAAK0b,cAAc1b,KAAKsY,cAEzBtY,KAAKsY,aAAeqD,EACpBA,EAAYhX,MAAQ3E,KACpB2b,EAAYzV,OAASlG,KAAKqX,gDAejB9B,EAAAjV,UAAAsb,aAAV,WACC,OAAO,IAAInG,EAAA,GAYZ7U,OAAAC,eAAW0U,EAAAjV,UAAA,sBASX,WACC,OAAON,KAAK2D,iBAAiB,uBAV9B,SAA0B7C,GACrBd,KAAK6D,iBAAiB,iBAAkByS,EAAA,eAAoBxV,KAC/Dd,KAAK6b,wDAgBPjb,OAAAC,eAAW0U,EAAAjV,UAAA,iBAOX,WACC,OAAON,KAAK2D,iBAAiB,kBAR9B,SAAqB7C,GACpBd,KAAK6D,iBAAiB,YAAa/C,oCAkBpCF,OAAAC,eAAW0U,EAAAjV,UAAA,oBAOX,WACC,OAAON,KAAK2D,iBAAiB,qBAR9B,SAAwB7C,GACvBd,KAAK6D,iBAAiB,eAAgB/C,oCAkBvCF,OAAAC,eAAW0U,EAAAjV,UAAA,qBAOX,WACC,OAAON,KAAK2D,iBAAiB,sBAR9B,SAAyB7C,GACxBd,KAAK6D,iBAAiB,gBAAiB/C,oCAc9ByU,EAAAjV,UAAAub,qBAAV,WAEC7b,KAAK0F,WAAWgR,eAAiB1W,KAAK0W,eAEtCN,EAAA,KAAWpW,KAAKQ,OAAOyF,WAAY,SAACzF,GACnCA,EAAOkE,gBAST9D,OAAAC,eAAW0U,EAAAjV,UAAA,qBAiBX,WAIC,OAHKN,KAAK8b,aAAsB,SAC/B9b,KAAK+b,cAAc,WAEb/b,KAAK8b,aAAsB,aArBnC,SAAyBhb,GAAzB,IAAAhB,EAAAE,KACKA,KAAK8b,aAAsB,SAC9B9b,KAAK0b,cAAc1b,KAAK8b,aAAsB,SAE/C9b,KAAK8b,aAAsB,QAAIhb,EAC/Bd,KAAK8b,aAAsB,QAAE5R,UAAYlK,KACzCA,KAAKsE,OAAOC,GAAG,SAAU,WACxBzE,EAAKkc,SAAS,YACZhc,MAAM,GACTA,KAAKic,oBAAoBnb,EAAO,4CAqB1ByU,EAAAjV,UAAAiP,cAAP,SAAqBC,GAGhB6G,EAAA,SAAe7G,EAAmB,aAAM6G,EAAA,SAAe7G,EAAmB,cAC7EA,EAAmB,WAAIxP,KAAKkc,oBAAoB1M,EAAmB,aAIhE6G,EAAA,SAAe7G,EAAOiM,YAAcpF,EAAA,SAAe7G,EAAOiM,SAASnQ,QACtEkE,EAAOiM,SAASnQ,KAAO,YAIpB+K,EAAA,SAAe7G,EAAOmM,eAAiBtF,EAAA,SAAe7G,EAAOmM,YAAYrQ,QAC5EkE,EAAOmM,YAAYrQ,KAAO,eAG3BzL,EAAAS,UAAMiP,cAAaxP,KAAAC,KAACwP,IAcX+F,EAAAjV,UAAA6b,YAAV,SAAsBC,EAAWC,GAChC,OAAID,GAAKC,EACD,EAGM,YAALD,EACD,EAEM,YAALC,GACA,EAEK,UAALD,EACD,EAEM,UAALC,GACA,EAGDxc,EAAAS,UAAM6b,YAAWpc,KAAAC,KAACoc,EAAGC,IAUpB9G,EAAAjV,UAAAgc,KAAV,SAAeC,GACd,MAAgB,cAATA,GAAyB1c,EAAAS,UAAMgc,KAAIvc,KAAAC,KAACuc,IAS5C3b,OAAAC,eAAW0U,EAAAjV,UAAA,sBAAX,WACC,OAAON,KAAK4O,eAAgBjN,EAAG3B,KAAKwc,cAAgB,EAAG3a,EAAG7B,KAAKyc,eAAiB,qCAO1ElH,EAAAjV,UAAAwW,OAAP,SAAcgE,GACb,IAAI4B,EAAe1c,KAAK0c,aACnBA,IACJA,EAAe1c,KAAK2c,gBAEjBD,GACH1c,KAAK6O,eAAe6N,EAAc1c,KAAK4W,eAAe,EAAMkE,IAG/DvF,EA/qCA,CAA8BC,EAAA,GAurC9BQ,EAAA,EAASrV,kBAA4B,SAAI4U,oCCn+CzCjW,EAAAC,EAAAC,EAAA,sBAAAod,IAAA,IAAAld,EAAAJ,EAAA,GAAAK,EAAAL,EAAA,GAAAM,EAAAN,EAAA,GAiFAsd,EAAA,SAAA/c,GAkCC,SAAA+c,IAAA,IAAA9c,EACCD,EAAAE,KAAAC,OAAOA,YACPF,EAAK+c,gBAAiB,EACtB/c,EAAKG,UAAY,gBACjBH,EAAKI,YAAa,EAClBJ,EAAKK,OAAS,OACdL,EAAKO,eAsEP,OA9GmCX,EAAA,EAAAkd,EAAA/c,GAgD3B+c,EAAAtc,UAAAyF,iBAAP,WACC,GAAI/F,KAAK0G,QAAS,CACjB,IAAIlF,EAA2BxB,KAAK0G,QAAQjD,gBAAgBzD,KAAK0D,UASjE,GARA1D,KAAK2B,EAAIH,EAAMG,EACf3B,KAAK6B,EAAIL,EAAMK,EAEX7B,KAAK6c,iBACR7c,KAAKkH,SAAW1F,EAAMa,OAGRrC,KAAK0G,QAAQc,SACd,CACb,IAAIhH,EAASR,KAAK0G,QAAQc,SAAS0C,UACnClK,KAAK0O,MAAQ,EAAIlO,EAAOkO,OAI1B7O,EAAAS,UAAMyF,iBAAgBhG,KAAAC,OAavBY,OAAAC,eAAW+b,EAAAtc,UAAA,gBAOX,WACC,OAAON,KAAK2D,iBAAiB,iBAR9B,SAAoB7C,GACnBd,KAAK6D,iBAAiB,WAAY/C,GAAO,GAAO,oCAoBjDF,OAAAC,eAAW+b,EAAAtc,UAAA,sBAOX,WACC,OAAON,KAAK2D,iBAAiB,uBAR9B,SAA0B7C,GACzBd,KAAK6D,iBAAiB,iBAAkB/C,GAAO,GAAO,oCAUxD8b,EA9GA,CAAmCjd,EAAA,GAsHnCC,EAAA,EAASe,kBAAiC,cAAIic,oCCvM9Ctd,EAAAC,EAAAC,EAAA,sBAAAsd,IAAAxd,EAAAC,EAAAC,EAAA,sBAAAud,IAAA,IAAArd,EAAAJ,EAAA,GAAAiK,EAAAjK,EAAA,KAAA0d,EAAA1d,EAAA,KAAAmK,EAAAnK,EAAA,IAAAoK,EAAApK,EAAA,GAAAqK,EAAArK,EAAA,KAAAsK,EAAAtK,EAAA,IAAAuK,EAAAvK,EAAA,GAAAwK,EAAAxK,EAAA,GAAAyK,EAAAzK,EAAA,GAmCAwd,EAAA,SAAAjd,GA8CC,SAAAid,IAAA,IAAAhd,EACCD,EAAAE,KAAAC,OAAOA,YACPF,EAAKG,UAAY,2BACjBH,EAAKO,eAqLP,OAtO8CX,EAAA,EAAAod,EAAAjd,GA0D7Ce,OAAAC,eAAWic,EAAAxc,UAAA,kBAAX,eAAAR,EAAAE,KACC,IAAKA,KAAKid,YAAa,CACtB,IAAIC,EAAald,KAAKkK,UAAUiT,YAAY/S,SAC5CpK,KAAKid,YAAcC,EACnBld,KAAKqK,UAAU6S,GAEfld,KAAKsG,WAAWvB,KAAKmY,GACrBld,KAAKsG,WAAWvB,KAAK,IAAIgF,EAAA,EAAS,WACjCjK,EAAKoK,UAAUiT,YAAY7S,YAAY4S,MAGzC,OAAOld,KAAKid,6CAoBbrc,OAAAC,eAAWic,EAAAxc,UAAA,eAQX,WACC,OAAON,KAAKod,cATb,SAAmBtU,GAClB9I,KAAKod,SAAWtU,EAChB9I,KAAKiJ,gBAAkBU,EAAA,GAA6Bb,qCAyCrDlI,OAAAC,eAAWic,EAAAxc,UAAA,oBAQX,WACC,OAAON,KAAKqd,mBATb,SAAwBpV,GACvBjI,KAAKqd,cAAgBpV,EACrBjI,KAAKiJ,gBAAkBU,EAAA,EAA4B1B,oCA2BpDrH,OAAAC,eAAWic,EAAAxc,UAAA,kBAQX,WACC,OAAON,KAAKsd,iBATb,SAAsBC,GACrBvd,KAAKsd,YAAcC,EACnBvd,KAAKiJ,iBAAmBsU,oCAuCzB3c,OAAAC,eAAWic,EAAAxc,UAAA,uBASX,WACC,OAAON,KAAKwd,sBAVb,SAA2BvU,GAC1BjJ,KAAKwd,iBAAmBvU,EACxBjJ,KAAKyd,mBAAmBxU,GACxBjJ,KAAK0d,WAAWzU,gBAAkBjJ,KAAKwd,kDAiBjCV,EAAAxc,UAAAmd,mBAAP,SAA0BxU,GACzB,IAAK,IAAIlF,EAAI,EAAGC,EAAMiF,EAAgBhF,OAAQF,EAAIC,EAAKD,IAAK,CAC3D,IACIoE,EAD4Bc,EAAgBlF,GACV,GACtC/D,KAAK4K,eAAezC,KAIvB2U,EAtOA,CAA8CvT,EAAA,GAmT9CwT,EAAA,SAAAld,GAsDC,SAAAkd,IAAA,IAAAjd,EAGCD,EAAAE,KAAAC,OAAOA,YAEPF,EAAK6d,oBAAsB,IAE3B7d,EAAKG,UAAY,mBAGjBH,EAAK+K,WAAW5C,aAAe,eAC/BnI,EAAK+K,WAAW/B,QAAU,UAE1BhJ,EAAK+K,WAAW0S,WAAa,aAC7Bzd,EAAK+K,WAAW5B,gBAAkB,kBAGlCnJ,EAAKO,eAkLP,OAzPsCX,EAAA,EAAAqd,EAAAld,GAiF3Bkd,EAAAzc,UAAAwK,eAAV,WACC,OAAO,IAAIgS,GAMFC,EAAAzc,UAAAsd,cAAV,WACC5d,KAAKmd,YAAYlS,QACjBpL,EAAAS,UAAMsd,cAAa7d,KAAAC,OASb+c,EAAAzc,UAAAyK,aAAP,eAAAjL,EAAAE,KAWC,GAVIA,KAAKgL,KAAK/G,OAAS,GAA4B,GAAvBjE,KAAK6d,gBAChC7d,KAAKmd,YAAYlS,QAGlBjL,KAAK4H,KAAO,KACZ5H,KAAK2H,KAAO,KACZ3H,KAAKyH,MAAQ,KACbzH,KAAK0H,MAAQ,KAGT1H,KAAKkL,YAAclL,KAAKmL,QAAS,CACpC,IAAIC,EAAgBpL,KAAK8b,aAAsB,aAAyBrK,EAArBzR,KAAK2E,MAAMwG,QAM9D,GAJGnL,KAAKmL,UACPC,EAAUpL,KAAKmL,SAGZC,EAAS,CAEZ,IAAIC,OAAQ,EAeZ,GAboB,qBAAhBD,EAAQE,KACXD,EAAWD,EAAQC,SAEK,WAAhBD,EAAQE,KAChBD,GAAYD,IAE0G,IAA7G,QAAS,aAAc,UAAW,aAAc,kBAAmB,gBAAgBG,QAAQH,EAAQE,MAC5GD,IAAcG,SAAUJ,IAGxBK,QAAQC,IAAI,4BAGTL,EACH,mBAAStH,EAAOC,GAEf,IAAI2H,EAAeN,EAAStH,GACxByH,EAAgBG,EAAQH,SAC5B,GAAIA,EAAU,CACb,IAAIF,EAAyCE,EAASF,KAClDM,EAAaD,EAAQE,GAEzB,GAAY,WAARP,GAA6B,gBAARA,EAAwB,CAEhD,IAAKQ,EAAKC,aAAaD,EAAKE,QAASF,EAAKG,QAASL,oBAInD,IAAIM,EAAqBV,EAASU,YAE9BA,GAES,WAARZ,IACHY,GAAeA,IAKjB,IAAIC,EAAoCvC,EAAA,EAAYkC,EAAKd,KAAM,SAAClK,EAAOiD,GACtE,OAAOjD,EAAM+K,IAAMD,IAKfO,EAOCA,EAAWlE,eACfkE,EAAWlE,aAAeiE,IAP3BC,GAAelE,aAAciE,EAAaL,GAAID,GAC9CE,EAAKd,KAAKjG,KAAKoH,IAWhBtC,EAAA,mBAA0B8B,EAAQU,WAAYF,aA3CxCpI,EAAI,EAAGC,EAAMqH,EAASpH,OAAQF,EAAIC,EAAKD,MAAvCA,IAmDZlE,EAAAS,UAAMyK,aAAYhL,KAAAC,MAIlB8J,EAAA,KAAW9J,KAAKsM,UAAUrG,WAAY,SAACuB,GACtC1H,EAAKqd,YAAY5Q,UAAU/E,EAASkW,eAS/BX,EAAAzc,UAAAC,SAAP,WACCV,EAAAS,UAAMC,SAAQR,KAAAC,MACd8J,EAAA,KAAW9J,KAAKmd,YAAYlX,WAAY,SAACyX,GACxCA,EAAWnd,cASbK,OAAAC,eAAWkc,EAAAzc,UAAA,mBAAX,WAEC,IAAKN,KAAK8d,aAAc,CACvB,IAAIC,EAA8B,IAAIf,EAAA,EAElCG,EAAwC,IAAI1T,EAAA,EAAyBsU,GACzE/d,KAAKsG,WAAWvB,KAAK,IAAI0E,EAAA,EAAa0T,IACtCnd,KAAKsG,WAAWvB,KAAKoY,EAAY5W,UACjC4W,EAAY5W,SAAS6R,WAAY,EACjC+E,EAAY7Y,OAAOC,GAAG,WAAYvE,KAAK2M,kBAAmB3M,MAAM,GAChEA,KAAK8d,aAAeX,EAGrB,OAAOnd,KAAK8d,8CAQNf,EAAAzc,UAAA0d,eAAP,SAAsBnS,GACrB,OAAO/B,EAAA,KAAW9J,KAAKmd,YAAYlX,WAAY,SAACyX,GAE/C,OADuBA,EAAWlW,SAASyW,YACxBpS,IAAMA,KASpBkR,EAAAzc,UAAA+G,SAAP,SAAgBC,GACftH,KAAKmd,YAAY5W,SAASc,SAASC,EAAO6V,YAAY5W,UACtD1G,EAAAS,UAAM+G,SAAQtH,KAAAC,KAACsH,IAEjByV,EAzPA,CAAsCxT,EAAA,GAiQtCG,EAAA,EAAS/I,kBAAoC,iBAAIoc,EACjDrT,EAAA,EAAS/I,kBAA4C,yBAAImc,oCCxlBzDxd,EAAAC,EAAAC,EAAA,sBAAA0e,IAAA5e,EAAAC,EAAAC,EAAA,sBAAA2e,IAAA,IAAAze,EAAAJ,EAAA,GAAA8e,EAAA9e,EAAA,KAAA+e,EAAA/e,EAAA,KAAAsJ,EAAAtJ,EAAA,GA8BA4e,EAAA,SAAAre,GAkBC,SAAAqe,IAAA,IAAApe,EACCD,EAAAE,KAAAC,OAAOA,YACPF,EAAKG,UAAY,0BACjBH,EAAKO,eAGP,OAxB6CX,EAAA,EAAAwe,EAAAre,GAwB7Cqe,EAxBA,CAA6CE,EAAA,GAuE7CD,EAAA,SAAAte,GA+CC,SAAAse,IAAA,IAAAre,EACCD,EAAAE,KAAAC,OAAOA,YACPF,EAAKG,UAAY,kBACjBH,EAAKO,eAsBP,OAxEqCX,EAAA,EAAAye,EAAAte,GA2D1Bse,EAAA7d,UAAAwK,eAAV,WACC,OAAO,IAAIoT,GAQFC,EAAA7d,UAAAoM,WAAV,WACC,OAAO,IAAI2R,EAAA,GAGbF,EAxEA,CAAqCC,EAAA,GAgFrCxV,EAAA,EAASjI,kBAAmC,gBAAIwd,EAChDvV,EAAA,EAASjI,kBAA2C,wBAAIud,oCCtLxD5e,EAAAC,EAAAC,EAAA,sBAAA8e,IAAAhf,EAAAC,EAAAC,EAAA,sBAAA+e,IAAA,IAAA7e,EAAAJ,EAAA,GAAAiK,EAAAjK,EAAA,KAAAkf,EAAAlf,EAAA,KAAAmK,EAAAnK,EAAA,IAAAoK,EAAApK,EAAA,GAAAmf,EAAAnf,EAAA,IAAAof,EAAApf,EAAA,KAAAuK,EAAAvK,EAAA,GAAAwK,EAAAxK,EAAA,GAAAyK,EAAAzK,EAAA,GAmCAgf,EAAA,SAAAze,GAiCC,SAAAye,IAAA,IAAAxe,EACCD,EAAAE,KAAAC,OAAOA,YACPF,EAAKG,UAAY,yBACjBH,EAAKO,eA0DP,OA9F4CX,EAAA,EAAA4e,EAAAze,GA4C3Ce,OAAAC,eAAWyd,EAAAhe,UAAA,gBAAX,eAAAR,EAAAE,KACC,IAAKA,KAAK2e,UAAW,CACpB,IAAIC,EAAW5e,KAAKkK,UAAU2U,UAAUzU,SACxCpK,KAAKqK,UAAUuU,GACf5e,KAAK2e,UAAYC,EACjB5e,KAAKsG,WAAWvB,KAAK6Z,GACrB5e,KAAKsG,WAAWvB,KAAK,IAAIgF,EAAA,EAAS,WACjCjK,EAAKoK,UAAU2U,UAAUvU,YAAYsU,MAGvC,OAAO5e,KAAK2e,2CASb/d,OAAAC,eAAWyd,EAAAhe,UAAA,aAQX,WACC,OAAON,KAAK8e,YATb,SAAiBtd,GAChBxB,KAAK8e,OAAStd,EACdxB,KAAK0B,SAAWgd,EAAA,EAAqBld,oCAetCZ,OAAAC,eAAWyd,EAAAhe,UAAA,gBAUX,WACC,OAAON,KAAK+e,eAXb,SAAoBrd,GACnB1B,KAAK+e,UAAYrd,EACjB1B,KAAK4K,gBAAgB5K,KAAK+e,YAC1B/e,KAAKgf,SAASld,SAAW9B,KAAK+e,UAAUjd,SACxC9B,KAAKgf,SAASpd,UAAY5B,KAAK+e,UAAUnd,2CAU3C0c,EA9FA,CAA4C/U,EAAA,GA2K5CgV,EAAA,SAAA1e,GAsDC,SAAA0e,IAAA,IAAAze,EAGCD,EAAAE,KAAAC,OAAOA,YACPF,EAAKG,UAAY,iBAGjBH,EAAK+K,WAAWoU,WAAa,aAC7Bnf,EAAK+K,WAAWrJ,MAAQ,QAExB1B,EAAK+K,WAAWnJ,SAAW,WAC3B5B,EAAK+K,WAAWqU,cAAgB,gBAGhCpf,EAAKO,eAyJP,OA7NoCX,EAAA,EAAA6e,EAAA1e,GA8EzB0e,EAAAje,UAAAwK,eAAV,WACC,OAAO,IAAIwT,GASLC,EAAAje,UAAAyK,aAAP,eAAAjL,EAAAE,KAMC,GALIA,KAAKgL,KAAK/G,OAAS,GACtBjE,KAAK6e,UAAU5T,QAIZjL,KAAKkL,aACJlL,KAAKkL,YAAclL,KAAKmL,SAAS,CACpC,IAAIC,EAAepL,KAAK2E,MAAMwG,QAE1BE,OAAQ,EAeZ,GAboB,qBAAhBD,EAAQE,KACXD,EAAWD,EAAQC,SAEK,WAAhBD,EAAQE,KAChBD,GAAYD,IAE0G,IAA7G,QAAS,aAAc,UAAW,aAAc,kBAAmB,gBAAgBG,QAAQH,EAAQE,MAC5GD,IAAcG,SAAUJ,IAGxBK,QAAQC,IAAI,4BAGTL,EACH,mBAAStH,EAAOC,GAEf,IAAI2H,EAAeN,EAAStH,GACxByH,EAAgBG,EAAQH,SAC5B,GAAIA,EAAU,CACb,IAAIF,EAAyCE,EAASF,KAClDM,EAAaD,EAAQE,GACzB,GAAY,SAARP,GAA2B,cAARA,EAAsB,CAE5C,IAAKQ,EAAKC,aAAaD,EAAKE,QAASF,EAAKG,QAASL,oBAInD,IAAIM,EAAqBV,EAASU,YAE9BA,GAES,cAARZ,IACHY,GAAeA,IAIjB,IAAIC,EAAkCsS,EAAA,EAAY3S,EAAKd,KAAM,SAAClK,EAAOiD,GACpE,OAAOjD,EAAM+K,IAAMD,IAGfO,EAKCA,EAAW8S,aACf9S,EAAW8S,WAAa/S,IALzBC,GAAe8S,WAAY/S,EAAaL,GAAID,GAC5CE,EAAKd,KAAKjG,KAAKoH,IAShBtC,EAAA,mBAA0B8B,EAAQU,WAAYF,aArCxCpI,EAAI,EAAGC,EAAMqH,EAASpH,OAAQF,EAAIC,EAAKD,MAAvCA,GA6CZlE,EAAAS,UAAMyK,aAAYhL,KAAAC,MAIlB8J,EAAA,KAAW9J,KAAKsM,UAAUrG,WAAY,SAACuB,GACtC1H,EAAK+e,UAAUtS,UAAU/E,EAASwX,aASpCpe,OAAAC,eAAW0d,EAAAje,UAAA,iBAAX,WAEC,IAAKN,KAAKmf,WAAY,CACrB,IAAI5Y,EAAqB,IAAIiY,EAAA,EACzBK,EAAY,IAAIpV,EAAA,EAAuBlD,GAC3CvG,KAAKsG,WAAWvB,KAAK,IAAI0E,EAAA,EAAaoV,IACtC7e,KAAKsG,WAAWvB,KAAK8Z,EAAUtY,UAC/BsY,EAAUtY,SAAS6R,WAAY,EAC/ByG,EAAUva,OAAOC,GAAG,WAAYvE,KAAK2M,kBAAmB3M,MAAM,GAC9DA,KAAKmf,WAAaN,EAGnB,OAAO7e,KAAKmf,4CASNZ,EAAAje,UAAA8e,oBAAP,SAA2B5X,GAC1B3H,EAAAS,UAAM8e,oBAAmBrf,KAAAC,KAACwH,GAC1BA,EAASwX,SAASta,cAQZ6Z,EAAAje,UAAAC,SAAP,WACCV,EAAAS,UAAMC,SAAQR,KAAAC,MACd8J,EAAA,KAAW9J,KAAK6e,UAAU5Y,WAAY,SAAC+Y,GACtCA,EAASjZ,sBASJwY,EAAAje,UAAA+G,SAAP,SAAgBC,GACftH,KAAK6e,UAAUtY,SAASc,SAASC,EAAOuX,UAAUtY,UAClD1G,EAAAS,UAAM+G,SAAQtH,KAAAC,KAACsH,IAGjBiX,EA7NA,CAAoChV,EAAA,GAqOpCG,EAAA,EAAS/I,kBAAkC,eAAI4d,EAC/C7U,EAAA,EAAS/I,kBAA0C,uBAAI2d,oCCpbvDhf,EAAAC,EAAAC,EAAA,sBAAA6f,IAAA/f,EAAAC,EAAAC,EAAA,sBAAA8f,IAAA,IAAA5f,EAAAJ,EAAA,GAAA8e,EAAA9e,EAAA,KAAAigB,EAAAjgB,EAAA,KAAAsJ,EAAAtJ,EAAA,GA+BA+f,EAAA,SAAAxf,GAmBC,SAAAwf,IAAA,IAAAvf,EACCD,EAAAE,KAAAC,OAAOA,YACPF,EAAKG,UAAY,uBACjBH,EAAKO,eAEP,OAxB0CX,EAAA,EAAA2f,EAAAxf,GAwB1Cwf,EAxBA,CAA0CjB,EAAA,GAuE1CkB,EAAA,SAAAzf,GA+CC,SAAAyf,IAAA,IAAAxf,EACCD,EAAAE,KAAAC,OAAOA,YACPF,EAAKG,UAAY,eACjBH,EAAKO,eAsBP,OAxEkCX,EAAA,EAAA4f,EAAAzf,GA2DvByf,EAAAhf,UAAAwK,eAAV,WACC,OAAO,IAAIuU,GAQFC,EAAAhf,UAAAoM,WAAV,WACC,OAAO,IAAI6S,EAAA,GAGbD,EAxEA,CAAkClB,EAAA,GAgFlCxV,EAAA,EAASjI,kBAAgC,aAAI2e,EAC7C1W,EAAA,EAASjI,kBAAwC,qBAAI0e,oCCvLrDze,OAAAC,eAAArB,EAAA,cAAAsB,OAAA,QAAA0e,EAAAlgB,EAAA,KAAAA,EAAAC,EAAAC,EAAA,6BAAAggB,EAAA,QAAAC,EAAAngB,EAAA,KAAAA,EAAAC,EAAAC,EAAA,2BAAAigB,EAAA,QAAAC,EAAApgB,EAAA,KAAAA,EAAAC,EAAAC,EAAA,4BAAAkgB,EAAA,QAAAC,EAAArgB,EAAA,KAAAA,EAAAC,EAAAC,EAAA,iCAAAmgB,EAAA,QAAAC,EAAAtgB,EAAA,IAAAA,EAAAC,EAAAC,EAAA,+BAAAogB,EAAA,sCCAAtgB,EAAAC,EAAAC,EAAA,sBAAAqgB,IAAA,IAAAngB,EAAAJ,EAAA,GAAAwgB,EAAAxgB,EAAA,IAAAM,EAAAN,EAAA,GAkDAugB,EAAA,SAAAhgB,GAAA,SAAAggB,mDA6BA,OA7B8BngB,EAAA,EAAAmgB,EAAAhgB,GAQtBggB,EAAAvf,UAAAyf,UAAP,SAAiBpe,EAAWE,GAC3B,OACCD,UAAWD,EACXG,SAAU,EAAIE,KAAKge,KAAKhe,KAAKie,IAAIpe,IAAMG,KAAKke,GAAK,IAW5CL,EAAAvf,UAAA6f,QAAP,SAAeC,EAAgBC,GAC9B,OACC1e,EAAGye,EACHve,EAAGG,KAAK0J,IAAI1J,KAAKse,KAAKte,KAAKke,GAAK,EAAIG,GAAO,MAI9CR,EA7BA,CAA8BC,EAAA,GAqC9BlgB,EAAA,EAASe,kBAA4B,SAAIkf,oCCvFzCvgB,EAAAC,EAAAC,EAAA,sBAAA+gB,IAAA,IAAA7gB,EAAAJ,EAAA,GAAAwgB,EAAAxgB,EAAA,IAAAM,EAAAN,EAAA,GAkDAihB,EAAA,SAAA1gB,GAAA,SAAA0gB,mDA8BA,OA9B4B7gB,EAAA,EAAA6gB,EAAA1gB,GASpB0gB,EAAAjgB,UAAAyf,UAAP,SAAiBpe,EAAWE,GAC3B,OACCD,UAAWD,EACXG,SAAU,IAAME,KAAKge,KAAKhe,KAAKie,IAAI,GAAMpe,IAAM,KAAQG,KAAKke,KAWvDK,EAAAjgB,UAAA6f,QAAP,SAAeC,EAAgBC,GAC9B,OACC1e,EAAGye,EACHve,EAAG,KAAOG,KAAK0J,IAAI1J,KAAKse,IAAIte,KAAKke,GAAK,EAAI,GAAMG,MAInDE,EA9BA,CAA4BT,EAAA,GAsC5BlgB,EAAA,EAASe,kBAA0B,OAAI4f,oCCxFvCjhB,EAAAC,EAAAC,EAAA,sBAAAghB,IAAA,IAAA9gB,EAAAJ,EAAA,GAAAwgB,EAAAxgB,EAAA,IAAAM,EAAAN,EAAA,GAkDAkhB,EAAA,SAAA3gB,GAAA,SAAA2gB,mDAqCA,OArC6B9gB,EAAA,EAAA8gB,EAAA3gB,GASrB2gB,EAAAlgB,UAAAyf,UAAP,SAAiBpe,EAAWE,GAC3B,IAAI4e,EAAI,EAAIze,KAAKke,GAAK,EACrBQ,EAAI1e,KAAK2e,KAAKF,EAAI,GACnB,OACC7e,UAAe,EAAJD,EAAQ+e,GAAK,EAAI1e,KAAK4e,IAAI/e,GAAK6e,IAC1C5e,SAAUE,KAAKC,MAAMJ,EAAIG,KAAKE,IAAIL,IAAM4e,KAWnCD,EAAAlgB,UAAA6f,QAAP,SAAeC,EAAgBC,GAE9B,IADA,IAAIK,GAAK,EAAI1e,KAAKke,GAAK,GAAKle,KAAKE,IAAIme,GAC5Btc,EAAI,EAAG8c,EAAQ7G,IAAUjW,EAAI,IAAM/B,KAAKI,IAAIye,GAAS,KAAS9c,IACtEsc,GAAOQ,GAASR,EAAMre,KAAKE,IAAIme,GAAOK,IAAM,EAAI1e,KAAK4e,IAAIP,IAG1D,OADAK,EAAI1e,KAAK2e,KAAK,EAAI3e,KAAKke,KAEtBve,EAAGye,GAAU,EAAIpe,KAAK4e,IAAIP,IAAQK,EAClC7e,EAAG,EAAIwe,EAAMK,IAIhBF,EArCA,CAA6BV,EAAA,GA6C7BlgB,EAAA,EAASe,kBAA2B,QAAI6f,oCC/FxClhB,EAAAC,EAAAC,EAAA,sBAAAshB,IAAA,IAAAphB,EAAAJ,EAAA,GAAAwgB,EAAAxgB,EAAA,IAAAM,EAAAN,EAAA,GAAAyhB,EAAAzhB,EAAA,GAoDAwhB,EAAA,SAAAjhB,GAAA,SAAAihB,mDAyJA,OAzJkCphB,EAAA,EAAAohB,EAAAjhB,GAS1BihB,EAAAxgB,UAAA6f,QAAP,SAAeC,EAAgBC,GAC9B,OAAS1e,EAAGK,KAAK4e,IAAIP,GAAOre,KAAKE,IAAIke,GAASve,EAAGG,KAAKE,IAAIme,KAIpDS,EAAAxgB,UAAA0gB,kBAAP,WACC,IAAIpf,EAAY,GAAK5B,KAAK0W,eACtB5U,GAAY9B,KAAKihB,cAGrB,QAAUrf,UAAWA,EAAY,IAAKE,SAAUA,EAAW,KAAQF,UAAWA,EAD/D,KACqFE,SAAUA,EAAW,KAAQF,UAAWA,EAD7H,KACmJE,SAAUA,EAAW,KAAQF,UAAWA,EAAY,IAAKE,SAAUA,EAAW,MAI1Ogf,EAAAxgB,UAAA4gB,SAAP,WACC,IAAItf,EAAY,GAAK5B,KAAK0W,eACtB5U,GAAY9B,KAAKihB,cAErB,OAASxZ,MAAO3F,EAAW,GAAI4F,MAAO5F,EAAW,GAAI8F,KAAMhG,EAAY,IAAK+F,KAAM/F,IAG5Ekf,EAAAxgB,UAAA6gB,kBAAP,WACC,IAKIN,EALAjf,EAAY,GAAK5B,KAAK0W,eACtB5U,GAAY9B,KAAKihB,cAarB,QAAUrf,UAXK,KAWiBA,EAAY,KAN3Cif,EADGjf,EAAY,GACN,IAGD,KAGgDE,SAAUA,EAAW,KAAQF,UAAWA,EAXlF,KAWyGif,EAAO/e,SAAUA,EAAW,KAAQF,UAAWA,EAXxJ,KAW+Kif,EAAO/e,SAAUA,EAAW,KAAQF,UAXnN,KAWyOA,EAAY,IAAMif,EAAO/e,SAAUA,EAAW,MAKhSgf,EAAAxgB,UAAA8gB,SAAP,WACC,IAGIP,EAHAjf,EAAY,GAAK5B,KAAK0W,eACtB5U,GAAY9B,KAAKihB,cAUrB,OAASxZ,MAAO3F,EAAW,GAAI4F,MAAO5F,EAAW,GAAI8F,KAAMhG,EAAY,KALtEif,EADGjf,EAAY,GACN,IAGD,KAE2E+F,KAAM/F,EAAYif,IAK7FC,EAAAxgB,UAAA+gB,YAAV,SAAsBC,GACrB,GAAKA,EAAL,CAYA,IARA,QAAIC,KAEAC,EAAiBxhB,KAAKghB,oBACtBS,EAAiBzhB,KAAKmhB,oBAEtBO,EAAQ1hB,KAAKkhB,WACbS,EAAQ3hB,KAAKohB,WAERrd,EAAI,EAAGC,EAAMsd,EAAQrd,OAAQF,EAAIC,EAAKD,IAAK,CAEnD,IAAIoE,EAAuBmZ,EAAQvd,GAAG,GAClCqE,EAAoBkZ,EAAQvd,GAAG,GAE/B6d,KAEJ,GAAIzZ,EAAS,CAEZ,IAAI0Z,EAAc7hB,KAAK8hB,YAAY3Z,GAEnC,GAAKnI,KAAK+hB,SAASF,EAAaH,IAAW1hB,KAAKgiB,UAAUH,EAAaH,GAK9D1hB,KAAK+hB,SAASF,EAAaH,IACnCE,EAAa7c,MAAMoD,EAASC,QANkD,CAC9E,IAAI6Z,EAA+BjiB,KAAKkiB,KAAK/Z,EAASqZ,GAClDW,EAA4BniB,KAAKkiB,KAAK9Z,EAAMoZ,GAChDI,EAAa7c,MAAMkd,EAAiBE,IAMrC,GAAKniB,KAAK+hB,SAASF,EAAaF,IAAW3hB,KAAKgiB,UAAUH,EAAaF,GAM9D3hB,KAAK+hB,SAASF,EAAaF,IACnCC,EAAa7c,MAAMoD,EAASC,QAPkD,CAC9E,IAAIga,EAA+BpiB,KAAKkiB,KAAK/Z,EAASsZ,GAClDY,EAA4BriB,KAAKkiB,KAAK9Z,EAAMqZ,GAEhDG,EAAa7c,MAAMqd,EAAiBC,SAOtC,IAAiB,IAAAC,EAAA5iB,EAAA,EAAAkiB,GAAYW,EAAAD,EAAAnhB,QAAAohB,EAAAnhB,KAAAmhB,EAAAD,EAAAnhB,OAAA,CAAxB,IAAIqhB,EAAID,EAAAzhB,MACZygB,EAAYxc,KAAKyd,sGAInB,IAASze,EAAI,EAAGC,EAAMud,EAAYtd,OAAQF,EAAIC,EAAKD,IAAK,CAKvD,GAHIoE,EAAuBoZ,EAAYxd,GAAG,GASzC,IAJA,IAAI0e,EAAMta,EAAQlE,OAEdye,EAAYva,EAAQsa,EAAM,GAErBE,EAAI,EAAGA,EAAIF,EAAKE,IAAK,CAC7B,IAAInhB,EAAQ2G,EAAQwa,GAEpB,GAAI5B,EAAA,MAAYvf,EAAMI,UAAW,IAAMmf,EAAA,MAAY2B,EAAU9gB,UAAW,GAAI,CAC3E,IAAI2D,EAAYvD,KAAKI,IAA4C,GAAvCsgB,EAAU5gB,SAAWN,EAAMM,WACjD8gB,KAEJ,GAAIrd,EAAY,EAAG,CAClB,IAAK,IAAIsd,EAAI,EAAGA,EAAItd,EAAWsd,IAC9BD,EAAY7d,MAAOnD,UAAW8gB,EAAU9gB,UAAWE,SAAU4gB,EAAU5gB,UAAYN,EAAMM,SAAW4gB,EAAU5gB,UAAYyD,EAAYsd,IAGvI1a,EAAQ2a,OAAMC,MAAd5a,EAAOzI,EAAA,GAAQijB,EAAG,GAAMC,IACxBD,GAAQC,EAAY3e,QAItBye,EAAYlhB,GAKf,OAAO+f,IAITT,EAzJA,CAAkChB,EAAA,GAiKlClgB,EAAA,EAASe,kBAAgC,aAAImgB,mCCrN7CxhB,EAAAC,EAAAC,EAAA,sBAAAwjB,IAAA,IAAAtjB,EAAAJ,EAAA,GAAA2jB,EAAA3jB,EAAA,GAAA4jB,EAAA5jB,EAAA,GAAA6jB,EAAA7jB,EAAA,KA4BA0jB,EAAA,oBAAAA,IAEQhjB,KAAA0W,eAAyB,EAEzB1W,KAAAihB,cAAwB,EAExBjhB,KAAAojB,UAAoB,EAEpBpjB,KAAAuZ,aAAwB5X,EAAG,EAAGE,EAAG,GAEjC7B,KAAA0O,MAAgB,EA8exB,OA5eQsU,EAAA1iB,UAAA4I,eAAP,SAAsBoY,GAErB,IAAI+B,EAAkCrjB,KAAKqhB,YAAYC,GAGvD,OAFoCthB,KAAKsjB,eAAeD,IAKlDL,EAAA1iB,UAAAuF,eAAP,SAAsBZ,GACrB,OAAOjF,KAAKujB,eAAevjB,KAAKwjB,YAAYve,KAGtC+d,EAAA1iB,UAAA0gB,kBAAP,WACC,IAAIpf,EAAYuhB,EAAA,eAAoB,IAAMnjB,KAAK0W,gBAC3C5U,EAAWqhB,EAAA,eAAoBnjB,KAAKihB,eAGxC,QAAUrf,WAAY,IAAKE,SAAUA,EAAW,KAAQF,UAAWA,EADpD,KAC0EE,SAAUA,EAAW,KAAQF,UAAWA,EADlH,KACwIE,SAAUA,EAAW,KAAQF,WAAY,IAAKE,SAAUA,EAAW,MAGpNkhB,EAAA1iB,UAAA6gB,kBAAP,WACC,IAAIvf,EAAYuhB,EAAA,eAAoB,IAAMnjB,KAAK0W,gBAI/C,QAAU9U,UAAWA,EADN,KAC4BE,UAAW,KAAQF,UAAW,IAAKE,UAAW,KAAQF,UAAW,IAAKE,SAAU,KAAQF,UAAWA,EAD/H,KACqJE,SAAU,MAGxKkhB,EAAA1iB,UAAA4gB,SAAP,WACC,IAAItf,EAAYuhB,EAAA,eAAoB,IAAMnjB,KAAK0W,gBAC3C5U,EAAWqhB,EAAA,eAAoBnjB,KAAKihB,eAExC,OAASxZ,MAAO3F,EAAW,GAAI4F,MAAO5F,EAAW,GAAI8F,KAAMhG,EAAY,IAAK+F,KAAM/F,IAG5EohB,EAAA1iB,UAAA8gB,SAAP,WACC,IAAIxf,EAAYuhB,EAAA,eAAoB,IAAMnjB,KAAK0W,gBAC3C5U,EAAWqhB,EAAA,eAAoBnjB,KAAKihB,eAExC,OAASxZ,MAAO3F,EAAW,GAAI4F,MAAO5F,EAAW,GAAI8F,KAAMhG,EAAW+F,KAAO/F,EAAY,MAKhFohB,EAAA1iB,UAAAkjB,YAAV,SAAsBve,GACrB,GAAKA,EAAL,CASA,IALA,IAAIwe,KAEAjC,EAAiBxhB,KAAKghB,oBACtBS,EAAiBzhB,KAAKmhB,oBAEjBpd,EAAI,EAAGC,EAAMiB,EAAQhB,OAAQF,EAAIC,EAAKD,IAAK,CACnD,IAAI1C,EAAuB4D,EAAQlB,GAEnC,GAAI1C,EAAS,CACZ,IAAIqiB,EAAiC1jB,KAAK2jB,SAAStiB,EAASmgB,GAG5D,GAFAiC,EAAcA,EAAYG,OAAOF,GAEN,GAAvB1jB,KAAK0W,eAAqB,CAC7B,IAAImN,EAAkC7jB,KAAK2jB,SAAStiB,EAASogB,GAC7DgC,EAAcA,EAAYG,OAAOC,KAKpC,OAAOJ,IAIET,EAAA1iB,UAAA+gB,YAAV,SAAsBC,GAErB,GAAKA,EAAL,CAYA,IARA,QAAIC,KAEAC,EAAiBxhB,KAAKghB,oBACtBS,EAAiBzhB,KAAKmhB,oBAEtBO,EAAQ1hB,KAAKkhB,WACbS,EAAQ3hB,KAAKohB,WAERrd,EAAI,EAAGC,EAAMsd,EAAQrd,OAAQF,EAAIC,EAAKD,IAAK,CAEnD,IAAIoE,EAAuBmZ,EAAQvd,GAAG,GAClCqE,EAAoBkZ,EAAQvd,GAAG,GAE/B6d,KAEJ,GAAIzZ,EAAS,CAEZ,IAAI0Z,EAAc7hB,KAAK8hB,YAAY3Z,GAEnC,GAAKnI,KAAK+hB,SAASF,EAAaH,IAAW1hB,KAAKgiB,UAAUH,EAAaH,GAMtEE,EAAa7c,MAAMoD,EAASC,QANkD,CAC9E,IAAI6Z,EAA+BjiB,KAAKkiB,KAAK/Z,EAASqZ,GAClDW,EAA4BniB,KAAKkiB,KAAK9Z,EAAMoZ,GAChDI,EAAa7c,MAAMkd,EAAiBE,IAMrC,IAAKniB,KAAK+hB,SAASF,EAAaF,KAAW3hB,KAAKgiB,UAAUH,EAAaF,GAAQ,CAC9E,IAAIS,EAA+BpiB,KAAKkiB,KAAK/Z,EAASsZ,GAClDY,EAA4BriB,KAAKkiB,KAAK9Z,EAAMqZ,GAChDG,EAAa7c,MAAMqd,EAAiBC,SAItC,IAAiB,IAAAC,EAAA5iB,EAAA,EAAAkiB,GAAYW,EAAAD,EAAAnhB,QAAAohB,EAAAnhB,KAAAmhB,EAAAD,EAAAnhB,OAAA,CAAxB,IAAIqhB,EAAID,EAAAzhB,MACZygB,EAAYxc,KAAKyd,sGAInB,OAAOjB,IAGEyB,EAAA1iB,UAAAgjB,eAAV,SAAyBhC,GAExB,GAAKA,EAAL,CAMA,IAFA,IAAIwC,KAEK/f,EAAI,EAAGC,EAAMsd,EAAQrd,OAAQF,EAAIC,EAAKD,IAAK,CAEnD,IAAIoE,EAAuBmZ,EAAQvd,GAAG,GAClCqE,EAAoBkZ,EAAQvd,GAAG,GAE/BggB,KAEJ,GAAI5b,EAAS,CAGZ,IAFA,IAAI6b,KAEKnB,EAAI,EAAGoB,EAAO9b,EAAQlE,OAAQ4e,EAAIoB,EAAMpB,IAAK,CACrD,IAAIrhB,EAAgBxB,KAAKyI,QAAQN,EAAQ0a,IAEzCmB,EAAiBjf,KAAKvD,GAEvBuiB,EAAoBhf,KAAKif,GAG1B,GAAI5b,EAAM,CAET,IADA,IAAI8b,KACYC,GAAPtB,EAAI,EAAUza,EAAKnE,QAAQ4e,EAAIsB,EAAMtB,IAAK,CAC9CrhB,EAAgBxB,KAAKyI,QAAQL,EAAKya,IAEtCqB,EAAcnf,KAAKvD,GAEpBuiB,EAAoBhf,KAAKmf,GAE1BJ,EAAgB/e,KAAKgf,GAEtB,OAAOD,IAGEd,EAAA1iB,UAAAijB,eAAV,SAAyBte,GACxB,GAAKA,EAAL,CAKA,IAFA,IAAI6e,KAEK/f,EAAI,EAAGC,EAAMiB,EAAQhB,OAAQF,EAAIC,EAAKD,IAAK,CAMnD,IAJA,IAAI1C,EAAuB4D,EAAQlB,GAE/BqgB,KAEKvB,EAAI,EAAGoB,EAAO5iB,EAAQ4C,OAAQ4e,EAAIoB,EAAMpB,IAAK,CACrD,IAAInhB,EAAsBL,EAAQwhB,GAE9BrhB,EAAgBxB,KAAKyI,QAAQ/G,GACjC0iB,EAAuBrf,KAAKvD,GAG7BsiB,EAAgB/e,KAAKqf,GAEtB,OAAON,IASDd,EAAA1iB,UAAAmI,QAAP,SAAe/G,GACdA,EAAWyhB,EAAA,eAAoBzhB,GAC/BA,EAAW1B,KAAKqkB,OAAO3iB,EAAU1B,KAAK0W,eAAgB1W,KAAKihB,cAAejhB,KAAKojB,WAC/E,IAAIkB,EAAyBtkB,KAAKmgB,QAAQze,EAASE,UAAYshB,EAAA,QAAexhB,EAASI,SAAWohB,EAAA,SAClG,OACCvhB,EAAGuhB,EAAA,MAAYoB,EAAe3iB,EAAIuhB,EAAA,QAAgBljB,KAAKuZ,YAAY5X,EAAG,GAAK3B,KAAK0O,MAChF7M,EAAGqhB,EAAA,OAAaoB,EAAeziB,EAAIqhB,EAAA,QAAgBljB,KAAKuZ,YAAY1X,EAAG,GAAK7B,KAAK0O,QAS5EsU,EAAA1iB,UAAAma,OAAP,SAAcjZ,GACb,IAAI8iB,EAA4BtkB,KAAK+f,WAAWve,EAAMG,EAAI3B,KAAK0O,MAAQ1O,KAAKuZ,YAAY5X,GAAKuhB,EAAA,UAAiB1hB,EAAMK,EAAI7B,KAAK0O,MAAQ1O,KAAKuZ,YAAY1X,GAAKqhB,EAAA,SAEvJxhB,GAAaE,UAAW0iB,EAAe1iB,UAAYshB,EAAA,QAAephB,SAAUwiB,EAAexiB,SAAWohB,EAAA,SAI1G,OAFAxhB,EAAW1B,KAAKukB,SAAS7iB,EAAU1B,KAAK0W,eAAgB1W,KAAKihB,cAAejhB,KAAKojB,YAc3EJ,EAAA1iB,UAAA6f,QAAP,SAAeC,EAAgBC,GAC9B,OAAS1e,EAAGye,EAAQve,EAAGwe,IAYjB2C,EAAA1iB,UAAAyf,UAAP,SAAiBpe,EAAWE,GAC3B,OAASD,UAAWD,EAAGG,SAAUD,IAIlCmhB,EAAA1iB,UAAA+jB,OAAA,SAAO3iB,EAAqBgV,EAAwBuK,EAAuBuD,GAE1E,IAAIC,EAAc/N,EAAiBwM,EAAA,QAC/BwB,EAAWzD,EAAgBiC,EAAA,QAC/BsB,GAA0BtB,EAAA,QAE1B,IAAI9C,EAAS1e,EAASE,UAAYshB,EAAA,QAAgBuB,EAC9CpE,EAAM3e,EAASI,SAAWohB,EAAA,QAE1ByB,EAAc3iB,KAAK4e,IAAI8D,GACvBE,EAAc5iB,KAAKE,IAAIwiB,GACvBG,EAAgB7iB,KAAK4e,IAAI4D,GACzBM,EAAgB9iB,KAAKE,IAAIsiB,GAEzBO,EAAS/iB,KAAK4e,IAAIP,GAElB1e,EAAIK,KAAK4e,IAAIR,GAAU2E,EACvBljB,EAAIG,KAAKE,IAAIke,GAAU2E,EACvBC,EAAIhjB,KAAKE,IAAIme,GACbK,EAAIsE,EAAIL,EAAchjB,EAAIijB,EAE9B,OAAShjB,UAAWshB,EAAA,QAAgBlhB,KAAKijB,MAAMpjB,EAAIgjB,EAAgBnE,EAAIoE,EAAenjB,EAAIgjB,EAAcK,EAAIJ,GAAc9iB,SAAUohB,EAAA,QAAgBlhB,KAAKC,KAAKye,EAAImE,EAAgBhjB,EAAIijB,KAGvL9B,EAAA1iB,UAAAikB,SAAA,SAAS7iB,EAAqBgV,EAAwBuK,EAAuBuD,GAE5E,IAAIC,EAAc/N,EAAiBwM,EAAA,QAC/BwB,EAAWzD,EAAgBiC,EAAA,QAC/BsB,GAA0BtB,EAAA,QAE1B,IAAI9C,EAAS1e,EAASE,UAAYshB,EAAA,QAAgBuB,EAC9CpE,EAAM3e,EAASI,SAAWohB,EAAA,QAE1ByB,EAAc3iB,KAAK4e,IAAI8D,GACvBE,EAAc5iB,KAAKE,IAAIwiB,GACvBG,EAAgB7iB,KAAK4e,IAAI4D,GACzBM,EAAgB9iB,KAAKE,IAAIsiB,GAEzBO,EAAS/iB,KAAK4e,IAAIP,GAElB1e,EAAIK,KAAK4e,IAAIR,GAAU2E,EACvBljB,EAAIG,KAAKE,IAAIke,GAAU2E,EACvBC,EAAIhjB,KAAKE,IAAIme,GACbK,EAAIsE,EAAIH,EAAgBhjB,EAAIijB,EAEhC,OAASljB,UAAWshB,EAAA,QAAgBlhB,KAAKijB,MAAMpjB,EAAIgjB,EAAgBG,EAAIF,EAAenjB,EAAIgjB,EAAcjE,EAAIkE,GAAc9iB,SAAUohB,EAAA,QAAgBlhB,KAAKC,KAAKye,EAAIiE,EAAchjB,EAAIijB,KAKrL5B,EAAA1iB,UAAAqjB,SAAA,SAASuB,EAA8BC,GAEtC,GAAKD,GAA6C,GAA1BA,EAAgBjhB,OAAxC,CAIA,IAAImhB,EACAC,EAMAxC,EACA/K,EALAwN,EAAS,SAASngB,GACrB,OAAQkgB,EAAIzjB,UAAYwjB,EAAIxjB,YAAcuD,EAAErD,SAAWsjB,EAAItjB,WAAaujB,EAAIvjB,SAAWsjB,EAAItjB,WAAaqD,EAAEvD,UAAYwjB,EAAIxjB,YAOvH2jB,EAAe,WAClB,IAAIC,EAAkBJ,EAAIxjB,UAAYyjB,EAAIzjB,UAAtC4jB,EAA2DJ,EAAItjB,SAAWujB,EAAIvjB,SAC9E2jB,EAAkB5C,EAAEjhB,UAAYkW,EAAElW,UAAlC6jB,EAAuD5C,EAAE/gB,SAAWgW,EAAEhW,SACtE4jB,EAAKN,EAAIxjB,UAAYyjB,EAAIvjB,SAAWsjB,EAAItjB,SAAWujB,EAAIzjB,UACvD+jB,EAAK9C,EAAEjhB,UAAYkW,EAAEhW,SAAW+gB,EAAE/gB,SAAWgW,EAAElW,UAC/CgkB,EAAK,GAAOJ,EAAeC,EAAcD,EAAcC,GAE3D,OAAS7jB,WAAY8jB,EAAKD,EAAeE,EAAKH,GAAgBI,EAAI9jB,UAAW4jB,EAAKD,EAAcE,EAAKH,GAAeI,IAGjHvkB,EAAuB6jB,EAI3B,IAAK,IAAIzE,KAFT2E,EAAMD,EAAYA,EAAYlhB,OAAS,GAEzBkhB,EAAa,CAC1BE,EAAMF,EAAY1E,GAClB,IAAIoF,EAAYxkB,EAChBA,KACAwhB,EAAIgD,EAAU,GACd,IAAK,IAAI9hB,EAAI,EAAGC,EAAM6hB,EAAU5hB,OAAQF,EAAIC,EAAKD,IAG5CuhB,EAFJxN,EAAI+N,EAAU9hB,KAGRuhB,EAAOzC,IACXxhB,EAAQ0D,KAAKwgB,KAEdlkB,EAAQ0D,KAAK+S,IAELwN,EAAOzC,IACfxhB,EAAQ0D,KAAKwgB,KAGd1C,EAAI/K,EAELsN,EAAMC,EAGP,OAAQhkB,KAQT2hB,EAAA1iB,UAAA4hB,KAAA,SAAK4D,EAA6BX,GAEjC,GAAKW,GAA2C,GAAzBA,EAAe7hB,OAAtC,CAIA,IAAImhB,EACAC,EAMAxC,EACA/K,EALAwN,EAAS,SAASngB,GACrB,OAAQkgB,EAAIzjB,UAAYwjB,EAAIxjB,YAAcuD,EAAErD,SAAWsjB,EAAItjB,WAAaujB,EAAIvjB,SAAWsjB,EAAItjB,WAAaqD,EAAEvD,UAAYwjB,EAAIxjB,YAMvH2jB,EAAe,WAClB,IAAIC,EAAkBJ,EAAIxjB,UAAYyjB,EAAIzjB,UAAtC4jB,EAA2DJ,EAAItjB,SAAWujB,EAAIvjB,SAC9E2jB,EAAkB5C,EAAEjhB,UAAYkW,EAAElW,UAAlC6jB,EAAuD5C,EAAE/gB,SAAWgW,EAAEhW,SACtE4jB,EAAKN,EAAIxjB,UAAYyjB,EAAIvjB,SAAWsjB,EAAItjB,SAAWujB,EAAIzjB,UACvD+jB,EAAK9C,EAAEjhB,UAAYkW,EAAEhW,SAAW+gB,EAAE/gB,SAAWgW,EAAElW,UAC/CgkB,EAAK,GAAOJ,EAAeC,EAAcD,EAAcC,GAE3D,OAAS7jB,WAAY8jB,EAAKD,EAAeE,EAAKH,GAAgBI,EAAI9jB,UAAW4jB,EAAKD,EAAcE,EAAKH,GAAeI,IAGjHG,EAAaD,EAIjB,IAAK,IAAIrF,KAFT2E,EAAMD,EAAYA,EAAYlhB,OAAS,GAEzBkhB,EAAa,CAC1BE,EAAMF,EAAY1E,GAClB,IAAIoF,EAAYE,EAGhB,IAAK,IAAIhiB,KAFTgiB,KACAlD,EAAIgD,EAAUA,EAAU5hB,OAAS,GACnB4hB,EAGTP,EAFJxN,EAAI+N,EAAU9hB,KAGRuhB,EAAOzC,IACXkD,EAAWhhB,KAAKwgB,KAEjBQ,EAAWhhB,KAAK+S,IAERwN,EAAOzC,IACfkD,EAAWhhB,KAAKwgB,KAEjB1C,EAAI/K,EAELsN,EAAMC,EAEP,OAAOU,IAID/C,EAAA1iB,UAAAwhB,YAAP,SAAmB/Z,GAOlB,IALA,IAAIH,EAAeG,EAAU,GAAGnG,UAC5B+F,EAAeI,EAAU,GAAGnG,UAC5B6F,EAAgBM,EAAU,GAAGjG,SAC7B4F,EAAgBK,EAAU,GAAGjG,SAExB+gB,EAAY,EAAGA,EAAI9a,EAAU9D,OAAQ4e,IAAK,CAClD,IAAIjhB,EAAoBmG,EAAU8a,GAAGjhB,UACjCE,EAAmBiG,EAAU8a,GAAG/gB,SAE/B8F,EAAOhG,IACXgG,EAAOhG,GAEH+F,EAAO/F,IACX+F,EAAO/F,GAGH6F,EAAQ3F,IACZ2F,EAAQ3F,GAEJ4F,EAAQ5F,IACZ4F,EAAQ5F,GAIV,OAAS2F,MAAOA,EAAOE,KAAMA,EAAMD,MAAOA,EAAOE,KAAMA,IAIjDob,EAAA1iB,UAAAyhB,SAAP,SAAgBiE,EAAmBC,GAClC,OAAID,EAAGve,MAAQwe,EAAGxe,OAASue,EAAGte,MAAQue,EAAGve,OAASse,EAAGpe,KAAOqe,EAAGre,MAAQoe,EAAGre,KAAOse,EAAGte,MAO9Eqb,EAAA1iB,UAAA0hB,UAAP,SAAiBgE,EAAmBC,GACnC,OAAID,EAAGte,MAAQue,EAAGxe,OAASue,EAAGve,MAAQwe,EAAGve,OAASse,EAAGpe,KAAOqe,EAAGte,MAAQqe,EAAGre,KAAOse,EAAGre,MAS9Eob,EAAA1iB,UAAAmF,kBAAP,SAAyBygB,EAAmBC,EAAmBziB,GAC9D,IAAI0iB,EAAOF,EAAOpkB,SAAWohB,EAAA,QACzBmD,EAAUH,EAAOtkB,UAAYshB,EAAA,QAE7BoD,EAAOH,EAAOrkB,SAAWohB,EAAA,QACzBqD,EAAUJ,EAAOvkB,UAAYshB,EAAA,QAE7BsD,EAAUxkB,KAAKE,IAAIkkB,GACnBK,EAAUzkB,KAAK4e,IAAIwF,GACnBM,EAAa1kB,KAAKE,IAAImkB,GACtBM,EAAa3kB,KAAK4e,IAAIyF,GACtBO,EAAU5kB,KAAKE,IAAIokB,GACnBO,EAAU7kB,KAAK4e,IAAI0F,GACnBQ,EAAa9kB,KAAKE,IAAIqkB,GACtBQ,EAAa/kB,KAAK4e,IAAI2F,GAGtB7B,EAAW4B,EAAOF,EAClB3B,EAAc8B,EAAUF,EACxBjK,EAAIpa,KAAKE,IAAIwiB,EAAW,GAAK1iB,KAAKE,IAAIwiB,EAAW,GAAK1iB,KAAK4e,IAAIwF,GAAQpkB,KAAK4e,IAAI0F,GAAQtkB,KAAKE,IAAIuiB,EAAc,GAAKziB,KAAKE,IAAIuiB,EAAc,GAC3I5D,EAAQ,EAAI7e,KAAKijB,MAAMjjB,KAAK2e,KAAKvE,GAAIpa,KAAK2e,KAAK,EAAIvE,IAEnD4K,EAAIhlB,KAAKE,KAAK,EAAIwB,GAAYmd,GAAS7e,KAAKE,IAAI2e,GAChDoG,EAAIjlB,KAAKE,IAAIwB,EAAWmd,GAAS7e,KAAKE,IAAI2e,GAE1Clf,EAAIqlB,EAAIP,EAAUE,EAAaM,EAAIJ,EAAUE,EAC7CllB,EAAImlB,EAAIP,EAAUC,EAAaO,EAAIJ,EAAUC,EAC7C9B,EAAIgC,EAAIR,EAAUS,EAAIL,EAEtBM,EAAOllB,KAAKijB,MAAMD,EAAGhjB,KAAK2e,KAAKhf,EAAIA,EAAIE,EAAIA,IAC3CslB,EAAUnlB,KAAKijB,MAAMpjB,EAAGF,GAE5B,OAASG,SAAUolB,EAAOhE,EAAA,QAAethB,UAAWulB,EAAUjE,EAAA,UAEhEF,EAxfA,GAigBAC,EAAA,EAAStiB,kBAA8B,WAAIqiB","file":"maps.js","sourcesContent":["/**\r\n * Map object module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapSeries } from \"./MapSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines propeties for [[MapObject]].\r\n */\r\nexport interface IMapObjectProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[MapObject]].\r\n */\r\nexport interface IMapObjectEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapObject]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapObjectAdapters extends IContainerAdapters, IMapObjectProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A base class for all map objects: lines, images, etc.\r\n *\r\n * @see {@link IMapObjectEvents} for a list of available events\r\n * @see {@link IMapObjectAdapters} for a list of available Adapters\r\n */\r\nexport class MapObject extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IMapObjectProperties}\r\n\t */\r\n\tpublic _properties!: IMapObjectProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IMapObjectAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapObjectAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapObjectEvents}\r\n\t */\r\n\tpublic _events!: IMapObjectEvents;\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t *\r\n\t * @type {MapSeries}\r\n\t */\r\n\tpublic series: MapSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapObject\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.layout = \"none\";\r\n\t\tthis.clickable = true;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates this object, forcing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tif (this.series) {\r\n\t\t\tthis.readerTitle = this.series.itemReaderText;\r\n\t\t}\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapObject\"] = MapObject;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapObject.ts","/**\r\n * A collection of GeoJSON format-related utility functions.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * Normalizes a geo-point.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {IGeoPoint}  geoPoint  Source geo-point\r\n * @return {IGeoPoint}            Normalized geo-point\r\n */\r\nexport function normalizePoint(geoPoint: IGeoPoint): IGeoPoint {\r\n\tlet longitude = wrapAngleTo180(geoPoint.longitude);\r\n\tlet latitude = Math.asin(Math.sin((geoPoint.latitude * $math.RADIANS))) * $math.DEGREES;\r\n\r\n\tlet latitude180 = wrapAngleTo180(geoPoint.latitude);\r\n\r\n\tif (Math.abs(latitude180) > 90) {\r\n\t\tlongitude = wrapAngleTo180(longitude + 180);\r\n\t}\r\n\r\n\tgeoPoint.longitude = longitude;\r\n\tgeoPoint.latitude = latitude;\r\n\r\n\treturn geoPoint;\r\n}\r\n\r\n/**\r\n * Normalizes all points of a geo-line.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {IGeoPoint[][]}  multiline  Source geo-line\r\n * @return {IGeoPoint[]}               Normalized geo-line\r\n */\r\nexport function normalizeMultiline(multiline: IGeoPoint[][]): IGeoPoint[][] {\r\n\tfor (let segment of multiline) {\r\n\t\tfor (let point of segment) {\r\n\t\t\tpoint = normalizePoint(point);\r\n\t\t}\r\n\t}\r\n\treturn multiline;\r\n}\r\n\r\n/**\r\n * [wrapAngleTo180 description]\r\n *\r\n * @todo Description\r\n * @ignore Exclude from docs\r\n * @param  {number}  angle  Angle\r\n * @return {number}         Angle\r\n */\r\nexport function wrapAngleTo180(angle: number): number {\r\n\tangle = angle % 360;\r\n\r\n\tif (angle > 180) {\r\n\t\tangle -= 360;\r\n\t}\r\n\tif (angle < -180) {\r\n\t\tangle += 360;\r\n\t}\r\n\r\n\treturn angle;\r\n}\r\n\r\n/**\r\n * Converts a geo point to a regular point object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {IGeoPoint}  geoPoint  Source geo point\r\n * @return {IPoint}               Point\r\n */\r\nexport function geoToPoint(geoPoint: IGeoPoint): IPoint {\r\n\treturn { x: geoPoint.longitude, y: geoPoint.latitude };\r\n}\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/Geo.ts","/**\r\n * Map line module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapObject, IMapObjectProperties, IMapObjectAdapters, IMapObjectEvents } from \"./MapObject\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapLineObject } from \"./MapLineObject\";\r\nimport { MapLineSeriesDataItem, MapLineSeries } from \"./MapLineSeries\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapImage } from \"./MapImage\";\r\nimport { IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { Triangle } from \"../../core/elements/Triangle\";\r\nimport { ListTemplate, IListEvents, ListDisposer } from \"../../core/utils/List\";\r\nimport { Polyline } from \"../../core/elements/Polyline\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $geo from \"./Geo\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapLine]].\r\n */\r\nexport interface IMapLineProperties extends IMapObjectProperties {\r\n\r\n\t/**\r\n\t * Lat/long coordinates of all line ends and intermediate elbows.\r\n\t */\r\n\tmultiGeoLine?: IGeoPoint[][];\r\n\r\n\t/**\r\n\t * If `true` it line will be arched in the way to simulate shortest path\r\n\t * over curvature of Earth's surface, based on currently used on projection.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tshortestDistance?: boolean;\r\n\r\n\t/**\r\n\t * Instead of setting longitudes/latitudes you can set an array of images which will be connected by the line\r\n\t */\r\n\timagesToConnect?: MapImage[];\r\n}\r\n\r\n/**\r\n * Defines events for [[MapLine]].\r\n */\r\nexport interface IMapLineEvents extends IMapObjectEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapLine]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapLineAdapters extends IMapObjectAdapters, IMapLineProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw a line on the map.\r\n *\r\n * @see {@link IMapLineEvents} for a list of available events\r\n * @see {@link IMapLineAdapters} for a list of available Adapters\r\n */\r\nexport class MapLine extends MapObject {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IMapLineProperties}\r\n\t */\r\n\tpublic _properties!: IMapLineProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IMapLineAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapLineAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapLineEvents}\r\n\t */\r\n\tpublic _events!: IMapLineEvents;\r\n\r\n\t/**\r\n\t * A line visual element.\r\n\t *\r\n\t * @type {Polyline}\r\n\t */\r\n\tpublic line: Polyline;\r\n\r\n\t/**\r\n\t * [_lineObjects description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {ListTemplate<MapLineObject>}\r\n\t */\r\n\tprotected _lineObjects: ListTemplate<MapLineObject>;\r\n\r\n\t/**\r\n\t * [_arrow description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {MapLineObject}\r\n\t */\r\n\tprotected _arrow: MapLineObject;\r\n\r\n\t/**\r\n\t * [_distance description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _distance: number;\r\n\r\n\t/**\r\n\t * Related data item.\r\n\t *\r\n\t * @type {MapLineSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapLineSeriesDataItem;\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t *\r\n\t * @type {MapLineSeries}\r\n\t */\r\n\tpublic series: MapLineSeries;\r\n\r\n\t/**\r\n\t * Instead of setting longitudes/latitudes you can set an array of images which will be connected by the line\r\n\t * @ignore\r\n\t */\r\n\tprotected _imagesToConnect: MapImage[];\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapLine\";\r\n\r\n\t\t// Create a line and set its default properties\r\n\t\tthis.line = new Polyline();\r\n\t\tthis.line.stroke = color();\r\n\t\tthis.strokeOpacity = 1;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tthis.shortestDistance = true;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a position within the line (0-1) to a physical point\r\n\t * coordinates.\r\n\t *\r\n\t * 0 indicates start of the line, 0.5 - middle, while 1 indicates the end.\r\n\t *\r\n\t * @param  {number}             position  Position (0-1)\r\n\t * @return {IOrientationPoint}            Coordinates\r\n\t */\r\n\tpublic positionToPoint(position: number): IOrientationPoint {\r\n\t\tif (this.line) {\r\n\t\t\treturn this.line.positionToPoint(position);\r\n\t\t}\r\n\t\treturn { x: 0, y: 0, angle: 0 };\r\n\t}\r\n\r\n\t/**\r\n\t * [multiGeoLine description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {IGeoPoint[][]} multiGeoLine [description]\r\n\t */\r\n\tpublic set multiGeoLine(multiGeoLine: IGeoPoint[][]) {\r\n\t\tthis.setPropertyValue(\"multiGeoLine\", $geo.normalizeMultiline(multiGeoLine), true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {IGeoPoint[]} [description]\r\n\t */\r\n\tpublic get multiGeoLine(): IGeoPoint[][] {\r\n\t\treturn this.getPropertyValue(\"multiGeoLine\");\r\n\t}\r\n\r\n\t/**\r\n\t * Instead of setting longitudes/latitudes you can set an array of images\r\n\t * which will be connected by the line.\r\n\t *\r\n\t * Parameter is an array that can hold string `id`'s to of the images, or\r\n\t * references to actual [[MapImage]] objects.\r\n\t *\r\n\t * @param {MapImages[]}  images  Images\r\n\t */\r\n\tpublic set imagesToConnect(images: MapImage[] | string[]) {\r\n\t\t//@todo dispose listeners if previous imagesToConnect exists\r\n\t\tfor (let i = 0, len = images.length; i < len; i++) {\r\n\t\t\tlet image = images[i];\r\n\t\t\tif ($type.isString(image)) {\r\n\t\t\t\tif (this.map.hasKey(image)) {\r\n\t\t\t\t\timage = <MapImage>this.map.getKey(image);\r\n\t\t\t\t\timages[i] = image;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\timage.events.on(\"propertychanged\", (event) => {\r\n\t\t\t\tif (event.property == \"longitude\" || event.property == \"latitude\") {\r\n\t\t\t\t\tthis.invalidate();\r\n\t\t\t\t}\r\n\t\t\t}, this, false);\r\n\t\t}\r\n\t\tthis.setPropertyValue(\"imagesToConnect\", images);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {MapImages[]}\r\n\t */\r\n\tpublic get imagesToConnect(): MapImage[] | string[] {\r\n\t\treturn this.getPropertyValue(\"imagesToConnect\");\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the line, effectively forcing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tlet chart: MapChart = this.series.chart;\r\n\t\t//let multiPoints: IPoint[][] = [];\r\n\t\tlet multiGeoLine: IGeoPoint[][] = this.multiGeoLine || [];\r\n\r\n\t\tif (this.imagesToConnect) {\r\n\t\t\tlet segment: IGeoPoint[] = [];\r\n\t\t\tmultiGeoLine = [segment];\r\n\r\n\t\t\tfor (let image of this.imagesToConnect) {\r\n\t\t\t\tsegment.push({ longitude: (<MapImage>image).longitude, latitude: (<MapImage>image).latitude });\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.shortestDistance) {\r\n\t\t\tlet newMultiGeoLine: IGeoPoint[][] = [];\r\n\r\n\t\t\tfor (let i = 0, len = multiGeoLine.length; i < len; i++) {\r\n\t\t\t\tlet geoLine: IGeoPoint[] = multiGeoLine[i];\r\n\t\t\t\tlet newGeoLine: IGeoPoint[] = [];\r\n\r\n\t\t\t\tfor (let p = 1, plen = geoLine.length; p < plen; p++) {\r\n\t\t\t\t\tlet geoPointA: IGeoPoint = geoLine[p - 1];\r\n\t\t\t\t\tlet geoPointB: IGeoPoint = geoLine[p];\r\n\r\n\t\t\t\t\tlet stepCount: number = Math.max(Math.abs(geoPointA.latitude - geoPointB.latitude), Math.abs(geoPointA.longitude - geoPointB.longitude));\r\n\t\t\t\t\t//let latitudeStep: number = (geoPointB.latitude - geoPointA.latitude) / stepCount;\r\n\t\t\t\t\t//let longitudeStep: number = (geoPointB.longitude - geoPointA.longitude) / stepCount;\r\n\r\n\t\t\t\t\tfor (let d = 0; d < stepCount; d++) {\r\n\t\t\t\t\t\tlet intermediatePoint = chart.projection.intermediatePoint(geoPointA, geoPointB, d / stepCount);\r\n\r\n\t\t\t\t\t\tif (newGeoLine.length > 0) {\r\n\t\t\t\t\t\t\tlet previousPoint = newGeoLine[newGeoLine.length - 1];\r\n\t\t\t\t\t\t\tif (Math.abs(previousPoint.longitude - intermediatePoint.longitude) > 359) {\r\n\t\t\t\t\t\t\t\tnewMultiGeoLine.push(newGeoLine);\r\n\t\t\t\t\t\t\t\tnewGeoLine = [];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tnewGeoLine.push(intermediatePoint);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// add last point to avoid gap\r\n\t\t\t\t\tnewGeoLine.push(geoPointB);\r\n\t\t\t\t}\r\n\t\t\t\tnewMultiGeoLine.push(newGeoLine);\r\n\t\t\t}\r\n\t\t\tmultiGeoLine = newMultiGeoLine;\r\n\t\t}\r\n\r\n\t\tthis.line.segments = chart.projection.projectGeoLine(multiGeoLine);\r\n\r\n\t\tif (this._arrow) {\r\n\t\t\tthis._arrow.validatePosition();\r\n\t\t}\r\n\r\n\t\t$iter.each(this.lineObjects.iterator(), (x) => {\r\n\t\t\tx.validatePosition();\r\n\t\t});\r\n\r\n\t\tthis.line.parent = this;\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic measureElement(): void {\r\n\t\t// Overriding, just to avoid extra measure\r\n\t}\r\n\r\n\t/**\r\n\t * The line should take the shortest path over the globe.\r\n\t *\r\n\t * Enabling this will make the line look differently in different\r\n\t * projections. Only `MapLine` supports this setting, `MapArc` and\r\n\t * `MapSplice` don't.\r\n\t *\r\n\t * @default false\r\n\t * @param {boolean}  value  Real path?\r\n\t */\r\n\tpublic set shortestDistance(value: boolean) {\r\n\t\tthis.setPropertyValue(\"shortestDistance\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Real path?\r\n\t */\r\n\tpublic get shortestDistance(): boolean {\r\n\t\treturn this.getPropertyValue(\"shortestDistance\");\r\n\t}\r\n\r\n\t/**\r\n\t * List of separate line objects, the line consists of.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @readonly\r\n\t * @return {ListTemplate<MapLineObject>} List of line objects\r\n\t */\r\n\tpublic get lineObjects(): ListTemplate<MapLineObject> {\r\n\t\tif (!this._lineObjects) {\r\n\t\t\tthis._lineObjects = new ListTemplate<MapLineObject>(new MapLineObject());\r\n\t\t\tthis._lineObjects.events.on(\"inserted\", this.handleLineObjectAdded, this, false);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._lineObjects));\r\n\t\t\tthis._disposers.push(this._lineObjects.template);\r\n\t\t}\r\n\r\n\t\treturn this._lineObjects;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorate a [[LineObject]] when it is added to the line.\r\n\t *\r\n\t * @param {IListEvents<MapLineObject>[\"inserted\"]}  event  Event\r\n\t */\r\n\tprotected handleLineObjectAdded(event: IListEvents<MapLineObject>[\"inserted\"]) {\r\n\t\tlet mapLineObject: MapLineObject = event.newValue;\r\n\t\tmapLineObject.mapLine = this;\r\n\t\tmapLineObject.parent = this;\r\n\t}\r\n\r\n\t/**\r\n\t * A [[MapLineObject]] to use as an option arrowhead on the line.\r\n\t *\r\n\t * Just accessing this property will create a default arrowhead on the line\r\n\t * automatically.\r\n\t *\r\n\t * @param {MapLineObject}  arrow  Arrow element\r\n\t */\r\n\tpublic set arrow(arrow: MapLineObject) {\r\n\t\tthis._arrow = arrow;\r\n\t\tarrow.mapLine = this;\r\n\t\tarrow.parent = this;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {MapLineObject} Arrow element\r\n\t */\r\n\tpublic get arrow(): MapLineObject {\r\n\t\tif (!this._arrow) {\r\n\t\t\tlet arrow: MapLineObject = this.createChild(MapLineObject);\r\n\t\t\tarrow.shouldClone = false;\r\n\t\t\tarrow.width = 8;\r\n\t\t\tarrow.height = 10;\r\n\t\t\tarrow.mapLine = this;\r\n\t\t\tarrow.position = 0.5;\r\n\r\n\t\t\tlet triangle = arrow.createChild(Triangle);\r\n\t\t\ttriangle.shouldClone = false;\r\n\t\t\ttriangle.fillOpacity = 1;\r\n\t\t\ttriangle.width = percent(100);\r\n\t\t\ttriangle.height = percent(100);\r\n\t\t\ttriangle.rotation = 90;\r\n\t\t\ttriangle.horizontalCenter = \"middle\";\r\n\t\t\ttriangle.verticalCenter = \"middle\";\r\n\t\t\tthis._arrow = arrow;\r\n\t\t}\r\n\t\treturn this._arrow;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies line properties and other attributes, like arrow, from another\r\n\t * instance of [[MapLine]].\r\n\t *\r\n\t * @param {MapLineObject}  source  Source map line\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.line.copyFrom(source.line);\r\n\t\tthis.lineObjects.copyFrom(source.lineObjects);\r\n\t\tif (source._arrow) {\r\n\t\t\tthis.arrow = <MapLineObject>source.arrow.clone();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Latitude of the line center.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Latitude\r\n\t */\r\n\tpublic get latitude(): number {\r\n\t\tlet dataItem = this.dataItem;\r\n\t\treturn dataItem.north + (dataItem.south - dataItem.north) / 2;\r\n\t}\r\n\r\n\t/**\r\n\t * Longitude of the line center.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Latitude\r\n\t */\r\n\tpublic get longitude(): number {\r\n\t\tlet dataItem = this.dataItem;\r\n\t\treturn dataItem.east + (dataItem.west - dataItem.east) / 2;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapLine\"] = MapLine;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapLine.ts","/**\r\n * A collection of Map-related utility functions.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\n\r\n/**\r\n * Converts a multi-part polygon in X/Y coordinates to a geo-multipolygon in\r\n * geo-points (lat/long).\r\n * \r\n * @param  {number[][][][]}  multiPolygon  Source multi-polygon\r\n * @return {IGeoPoint[]}                   Geo-multipolygon\r\n */\r\n\r\nexport function multiPolygonToGeo(multiPolygon: number[][][][]): IGeoPoint[][][] {\r\n\tlet multiGeoArea: IGeoPoint[][][] = [];\r\n\r\n\tfor (let i = 0, len = multiPolygon.length; i < len; i++) {\r\n\r\n\t\tlet surface: number[][] = multiPolygon[i][0];\r\n\t\tlet hole: number[][] = multiPolygon[i][1];\r\n\r\n\t\t//let holePoints: IGeoPoint[] = [];\r\n\r\n\t\tmultiGeoArea[i] = [];\r\n\r\n\t\tif (surface) {\r\n\t\t\tmultiGeoArea[i].push(multiPointToGeo(surface));\r\n\t\t}\r\n\r\n\t\tif (hole) {\r\n\t\t\tmultiGeoArea[i].push(multiPointToGeo(hole));\r\n\t\t}\r\n\t}\r\n\treturn multiGeoArea;\r\n}\r\n\r\n/**\r\n * Converts a multiline in X/Y coordinates to a geo-multiline in geo-points\r\n * (lat/long).\r\n * \r\n * @param  {number[][][]}  multiLine  Source multiline\r\n * @return {IGeoPoint[]}              Geo-multiline\r\n */\r\nexport function multiLineToGeo(multiLine: number[][][]): IGeoPoint[][] {\r\n\tlet multiGeoLine: IGeoPoint[][] = [];\r\n\r\n\tfor (let i = 0, len = multiLine.length; i < len; i++) {\r\n\t\tmultiGeoLine.push(multiPointToGeo(multiLine[i]));\r\n\t}\r\n\treturn multiGeoLine;\r\n}\r\n\r\n/**\r\n * Converts multiple X/Y points into a lat/long geo-points.\r\n * \r\n * @param  {number[][]}   points  Source points\r\n * @return {IGeoPoint[]}          Geo-points\r\n */\r\nexport function multiPointToGeo(points: number[][]): IGeoPoint[] {\r\n\tlet geoPoints: IGeoPoint[] = [];\r\n\tfor (let i = 0, len = points.length; i < len; i++) {\r\n\t\tgeoPoints.push(pointToGeo(points[i]));\r\n\t}\r\n\treturn geoPoints;\r\n}\r\n\r\n/**\r\n * Converts X/Y point into a lat/long geo-point.\r\n * \r\n * @param  {number[]}   point  Source point\r\n * @return {IGeoPoint}         Geo-point\r\n */\r\nexport function pointToGeo(point: number[]): IGeoPoint {\r\n\treturn { longitude: point[0], latitude: point[1] }\r\n}\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapUtils.ts","/**\r\n *\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapObject, IMapObjectProperties, IMapObjectAdapters, IMapObjectEvents } from \"./MapObject\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapImageSeriesDataItem, MapImageSeries } from \"./MapImageSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapImage]].\r\n */\r\nexport interface IMapImageProperties extends IMapObjectProperties {\r\n\r\n\t/**\r\n\t * Latitude of the image location.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlatitude?: number;\r\n\r\n\t/**\r\n\t * Longitude of the mage location.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlongitude?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[MapImage]].\r\n */\r\nexport interface IMapImageEvents extends IMapObjectEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapImage]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapImageAdapters extends IMapObjectAdapters, IMapImageProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to place an image on the map.\r\n *\r\n * @see {@link IMapImageEvents} for a list of available events\r\n * @see {@link IMapImageAdapters} for a list of available Adapters\r\n */\r\nexport class MapImage extends MapObject {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IMapImageProperties}\r\n\t */\r\n\tpublic _properties!: IMapImageProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IMapImageAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapImageAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapImageEvents}\r\n\t */\r\n\tpublic _events!: IMapImageEvents;\r\n\r\n\t/**\r\n\t * A related data item.\r\n\t *\r\n\t * @type {MapImageSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapImageSeriesDataItem;\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t *\r\n\t * @type {MapImageSeries}\r\n\t */\r\n\tpublic series: MapImageSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"MapImage\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Latitude image is placed at.\r\n\t *\r\n\t * @param {number}  value  Latitude\r\n\t */\r\n\tpublic set latitude(value: number) {\r\n\t\tthis.setPropertyValue(\"latitude\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Latitude\r\n\t */\r\n\tpublic get latitude(): number {\r\n\t\treturn this.getPropertyValue(\"latitude\");\r\n\t}\r\n\r\n\t/**\r\n\t * Longitude image is placed on.\r\n\t *\r\n\t * @param {number}  value  Longitude\r\n\t */\r\n\tpublic set longitude(value: number) {\r\n\t\tthis.setPropertyValue(\"longitude\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Longitude\r\n\t */\r\n\tpublic get longitude(): number {\r\n\t\treturn this.getPropertyValue(\"longitude\");\r\n\t}\r\n\r\n\t/**\r\n\t * Repositions the image to it's current position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validatePosition(): void {\r\n\t\tif ($type.isNumber(this.latitude) && $type.isNumber(this.longitude)) {\r\n\t\t\tthis.moveTo(this.series.chart.projection.convert({ latitude: this.latitude, longitude: this.longitude }));\r\n\t\t}\r\n\t\tsuper.validatePosition();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapImage\"] = MapImage;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapImage.ts","/**\r\n * Map polygon module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapObject, IMapObjectProperties, IMapObjectAdapters, IMapObjectEvents } from \"./MapObject\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapPolygonSeriesDataItem, MapPolygonSeries } from \"./MapPolygonSeries\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { Polygon } from \"../../core/elements/Polygon\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n\r\n\r\n/**\r\n * ============================f================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapPolygon]].\r\n */\r\nexport interface IMapPolygonProperties extends IMapObjectProperties {\r\n\r\n\t/**\r\n\t * Set of coordinates for the polygon.\r\n\t */\r\n\tmultiGeoPolygon?: IGeoPoint[][][];\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[MapPolygon]].\r\n */\r\nexport interface IMapPolygonEvents extends IMapObjectEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapPolygon]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapPolygonAdapters extends IMapObjectAdapters, IMapPolygonProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw a polygon on the map.\r\n *\r\n * @see {@link IMapPolygonEvents} for a list of available events\r\n * @see {@link IMapPolygonAdapters} for a list of available Adapters\r\n */\r\nexport class MapPolygon extends MapObject {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IMapPolygonProperties}\r\n\t */\r\n\tpublic _properties!: IMapPolygonProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IMapPolygonAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapPolygonAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapPolygonEvents}\r\n\t */\r\n\tpublic _events!: IMapPolygonEvents;\r\n\r\n\t/**\r\n\t * A visual polygon element.\r\n\t *\r\n\t * @type {Polygon}\r\n\t */\r\n\tpublic polygon: Polygon;\r\n\r\n\t/**\r\n\t * A related data item.\r\n\t *\r\n\t * @type {MapPolygonSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapPolygonSeriesDataItem;\r\n\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t *\r\n\t * @type {MapPolygonSeries}\r\n\t */\r\n\tpublic series: MapPolygonSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"MapPolygon\";\r\n\r\n\t\tthis.polygon = this.createChild(Polygon);\r\n\t\tthis.polygon.shouldClone = false;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.fill = interfaceColors.getFor(\"secondaryButton\");\r\n\t\tthis.stroke = interfaceColors.getFor(\"secondaryButtonStroke\");\r\n\t\tthis.strokeOpacity = 1;\r\n\r\n\t\tthis.tooltipPosition = \"pointer\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Set of coordinates for the polygon.\r\n\t *\r\n\t * @param {IGeoPoint[][][]}  multiGeoPolygon  Polygon coordinates\r\n\t */\r\n\tpublic set multiGeoPolygon(multiGeoPolygon: IGeoPoint[][][]) {\r\n\t\tthis.setPropertyValue(\"multiGeoPolygon\", multiGeoPolygon, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {IGeoPoint[]} Polygon coordinates\r\n\t */\r\n\tpublic get multiGeoPolygon(): IGeoPoint[][][] {\r\n\t\treturn this.getPropertyValue(\"multiGeoPolygon\");\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the polygon, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tif (this.series) {\r\n\t\t\tthis.polygon.points = this.series.chart.projection.projectGeoArea(this.multiGeoPolygon);\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic measureElement(): void {\r\n\t\t// Overriding, just to avoid extra measure\r\n\t}\r\n\r\n\t/**\r\n\t * Calculated polygon center latitude.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Center latitude\r\n\t */\r\n\tpublic get latitude(): number {\r\n\t\tlet dataItem = this.dataItem;\r\n\t\treturn dataItem.north + (dataItem.south - dataItem.north) / 2;\r\n\t}\r\n\r\n\t/**\r\n\t * Calculated polygon center longitude.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Center longitude\r\n\t */\r\n\tpublic get longitude(): number {\r\n\t\tlet dataItem = this.dataItem;\r\n\t\treturn dataItem.east + (dataItem.west - dataItem.east) / 2;\r\n\t}\r\n\r\n\t/**\r\n\t * Not 100% sure about this, as if we add something to MapPolygon this\r\n\t * won't be true, but otherwise we will get all 0 and the tooltip won't\r\n\t * be positioned properly\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Element's width in pixels.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Width (px)\r\n\t */\r\n\tpublic get pixelWidth(): number {\r\n\t\treturn this.polygon.pixelWidth;\r\n\t}\r\n\r\n\t/**\r\n\t * Element's height in pixels.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Width (px)\r\n\t */\r\n\tpublic get pixelHeight(): number {\r\n\t\treturn this.polygon.pixelHeight;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapPolygon\"] = MapPolygon;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapPolygon.ts","/**\r\n * Map line series module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapSeries, MapSeriesDataItem, GEOJSONGeometry, IMapSeriesProperties, IMapSeriesDataFields, IMapSeriesAdapters, IMapSeriesEvents } from \"./MapSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapLine } from \"./MapLine\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { IMapLineDataObject } from \"../types/MapChart\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $mapUtils from \"./MapUtils\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapLineSeries]]\r\n * @see {@link DataItem}\r\n */\r\nexport class MapLineSeriesDataItem extends MapSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[MapLine]] element related to this data item.\r\n\t *\r\n\t * @type {MapLine}\r\n\t */\r\n\tpublic _mapLine: MapLine;\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a single-segment line.\r\n\t *\r\n\t * @type {number[][]}\r\n\t */\r\n\tprotected _line: number[][];\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-segment line.\r\n\t *\r\n\t * @type {number[][][]}\r\n\t */\r\n\tprotected _multiLine: number[][][];\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a single-segment line.\r\n\t *\r\n\t * @type {IGeoPoint[]}\r\n\t */\r\n\tprotected _geoLine: IGeoPoint[];\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a multi-segment line.\r\n\t *\r\n\t * @type {IGeoPoint[][]}\r\n\t */\r\n\tprotected _multiGeoLine: IGeoPoint[][];\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @type {MapLineSeries}\r\n\t */\r\n\tpublic _component!: MapLineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapLineSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[MapLine]] element related to this data item.\r\n\t *\r\n\t * @readonly\r\n\t * @return {MapLine} Element\r\n\t */\r\n\tpublic get mapLine(): this[\"_mapLine\"] {\r\n\t\tif (!this._mapLine) {\r\n\t\t\tlet mapLine = this.component.mapLines.create();\r\n\r\n\t\t\tthis._mapLine = mapLine;\r\n\t\t\tthis.addSprite(mapLine);\r\n\r\n\t\t\tthis._disposers.push(mapLine);\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tthis.component.mapLines.removeValue(mapLine);\r\n\t\t\t}));\r\n\t\t}\r\n\t\treturn this._mapLine;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a single-segment line. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   [ 100, 150 ],\r\n\t *   [ 120, 200 ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @param {number[][]}  line  Coordinates\r\n\t */\r\n\tpublic set line(line: number[][]) {\r\n\t\tthis._line = line;\r\n\t\tthis.multiGeoLine = $mapUtils.multiLineToGeo([line]);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number[]} Coordinates\r\n\t */\r\n\tpublic get line(): number[][] {\r\n\t\treturn this._line;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-segment line. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   // Segment 1\r\n\t *   [\r\n\t *     [ 100, 150 ],\r\n\t *     [ 120, 200 ]\r\n\t *   ],\r\n\t *\r\n\t *   // Segment 2\r\n\t *   [\r\n\t *     [ 120, 200 ],\r\n\t *     [ 150, 100 ]\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @param {number[][]}  multiLine  Coordinates\r\n\t */\r\n\tpublic set multiLine(multiLine: number[][][]) {\r\n\t\tthis._multiLine = multiLine;\r\n\t\tthis.multiGeoLine = $mapUtils.multiLineToGeo(multiLine);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number[]} Coordinates\r\n\t */\r\n\tpublic get multiLine(): number[][][] {\r\n\t\treturn this._multiLine;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a single-segment line. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   { longitude: 3.121, latitude: 0.58 },\r\n\t *   { longitude: -5.199, latitude: 21.223 }\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.4} GeoJSON LineString reference\r\n\t * @param {IGeoPoint[][]}  geoLine  Coordinates\r\n\t */\r\n\tpublic set geoLine(geoLine: IGeoPoint[]) {\r\n\t\tthis._geoLine = geoLine;\r\n\t\tthis.multiGeoLine = [geoLine];\r\n\t}\r\n\r\n\t/**\r\n\t * @return {IGeoPoint[]} Coordinates\r\n\t */\r\n\tpublic get geoLine(): IGeoPoint[] {\r\n\t\treturn this._geoLine;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-segment line. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   // Segment 1\r\n\t *   [\r\n\t *     { longitude: 3.121, latitude: 0.58 },\r\n\t *     { longitude: -5.199, latitude: 21.223 }\r\n\t *   ],\r\n\t *\r\n\t *   // Segment 2\r\n\t *   [\r\n\t *     { longitude: -5.199, latitude: 21.223 },\r\n\t *     { longitude: -12.9, latitude: 25.85 }\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.5} GeoJSON MultiLineString reference\r\n\t * @param {IGeoPoint[][]}  multiGeoLine  Coordinates\r\n\t */\r\n\tpublic set multiGeoLine(multiGeoLine: IGeoPoint[][]) {\r\n\t\tthis._multiGeoLine = multiGeoLine;\r\n\t\tthis.updateLineExtremes(multiGeoLine);\r\n\t\tthis.mapLine.multiGeoLine = this._multiGeoLine;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {IGeoPoint[]} Coordinates\r\n\t */\r\n\tpublic get multiGeoLine(): IGeoPoint[][] {\r\n\t\treturn this._multiGeoLine;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the item's bounding coordinates: coordinates of the East, West,\r\n\t * North, and South-most points.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IGeoPoint[]}  geoPoints  Points of the element\r\n\t */\r\n\tpublic updateLineExtremes(multiGeoLine: IGeoPoint[][]): void {\r\n\t\tfor (let i = 0, len = multiGeoLine.length; i < len; i++) {\r\n\t\t\tlet geoLine: IGeoPoint[] = multiGeoLine[i];\r\n\t\t\tthis.updateExtremes(geoLine);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[MapLineSeries]].\r\n */\r\nexport interface IMapLineSeriesDataFields extends IMapSeriesDataFields {\r\n\r\n\t/**\r\n\t * Field name that holds line data in pixels.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tline?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-line data in pixels.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tmultiLine?: string;\r\n\r\n\t/**\r\n\t * Field name that holds line data in Geo coordinates.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tgeoLine?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-line data in Geo coordinates.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tmultiGeoLine?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[MapLineSeries]].\r\n */\r\nexport interface IMapLineSeriesProperties extends IMapSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[MapLineSeries]].\r\n */\r\nexport interface IMapLineSeriesEvents extends IMapSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapLineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapLineSeriesAdapters extends IMapSeriesAdapters, IMapLineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A series of map line series.\r\n *\r\n * @see {@link IMapLineSeriesEvents} for a list of available Events\r\n * @see {@link IMapLineSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapLineSeries extends MapSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IMapLineSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IMapLineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IMapLineSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IMapLineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IMapLineSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapLineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapLineSeriesEvents}\r\n\t */\r\n\tpublic _events!: IMapLineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {MapLineSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapLineSeriesDataItem;\r\n\r\n\r\n\t/**\r\n\t * A related chart/map object, this element is drawn on.\r\n\t *\r\n\t * @type {MapChart}\r\n\t */\r\n\tpublic chart: MapChart;\r\n\r\n\t/**\r\n\t * Defines the type of the line items in this series.\r\n\t *\r\n\t * @type {MapLine}\r\n\t */\r\n\tpublic _mapLine: MapLine;\r\n\r\n\t/**\r\n\t * A list of map lins in the series.\r\n\t *\r\n\t * @type {ListTemplate<MapImage>}\r\n\t */\r\n\tprotected _mapLines: ListTemplate<this[\"_mapLine\"]>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapLineSeries\";\r\n\r\n\t\t// Set data fields\r\n\t\tthis.dataFields.multiLine = \"multiLine\";\r\n\t\tthis.dataFields.line = \"line\";\r\n\r\n\t\tthis.dataFields.geoLine = \"geoLine\";\r\n\t\tthis.dataFields.multiGeoLine = \"multiGeoLine\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {MapLineSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapLineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates series data, effectively causing the whole series to be\r\n\t * redrawn.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tif (this.data.length > 0) {\r\n\t\t\tthis.mapLines.clear();\r\n\t\t}\r\n\r\n\t\t// process geoJSON and created map objects\r\n\t\tif (this.useGeodata || this.geodata) {\r\n\t\t\tlet geoJSON: any = this.chart.geodata;\r\n\t\t\tif (geoJSON) {\r\n\r\n\t\t\t\tlet features: any[];\r\n\r\n\t\t\t\tif (geoJSON.type == \"FeatureCollection\") {\r\n\t\t\t\t\tfeatures = geoJSON.features;\r\n\t\t\t\t}\r\n\t\t\t\telse if (geoJSON.type == \"Feature\") {\r\n\t\t\t\t\tfeatures = [geoJSON];\r\n\t\t\t\t}\r\n\t\t\t\telse if ([\"Point\", \"LineString\", \"Polygon\", \"MultiPoint\", \"MultiLineString\", \"MultiPolygon\"].indexOf(geoJSON.type) != -1) {\r\n\t\t\t\t\tfeatures = [{ geometry: geoJSON }];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tconsole.log(\"nothing found in geoJSON\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (features) {\r\n\t\t\t\t\tfor (let i = 0, len = features.length; i < len; i++) {\r\n\r\n\t\t\t\t\t\tlet feature: any = features[i];\r\n\t\t\t\t\t\tlet geometry: any = feature.geometry;\r\n\t\t\t\t\t\tif (geometry) {\r\n\t\t\t\t\t\t\tlet type: GEOJSONGeometry = <GEOJSONGeometry>geometry.type;\r\n\t\t\t\t\t\t\tlet id: string = feature.id;\r\n\t\t\t\t\t\t\tif (type == \"LineString\" || type == \"MultiLineString\") {\r\n\r\n\t\t\t\t\t\t\t\tif (!this.checkInclude(this.include, this.exclude, id)) {\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet coordinates: any[] = geometry.coordinates;\r\n\r\n\t\t\t\t\t\t\t\tif (coordinates) {\r\n\t\t\t\t\t\t\t\t\t// make the same as MultiPolygon\r\n\t\t\t\t\t\t\t\t\tif (type == \"MultiLineString\") {\r\n\t\t\t\t\t\t\t\t\t\tcoordinates = [coordinates];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet dataObject: IMapLineDataObject = $array.find(this.data, (value, i) => {\r\n\t\t\t\t\t\t\t\t\treturn value.id == id;\r\n\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t\tif (!dataObject) {\r\n\t\t\t\t\t\t\t\t\tdataObject = { multiLineString: coordinates, id: id };\r\n\t\t\t\t\t\t\t\t\tthis.data.push(dataObject);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tif (!dataObject.multiLineString) {\r\n\t\t\t\t\t\t\t\t\t\tdataObject.multiLineString = coordinates;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// copy properties data to datacontext\r\n\t\t\t\t\t\t\t\t$utils.softCopyProperties(feature.properties, dataObject);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\t\t// important! this should go after super\r\n\t\t// if data is parsed in chunks, lines list is corrupted, fix it here\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tthis.mapLines.moveValue(dataItem.mapLine);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * A list of lines in the series.\r\n\t *\r\n\t * @return {ListTemplate} Lines\r\n\t */\r\n\tpublic get mapLines(): ListTemplate<this[\"_mapLine\"]> {\r\n\r\n\t\tif (!this._mapLines) {\r\n\t\t\tlet lineTemplate: MapLine = this.createLine();\r\n\t\t\tlet mapLines = new ListTemplate<MapLine>(lineTemplate);\r\n\t\t\tthis._disposers.push(new ListDisposer(mapLines));\r\n\t\t\tthis._disposers.push(mapLines.template);\r\n\t\t\tmapLines.events.on(\"inserted\", this.handleObjectAdded, this, false);\r\n\t\t\tthis._mapLines = mapLines;\r\n\t\t}\r\n\r\n\t\treturn this._mapLines;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new line instance of suitable type.\r\n\t *\r\n\t * @return {MapLine} New line\r\n\t */\r\n\tprotected createLine(): this[\"_mapLine\"] {\r\n\t\treturn new MapLine();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the series\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\t$iter.each(this.mapLines.iterator(), (mapLine) => {\r\n\t\t\tmapLine.validate();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[Series]].\r\n\t *\r\n\t * @param {Series}  source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tthis.mapLines.template.copyFrom(source.mapLines.template);\r\n\t\tsuper.copyFrom(source);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapLineSeries\"] = MapLineSeries;\r\nregistry.registeredClasses[\"MapLineSeriesDataItem\"] = MapLineSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapLineSeries.ts","/**\r\n * A module for the mini-map control.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Rectangle } from \"../../core/elements/Rectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapSeries } from \"./MapSeries\";\r\nimport { List, IListEvents } from \"../../core/utils/List\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[SmallMap]].\r\n */\r\nexport interface ISmallMapProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[SmallMap]].\r\n */\r\nexport interface ISmallMapEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SmallMap]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISmallMapAdapters extends IContainerAdapters, ISmallMapProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a \"bird's eye\" view of the whole map.\r\n *\r\n * This control creates a mini-map with the whole of the map, highlighting\r\n * the area which is in the current viewport of the map map.\r\n *\r\n * @see {@link ISmallMapEvents} for a list of available events\r\n * @see {@link ISmallMapAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class SmallMap extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {SmallMaPproperties}\r\n\t */\r\n\tpublic _properties!: ISmallMapProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ISmallMapAdapters}\r\n\t */\r\n\tpublic _adapter!: ISmallMapAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ISmallMapEvents}\r\n\t */\r\n\tpublic _events!: ISmallMapEvents;\r\n\r\n\t/**\r\n\t * A target map.\r\n\t *\r\n\t * @type {MutableValueDisposer<MapChart>}\r\n\t */\r\n\tprotected _chart: MutableValueDisposer<MapChart> = new MutableValueDisposer<MapChart>();\r\n\r\n\t/**\r\n\t * A container that holds the visual elements for the mini-map.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic seriesContainer: Container;\r\n\r\n\t/**\r\n\t * The rectangle element which highlights current viewport.\r\n\t *\r\n\t * @type {Rectangle}\r\n\t */\r\n\tpublic rectangle: Rectangle;\r\n\r\n\t/**\r\n\t * A list of map series used to draw the mini-map.\r\n\t *\r\n\t * @type {List<MapSeries>}\r\n\t */\r\n\tprotected _series: List<MapSeries>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"SmallMap\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.align = \"left\";\r\n\t\tthis.valign = \"bottom\";\r\n\t\tthis.percentHeight = 20;\r\n\t\tthis.percentWidth = 20;\r\n\t\tthis.margin(5, 5, 5, 5);\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Set background defailts\r\n\t\tthis.background.fillOpacity = 0.9;\r\n\t\tthis.background.fill = interfaceColors.getFor(\"background\");\r\n\r\n\t\t// Set up events\r\n\t\tthis.events.on(\"hit\", this.moveToPosition, this, false);\r\n\t\tthis.events.on(\"maxsizechanged\", this.updateMapSize, this, false);\r\n\r\n\t\t// Create a container\r\n\t\tthis.seriesContainer = this.createChild(Container);\r\n\t\tthis.seriesContainer.shouldClone = false;\r\n\r\n\t\t// Create an outline rectangle\r\n\t\tlet rectangle: Rectangle = this.createChild(Rectangle);\r\n\t\trectangle.shouldClone = false;\r\n\t\trectangle.stroke = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\trectangle.strokeWidth = 1;\r\n\t\trectangle.strokeOpacity = 0.5;\r\n\t\trectangle.fill = color(); //\"none\";\r\n\t\trectangle.verticalCenter = \"middle\";\r\n\t\trectangle.horizontalCenter = \"middle\";\r\n\t\trectangle.isMeasured = false;\r\n\t\tthis.rectangle = rectangle;\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * A list of map series used to draw the mini-map.\r\n\t *\r\n\t * @readonly\r\n\t * @return {List<MapSeries>} Series\r\n\t */\r\n\tpublic get series(): List<MapSeries> {\r\n\t\tif (!this._series) {\r\n\t\t\tthis._series = new List<MapSeries>();\r\n\t\t\tthis._series.events.on(\"inserted\", this.handleSeriesAdded, this, false);\r\n\t\t\tthis._series.events.on(\"removed\", this.handleSeriesRemoved, this, false);\r\n\t\t}\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Decorates a new series when they are pushed into a `series` list.\r\n\t *\r\n\t * @param {IListEvents<MapSeries>[\"inserted\"]} event Event\r\n\t */\r\n\tprotected handleSeriesAdded(event: IListEvents<MapSeries>[\"inserted\"]) {\r\n\t\tlet series: MapSeries = event.newValue;\r\n\t\tif (this.chart.series.contains(series)) {\r\n\t\t\tlet newSeries = series.clone();\r\n\t\t\tthis._series.removeValue(series);\r\n\t\t\tthis._series.push(newSeries);\r\n\t\t\tseries = newSeries;\r\n\r\n\t\t\tthis.chart.dataUsers.push(newSeries);\r\n\t\t}\r\n\t\tseries.chart = this.chart;\r\n\t\tseries.parent = this.seriesContainer;\r\n\t\tseries.interactionsEnabled = false;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Cleans up after series are removed from Scrollbar.\r\n\t *\r\n\t * @param {IListEvents<XYSeries>[\"removed\"]}  event  Event\r\n\t */\r\n\tprotected handleSeriesRemoved(event: IListEvents<MapSeries>[\"removed\"]) {\r\n\t\t//let sourceSeries: MapSeries = event.oldValue;\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * Moves main map pan position after click on the small map.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"hit\"]}  event  Event\r\n\t */\r\n\tpublic moveToPosition(event: AMEvent<Sprite, ISpriteEvents>[\"hit\"]) {\r\n\t\tlet svgPoint: IPoint = event.svgPoint;\r\n\t\tlet rectPoint: IPoint = $utils.svgPointToSprite(svgPoint, this.rectangle);\r\n\r\n\t\tlet zoomLevel: number = this.chart.zoomLevel;\r\n\t\tlet scale: number = Math.min(this.percentWidth, this.percentHeight) / 100;\r\n\t\tlet x: number = (rectPoint.x + this.rectangle.pixelWidth / 2) / scale * zoomLevel;\r\n\t\tlet y: number = (rectPoint.y + this.rectangle.pixelHeight / 2) / scale * zoomLevel;\r\n\r\n\t\tlet geoPoint: IGeoPoint = this.chart.svgPointToGeo({ x: x, y: y });\r\n\r\n\t\tthis.chart.zoomToGeoPoint(geoPoint, this.chart.zoomLevel, true);\r\n\t}\r\n\r\n\t/**\r\n\t * A chart/map that this control is meant for.\r\n\t *\r\n\t * @param {MapChart}  chart  Chart/map\r\n\t */\r\n\tpublic set chart(chart: MapChart) {\r\n\t\tif (this.chart != chart) {\r\n\t\t\tthis._chart.set(chart, new MultiDisposer([\r\n\t\t\t\t//chart.events.on(\"zoomlevelchanged\", this.updateRectangle, this, false),\r\n\t\t\t\tchart.events.on(\"mappositionchanged\", this.updateRectangle, this, false),\r\n\t\t\t\tchart.events.on(\"scaleratiochanged\", this.updateMapSize, this, false)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {MapChart} Chart/map\r\n\t */\r\n\tpublic get chart(): MapChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the viewport recangle as per current map zoom/pan position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateRectangle(): void {\r\n\t\tlet chart: MapChart = this.chart;\r\n\t\tlet zoomLevel: number = chart.zoomLevel;\r\n\t\tlet rectangle: Rectangle = this.rectangle;\r\n\r\n\t\trectangle.width = this.pixelWidth / zoomLevel;\r\n\t\trectangle.height = this.pixelHeight / zoomLevel;\r\n\r\n\t\tlet scale: number = Math.min(this.percentWidth, this.percentHeight) / 100;\r\n\r\n\t\tlet seriesContainer: Container = chart.seriesContainer;\r\n\r\n\t\trectangle.x = Math.ceil((zoomLevel * seriesContainer.pixelWidth / 2 - seriesContainer.pixelX) * scale / zoomLevel + rectangle.pixelWidth / 2);\r\n\t\trectangle.y = Math.ceil((zoomLevel * seriesContainer.pixelHeight / 2 - seriesContainer.pixelY) * scale / zoomLevel + rectangle.pixelHeight / 2);\r\n\r\n\t\trectangle.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Update map size so that internal elements can redraw themselves after\r\n\t * the size of the small map changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateMapSize(): void {\r\n\t\tif (this.chart) {\r\n\t\t\tthis.seriesContainer.scale = this.chart.scaleRatio * Math.min(this.percentWidth, this.percentHeight) / 100;\r\n\t\t\tthis.updateRectangle();\r\n\t\t\tthis.afterDraw();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Update elements after drawing the small map.\r\n\t */\r\n\tprotected afterDraw(): void {\r\n\t\tsuper.afterDraw();\r\n\t\tthis.seriesContainer.moveTo({ x: this.pixelWidth / 2, y: this.pixelHeight / 2 });\r\n\t\tthis.rectangle.maskRectangle = { x: -1, y: -1, width: Math.ceil(this.pixelWidth + 2), height: Math.ceil(this.pixelHeight + 2) };\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tlet series = config.series[i];\r\n\t\t\t\t\tif ($type.hasValue(series) && $type.isString(series) && this.map.hasKey(series)) {\r\n\t\t\t\t\t\tconfig.series[i] = this.map.getKey(series);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SmallMap\"] = SmallMap;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/SmallMap.ts","/**\r\n * Map spline module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapLine, IMapLineProperties, IMapLineAdapters, IMapLineEvents } from \"./MapLine\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Polyspline } from \"../../core/elements/Polyspline\";\r\nimport { MapSplineSeriesDataItem, MapSplineSeries } from \"./MapSplineSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapSpline]].\r\n */\r\nexport interface IMapSplineProperties extends IMapLineProperties { }\r\n\r\n/**\r\n * Defines events for [[MapSpline]].\r\n */\r\nexport interface IMapSplineEvents extends IMapLineEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapSpline]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapSplineAdapters extends IMapLineAdapters, IMapSplineProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw a spline on the map.\r\n *\r\n * @see {@link IMapSplineEvents} for a list of available events\r\n * @see {@link IMapSplineAdapters} for a list of available Adapters\r\n */\r\nexport class MapSpline extends MapLine {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IMapSplineProperties}\r\n\t */\r\n\tpublic _properties!: IMapSplineProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IMapSplineAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapSplineAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapSplineEvents}\r\n\t */\r\n\tpublic _events!: IMapSplineEvents;\r\n\r\n\t/**\r\n\t * A visual element for the spline.\r\n\t *\r\n\t * @type {Polyspline}\r\n\t */\r\n\tpublic line: Polyspline;\r\n\r\n\t/**\r\n\t * A related data item.\r\n\t *\r\n\t * @type {MapSplineSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapSplineSeriesDataItem;\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t *\r\n\t * @type {MapSplineSeries}\r\n\t */\r\n\tpublic series: MapSplineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapSpline\";\r\n\r\n\t\t// Create a spline\r\n\t\tthis.line = new Polyspline();\r\n\t\tthis.line.tensionX = 0.8;\r\n\t\tthis.line.tensionY = 0.8;\r\n\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ShortestDistance = true is not supported by MapSpline, only MapLine does support it\r\n\t * @default false\r\n\t * @param {boolean}  value\r\n\t * @todo: review description\r\n\t */\r\n\tpublic get shortestDistance(): boolean {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tpublic set shortestDistance(value: boolean) {\r\n\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapSpline\"] = MapSpline;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapSpline.ts","/**\r\n * Map arched line module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapLine, IMapLineProperties, IMapLineAdapters, IMapLineEvents } from \"./MapLine\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Polyarc } from \"../../core/elements/Polyarc\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { MapArcSeries } from \"./MapArcSeries\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapArc]].\r\n */\r\nexport interface IMapArcProperties extends IMapLineProperties { }\r\n\r\n/**\r\n * Defines events for [[MapArc]].\r\n */\r\nexport interface IMapArcEvents extends IMapLineEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapArc]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapArcAdapters extends IMapLineAdapters, IMapArcProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw an arched line on the map.\r\n *\r\n * @see {@link IMapArcEvents} for a list of available events\r\n * @see {@link IMapArcAdapters} for a list of available Adapters\r\n */\r\nexport class MapArc extends MapLine {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IMapArcProperties}\r\n\t */\r\n\tpublic _properties!: IMapArcProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IMapArcAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapArcAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapArcEvents}\r\n\t */\r\n\tpublic _events!: IMapArcEvents;\r\n\r\n\t/**\r\n\t * A visual element.\r\n\t *\r\n\t * @type {Polyarc}\r\n\t */\r\n\tpublic line: Polyarc;\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t *\r\n\t * @type {MapArcSeries}\r\n\t */\r\n\tpublic series: MapArcSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapArc\";\r\n\r\n\t\t// Create a line\r\n\t\tthis.line = new Polyarc();\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ShortestDistance = true is not supported by MapArc, only MapLine does support it\r\n\t * @default false\r\n\t * @param {boolean}  value\r\n\t * @todo: review description\r\n\t */\r\n\tpublic get shortestDistance(): boolean {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tpublic set shortestDistance(value: boolean) {\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapArc\"] = MapArc;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapArc.ts","/**\r\n * Zoom control module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Button } from \"../../core/elements/Button\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { keyboard } from \"../../core/utils/Keyboard\";\r\nimport { getInteraction } from \"../../core/interaction/Interaction\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ZoomControl]].\r\n */\r\nexport interface IZoomControlProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[ZoomControl]].\r\n */\r\nexport interface IZoomControlEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ZoomControl]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IZoomControlAdapters extends IContainerAdapters, IZoomControlProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a control for zooming the map.\r\n *\r\n * @see {@link IZoomControlEvents} for a list of available events\r\n * @see {@link IZoomControlAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ZoomControl extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IZoomControlProperties}\r\n\t */\r\n\tpublic _properties!: IZoomControlProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IZoomControlAdapters}\r\n\t */\r\n\tpublic _adapter!: IZoomControlAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IZoomControlEvents}\r\n\t */\r\n\tpublic _events!: IZoomControlEvents;\r\n\r\n\t/**\r\n\t * Zoom in button element.\r\n\t *\r\n\t * @type {Button}\r\n\t */\r\n\tpublic plusButton: Button;\r\n\r\n\t/**\r\n\t * Zoom out button element.\r\n\t *\r\n\t * @type {Button}\r\n\t */\r\n\tpublic minusButton: Button;\r\n\r\n\t/**\r\n\t * A zoom slider background element.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic slider: Container;\r\n\r\n\t/**\r\n\t * A zoom slider thumb element.\r\n\t * @type {Button}\r\n\t */\r\n\tpublic thumb: Button;\r\n\r\n\t/**\r\n\t * A target map.\r\n\t *\r\n\t * @type {MutableValueDisposer<MapChart>}\r\n\t */\r\n\tprotected _chart: MutableValueDisposer<MapChart> = new MutableValueDisposer<MapChart>();\r\n\r\n\t/**\r\n\t * A type to use for the background element for zoom control.\r\n\t *\r\n\t * @type {RoundedRectangle}\r\n\t */\r\n\tpublic _background: RoundedRectangle;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ZoomControl\";\r\n\r\n\t\tthis.align = \"right\";\r\n\t\tthis.valign = \"bottom\";\r\n\r\n\t\tthis.layout = \"vertical\";\r\n\t\tthis.padding(5, 5, 5, 5);\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet plusButton: Button = this.createChild(Button);\r\n\t\tplusButton.shouldClone = false;\r\n\t\tplusButton.label.text = \"+\";\r\n\t\tplusButton.width = percent(100);\r\n\t\tplusButton.padding(5, 5, 5, 5);\r\n\t\tplusButton.fontFamily = \"Verdana\";\r\n\t\tthis.plusButton = plusButton;\r\n\r\n\t\tlet slider: Container = this.createChild(Container);\r\n\t\tslider.shouldClone = false;\r\n\t\tslider.width = percent(100);\r\n\t\tslider.background.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tslider.background.fillOpacity = 0.05;\r\n\t\tslider.background.events.on(\"hit\", this.handleBackgroundClick, this, false);\r\n\t\tslider.events.on(\"sizechanged\", this.updateThumbSize, this, false);\r\n\t\tthis.slider = slider;\r\n\r\n\t\tlet thumb: Button = slider.createChild(Button);\r\n\t\tthumb.shouldClone = false;\r\n\t\tthumb.padding(0, 0, 0, 0);\r\n\t\tthumb.draggable = true;\r\n\t\tthumb.events.on(\"drag\", this.handleThumbDrag, this, false);\r\n\t\tthis.thumb = thumb;\r\n\r\n\t\tlet minusButton: Button = this.createChild(Button);\r\n\t\tminusButton.shouldClone = false;\r\n\t\tminusButton.label.text = \"-\";\r\n\t\tminusButton.padding(5, 5, 5, 5);\r\n\t\tminusButton.fontFamily = \"Verdana\";\r\n\t\tthis.minusButton = minusButton;\r\n\r\n\t\t// Set roles\r\n\t\tthis.thumb.role = \"slider\";\r\n\t\tthis.thumb.readerLive = \"polite\";\r\n\r\n\t\t// Set reader text\r\n\t\tthis.thumb.readerTitle = this.language.translate(\"Use arrow keys to zoom in and out\");\r\n\t\tthis.minusButton.readerTitle = this.language.translate(\"Press ENTER to zoom in\");\r\n\t\tthis.plusButton.readerTitle = this.language.translate(\"Press ENTER to zoom out\");\r\n\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.events.on(\"propertychanged\", (event) => {\r\n\t\t\tif (event.property == \"layout\") {\r\n\t\t\t\tthis.fixLayout();\r\n\t\t\t}\r\n\t\t}, undefined, false);\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.fixLayout();\r\n\t}\r\n\r\n\tprotected fixLayout() {\r\n\t\tif (this.layout == \"vertical\") {\r\n\t\t\tthis.width = 40;\r\n\t\t\tthis.height = undefined;\r\n\t\t\tthis.minusButton.width = percent(100);\r\n\t\t\tthis.thumb.width = percent(100);\r\n\t\t\tthis.plusButton.width = percent(100);\r\n\t\t\tthis.slider.width = percent(100);\r\n\t\t\tthis.minusButton.marginTop = 1;\r\n\t\t\tthis.plusButton.marginBottom = 2;\r\n\t\t\tthis.slider.height = 0;\r\n\t\t\tthis.minusButton.toFront();\r\n\t\t\tthis.plusButton.toBack();\r\n\t\t\tthis.thumb.minX = 0;\r\n\t\t\tthis.thumb.maxX = 0;\r\n\t\t\tthis.thumb.minY = 0;\r\n\t\t}\r\n\t\telse if (this.layout == \"horizontal\") {\r\n\t\t\tthis.thumb.minX = 0;\r\n\t\t\tthis.thumb.minY = 0;\r\n\t\t\tthis.thumb.maxY = 0;\r\n\t\t\tthis.height = 40;\r\n\t\t\tthis.width = undefined;\r\n\t\t\tthis.minusButton.height = percent(100);\r\n\t\t\tthis.minusButton.width = 30;\r\n\t\t\tthis.thumb.height = percent(100);\r\n\t\t\tthis.thumb.width = undefined;\r\n\t\t\tthis.plusButton.height = percent(100);\r\n\t\t\tthis.plusButton.width = 30;\r\n\t\t\tthis.slider.height = percent(100);\r\n\t\t\tthis.slider.width = 0;\r\n\t\t\tthis.minusButton.marginLeft = 2;\r\n\t\t\tthis.plusButton.marginRight = 2;\r\n\t\t\tthis.minusButton.toBack();\r\n\t\t\tthis.plusButton.toFront();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Handles zoom operation after clicking on the slider background.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"hit\"]}  event  Event\r\n\t */\r\n\tpublic handleBackgroundClick(event: AMEvent<Sprite, ISpriteEvents>[\"hit\"]): void {\r\n\t\tlet sprite: Sprite = event.target;\r\n\t\tlet y: number = event.spritePoint.y;\r\n\t\tlet chart: MapChart = this.chart;\r\n\r\n\t\tlet maxPower: number = Math.log(chart.maxZoomLevel) / Math.LN2;\r\n\t\tlet minPower: number = Math.log(chart.minZoomLevel) / Math.LN2;\r\n\r\n\t\tlet power: number = (sprite.pixelHeight - y) / sprite.pixelHeight * (minPower + (maxPower - minPower));\r\n\t\tlet zoomLevel: number = Math.pow(2, power);\r\n\t\tchart.zoomToGeoPoint(chart.zoomGeoPoint, zoomLevel);\r\n\t}\r\n\r\n\t/**\r\n\t * A main chart/map that this zoom control is for.\r\n\t *\r\n\t * @param {MapChart}  chart  Map/chart\r\n\t */\r\n\tpublic set chart(chart: MapChart) {\r\n\t\tthis._chart.set(chart, new MultiDisposer([\r\n\t\t\tchart.events.on(\"maxsizechanged\", this.updateThumbSize, this, false),\r\n\t\t\tchart.events.on(\"zoomlevelchanged\", this.updateThumb, this, false),\r\n\t\t\t\r\n\t\t\tthis.minusButton.events.on(\"hit\", () => { chart.zoomOut(chart.zoomGeoPoint) }, chart, false),\r\n\r\n\t\t\tgetInteraction().body.events.on(\"keyup\", (ev) => {\r\n\t\t\t\tif (this.topParent.hasFocused) {\r\n\t\t\t\t\tif (keyboard.isKey(ev.event, \"enter\")) {\r\n\t\t\t\t\t\tif (this.minusButton.isFocused) {\r\n\t\t\t\t\t\t\tchart.zoomOut()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (this.plusButton.isFocused) {\r\n\t\t\t\t\t\t\tchart.zoomIn()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (keyboard.isKey(ev.event, \"plus\")) {\r\n\t\t\t\t\t\tchart.zoomIn();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (keyboard.isKey(ev.event, \"minus\")) {\r\n\t\t\t\t\t\tchart.zoomOut();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}, chart),\r\n\t\t\tthis.plusButton.events.on(\"hit\", () => { chart.zoomIn(chart.zoomGeoPoint) }, chart, false)\r\n\t\t]));\r\n\t}\r\n\r\n\t/**\r\n\t * @return {MapChart} Map/chart\r\n\t */\r\n\tpublic get chart(): MapChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the slider's thumb size based on the available zoom space.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateThumbSize(): void {\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\tlet slider: Container = this.slider;\r\n\t\t\tlet thumb: Button = this.thumb;\r\n\t\t\tif (this.layout == \"vertical\") {\r\n\t\t\t\tthumb.minHeight = Math.min(this.slider.pixelHeight, 20);\r\n\r\n\t\t\t\tthumb.height = slider.pixelHeight / this.stepCount;\r\n\t\t\t\tthumb.maxY = slider.pixelHeight - thumb.pixelHeight;\r\n\r\n\t\t\t\tif (thumb.pixelHeight <= 1) {\r\n\t\t\t\t\tthumb.visible = false;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthumb.visible = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthumb.minWidth = Math.min(this.slider.pixelWidth, 20);\r\n\t\t\t\tthumb.width = slider.pixelWidth / this.stepCount;\r\n\t\t\t\tthumb.maxX = slider.pixelWidth - thumb.pixelWidth;\r\n\r\n\t\t\t\tif (thumb.pixelWidth <= 1) {\r\n\t\t\t\t\tthumb.visible = false;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthumb.visible = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates thumb according to current zoom position from map.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateThumb(): void {\r\n\t\tlet slider: Container = this.slider;\r\n\t\tlet chart: MapChart = this.chart;\r\n\t\tlet thumb: Button = this.thumb;\r\n\r\n\t\tif (!thumb.isDown) {\r\n\t\t\tlet step: number = (Math.log(chart.zoomLevel) - Math.log(this.chart.minZoomLevel)) / Math.LN2;\r\n\r\n\t\t\tif (this.layout == \"vertical\") {\r\n\t\t\t\tthumb.y = slider.pixelHeight - (slider.pixelHeight - thumb.pixelHeight) * step / this.stepCount - thumb.pixelHeight;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthumb.x = slider.pixelWidth * step / this.stepCount;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the actual map when slider position changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleThumbDrag(): void {\r\n\t\tlet slider: Container = this.slider;\r\n\t\tlet chart: MapChart = this.chart;\r\n\t\tlet thumb: Button = this.thumb;\r\n\t\tlet step: number;\r\n\r\n\t\tlet minStep = Math.log(this.chart.minZoomLevel) / Math.LN2;\r\n\r\n\t\tif (this.layout == \"vertical\") {\r\n\t\t\tstep = this.stepCount * (slider.pixelHeight - thumb.pixelY - thumb.pixelHeight) / (slider.pixelHeight - thumb.pixelHeight);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstep = this.stepCount * thumb.pixelX / slider.pixelWidth;\r\n\t\t}\r\n\t\tstep = minStep + step;\r\n\r\n\t\tlet zoomLevel: number = Math.pow(2, step);\r\n\t\tchart.zoomToGeoPoint(undefined, zoomLevel, false, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the step countfor the slider grid according to map's min and max\r\n\t * zoom level settings.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Step count\r\n\t */\r\n\tpublic get stepCount(): number {\r\n\t\treturn Math.log(this.chart.maxZoomLevel) / Math.LN2 - Math.log(this.chart.minZoomLevel) / Math.LN2;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a background element for slider control.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {this} Background\r\n\t */\r\n\tpublic createBackground(): this[\"_background\"] {\r\n\t\treturn new RoundedRectangle();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ZoomControl\"] = ZoomControl;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/ZoomControl.ts","import * as m from \"../es2015/maps\";\nwindow.am4maps = m;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./maps.js\n// module id = 551\n// module chunks = 5","/**\n * Duplicated\n */\nexport { LegendDataItem, LegendPosition, ILegendDataFields, ILegendProperties, ILegendEvents, ILegendAdapters, Legend, LegendSettings } from \"./.internal/charts/Legend\";\nexport { IHeatLegendProperties, IHeatLegendEvents, IHeatLegendAdapters, HeatLegend } from \"./.internal/charts/elements/HeatLegend\";\n\n/**\n * Maps\n */\nexport { MapChartDataItem, IMapPolygonDataObject, MapLineType, IMapLineDataObject, IMapImageDataObject, IMapDataObject, IMapChartDataFields, IMapChartProperties, IMapChartEvents, IMapChartAdapters, MapChart } from \"./.internal/charts/types/MapChart\";\nexport { MapSeriesDataItem, GEOJSONGeometry, IMapSeriesDataFields, IMapSeriesProperties, IMapSeriesEvents, IMapSeriesAdapters, MapSeries } from \"./.internal/charts/map/MapSeries\";\nexport { IMapObjectProperties, IMapObjectEvents, IMapObjectAdapters, MapObject } from \"./.internal/charts/map/MapObject\";\nexport { IMapPolygonProperties, IMapPolygonEvents, IMapPolygonAdapters, MapPolygon } from \"./.internal/charts/map/MapPolygon\";\nexport { IMapImageProperties, IMapImageEvents, IMapImageAdapters, MapImage } from \"./.internal/charts/map/MapImage\";\nexport { IMapLineProperties, IMapLineEvents, IMapLineAdapters, MapLine } from \"./.internal/charts/map/MapLine\";\nexport { IMapSplineProperties, IMapSplineEvents, IMapSplineAdapters, MapSpline } from \"./.internal/charts/map/MapSpline\";\nexport { IMapArcProperties, IMapArcEvents, IMapArcAdapters, MapArc } from \"./.internal/charts/map/MapArc\";\nexport { MapPolygonSeriesDataItem, IMapPolygonSeriesDataFields, IMapPolygonSeriesProperties, IMapPolygonSeriesEvents, IMapPolygonSeriesAdapters, MapPolygonSeries } from \"./.internal/charts/map/MapPolygonSeries\";\nexport { MapLineSeriesDataItem, IMapLineSeriesDataFields, IMapLineSeriesProperties, IMapLineSeriesEvents, IMapLineSeriesAdapters, MapLineSeries } from \"./.internal/charts/map/MapLineSeries\";\nexport { MapSplineSeriesDataItem, IMapSplineSeriesDataFields, IMapSplineSeriesProperties, IMapSplineSeriesEvents, IMapSplineSeriesAdapters, MapSplineSeries } from \"./.internal/charts/map/MapSplineSeries\";\nexport { MapImageSeriesDataItem, IMapImageSeriesDataFields, IMapImageSeriesProperties, IMapImageSeriesEvents, IMapImageSeriesAdapters, MapImageSeries } from \"./.internal/charts/map/MapImageSeries\";\nexport { MapArcSeriesDataItem, IMapArcSeriesDataFields, IMapArcSeriesProperties, IMapArcSeriesEvents, IMapArcSeriesAdapters, MapArcSeries } from \"./.internal/charts/map/MapArcSeries\";\nexport { multiPolygonToGeo, multiLineToGeo, multiPointToGeo, pointToGeo } from \"./.internal/charts/map/MapUtils\";\nexport { IZoomControlProperties, IZoomControlEvents, IZoomControlAdapters, ZoomControl } from \"./.internal/charts/map/ZoomControl\";\nexport { ISmallMapProperties, ISmallMapEvents, ISmallMapAdapters, SmallMap } from \"./.internal/charts/map/SmallMap\";\n\n/**\n * Elements: projections\n */\nexport { Projection } from \"./.internal/charts/map/projections/Projection\";\nimport * as projections from \"./.internal/charts/map/projections\";\nexport { projections };\nimport * as geo from \"./.internal/charts/map/Geo\";\nexport { geo };\n\n\n\n// WEBPACK FOOTER //\n// ../../src/maps.ts","/**\r\n * Map module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, ISerialChartProperties, ISerialChartDataFields, ISerialChartAdapters, ISerialChartEvents, SerialChartDataItem } from \"./SerialChart\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IDisposer, MultiDisposer, MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { MapSeries } from \"../map/MapSeries\";\r\nimport { MapObject } from \"../map/MapObject\";\r\nimport { MapImage } from \"../map/MapImage\";\r\nimport { MapPolygon } from \"../map/MapPolygon\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { DataSource } from \"../../core/data/DataSource\";\r\nimport { Projection } from \"../map/projections/Projection\";\r\nimport { ZoomControl } from \"../map/ZoomControl\";\r\nimport { Ordering } from \"../../core/utils/Order\";\r\nimport { SmallMap } from \"../map/SmallMap\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { keyboard } from \"../../core/utils/Keyboard\";\r\nimport { getInteraction } from \"../../core/interaction/Interaction\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $ease from \"../../core/utils/Ease\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $geo from \"../map/Geo\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class MapChartDataItem extends SerialChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {MapChart}\r\n\t */\r\n\tpublic _component!: MapChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines interface for a map polygon object.\r\n */\r\nexport interface IMapPolygonDataObject {\r\n\r\n\t/**\r\n\t * A unique id of the object.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tid?: string;\r\n\r\n\t/**\r\n\t * Numeric value for heat-map scenarios.\r\n\t *\r\n\t * @type {[type]}\r\n\t */\r\n\tvalue?: number;\r\n\r\n\t/**\r\n\t * Single polygon information in X/Y coordinates.\r\n\t */\r\n\tpolygon?: number[][][];\r\n\r\n\t/**\r\n\t * Multi-part polygon information in X/Y coordinates.\r\n\t */\r\n\tmultiPolygon?: number[][][][];\r\n\r\n\t/**\r\n\t * Single polygon information in lat/long geo-coordinates.\r\n\t */\r\n\tgeoPolygon?: IGeoPoint[][];\r\n\r\n\t/**\r\n\t * Multi-part polygon information in lat/long geo-coordinates.\r\n\t */\r\n\tmultiGeoPolygon?: IGeoPoint[][][];\r\n\r\n}\r\n\r\n/**\r\n * Defines types of map line.\r\n *\r\n * @type {string}\r\n */\r\nexport type MapLineType = \"line\" | \"arc\" | \"spline\" | \"realTrajectory\";\r\n\r\n/**\r\n * Defines interface for the map line object.\r\n */\r\nexport interface IMapLineDataObject {\r\n\r\n\t/**\r\n\t * A unique id of the object.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tid?: string;\r\n\r\n\t/**\r\n\t * Numeric value for heat-map scenarios.\r\n\t *\r\n\t * @type {[type]}\r\n\t */\r\n\tvalue?: number;\r\n\r\n\t/**\r\n\t * Single line information in X/Y coordinates.\r\n\t */\r\n\tlineString?: number[][];\r\n\r\n\t/**\r\n\t * Multi-part line information in X/Y coordinates.\r\n\t */\r\n\tmultiLineString?: number[][][];\r\n\r\n\t/**\r\n\t * Single line information in lat/long geo-coordinates.\r\n\t */\r\n\tgeoLineString?: IGeoPoint[];\r\n\r\n\t/**\r\n\t * Multi-part line information in lat/long geo-coordinates.\r\n\t */\r\n\tmultiGeoLineString?: IGeoPoint[][];\r\n\r\n}\r\n\r\n/**\r\n * Defines interface for a map image (market) object.\r\n */\r\nexport interface IMapImageDataObject {\r\n\r\n\t/**\r\n\t * A unique id of the object.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tid?: string;\r\n\r\n\t/**\r\n\t * Numeric value for heat-map scenarios.\r\n\t *\r\n\t * @type {[type]}\r\n\t */\r\n\tvalue?: number;\r\n\r\n\t/**\r\n\t * Image position information in X/Y coordinates.\r\n\t */\r\n\tpoint?: number[];\r\n\r\n\t/**\r\n\t * Multi-image position information in X/Y coordinates.\r\n\t */\r\n\tmultiPoint?: number[][];\r\n\r\n\t/**\r\n\t * Image position information in lat/long geo-coordinates.\r\n\t */\r\n\tgeoPoint?: IGeoPoint;\r\n\r\n\t/**\r\n\t * Multi-image position information in lat/long geo-coordinates.\r\n\t */\r\n\tmultiGeoPoint?: IGeoPoint[];\r\n\r\n}\r\n\r\n/**\r\n * Defines type suitable for all map objects.\r\n *\r\n * @type {IMapPolygonDataObject | IMapLineDataObject}\r\n */\r\nexport type IMapDataObject = IMapPolygonDataObject | IMapLineDataObject;\r\n\r\n/**\r\n * Defines data fields for [[MapChart]].\r\n */\r\nexport interface IMapChartDataFields extends ISerialChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[MapChart]].\r\n */\r\nexport interface IMapChartProperties extends ISerialChartProperties {\r\n\r\n\t/**\r\n\t * Projection to be used when drawing the map.\r\n\t *\r\n\t * @type {Projection}\r\n\t */\r\n\tprojection?: Projection;\r\n\r\n\t/**\r\n\t * Degrees to shift map center by.\r\n\t *\r\n\t * E.g. if set to -160, the longitude 20 will become a new center, creating\r\n\t * a Pacific-centered map.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tdeltaLongitude?: number;\r\n\r\n\tmaxPanOut?: number;\r\n\r\n\thomeGeoPoint?: IGeoPoint;\r\n\r\n\thomeZoomLevel?: number;\r\n\r\n\t/**\r\n\t * Specifies what should chart do if when mouse wheel is rotated.\r\n\t */\r\n\tmouseWheelBehavior?: \"zoom\" | \"none\";\r\n}\r\n\r\n/**\r\n * Defines events for [[MapChart]].\r\n */\r\nexport interface IMapChartEvents extends ISerialChartEvents {\r\n\r\n\t/**\r\n\t * Invoked when map is zoomed in or out.\r\n\t */\r\n\tzoomlevelchanged: {};\r\n\r\n\t/**\r\n\t * Invoked when map is panned. (moved)\r\n\t */\r\n\tmappositionchanged: {};\r\n\r\n\t/**\r\n\t * Invoked when scale ratio is changed, e.g when the whole map area is\r\n\t * resized and the map needs to be resized to fit it, without changing\r\n\t * zoom level.\r\n\t */\r\n\tscaleratiochanged: {};\r\n\r\n}\r\n\r\n/**\r\n * Defines adapters for [[MapChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapChartAdapters extends ISerialChartAdapters, IMapChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a map.\r\n *\r\n * @see {@link IMapChartEvents} for a list of available Events\r\n * @see {@link IMapChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/map/} for documentation\r\n */\r\nexport class MapChart extends SerialChart {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t *\r\n\t * @type {IMapChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IMapChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IMapChartProperties}\r\n\t */\r\n\tpublic _properties!: IMapChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IMapChartAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapChartEvents}\r\n\t */\r\n\tpublic _events!: IMapChartEvents;\r\n\r\n\t/**\r\n\t * The East-most longitude point of the map.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic east: number;\r\n\r\n\t/**\r\n\t * The West-most longitude point of the map.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic west: number;\r\n\r\n\t/**\r\n\t * The South-most latitude point of the map.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic south: number;\r\n\r\n\t/**\r\n\t * The North-most latitude point of the map.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic north: number;\r\n\r\n\t/**\r\n\t * A ratio to be used when scaling the map shapes.\r\n\t *\r\n\t * @readonly\r\n\t * @type {number}\r\n\t */\r\n\tpublic scaleRatio: number = 1;\r\n\r\n\t/**\r\n\t * A screen point of the map's center.\r\n\t *\r\n\t * @readonly\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic centerPoint: IPoint;\r\n\r\n\t/**\r\n\t * A screen point of the map's left.\r\n\t *\r\n\t * @readonly\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic westPoint: IPoint;\r\n\r\n\t/**\r\n\t * A screen point of the map's right.\r\n\t *\r\n\t * @readonly\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic eastPoint: IPoint;\r\n\r\n\t/**\r\n\t * A screen point of the map's top.\r\n\t *\r\n\t * @readonly\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic northPoint: IPoint;\r\n\r\n\t/**\r\n\t * A screen point of the map's bottom.\r\n\t *\r\n\t * @readonly\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic southPoint: IPoint;\r\n\r\n\t/**\r\n\t * Width of the actual map objects (px).\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic seriesWidth: number;\r\n\r\n\t/**\r\n\t * Height of the actual map objects (px).\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic seriesHeight: number;\r\n\r\n\t/**\r\n\t * Map data in GeoJSON format.\r\n\t *\r\n\t * @see {@link http://geojson.org/} GeoJSON official specification\r\n\t * @type {Object}\r\n\t */\r\n\tprotected _geodata: Object;\r\n\r\n\t/**\r\n\t * A reference to a [[ZoomControl]] instance.\r\n\t *\r\n\t * @type {ZoomControl}\r\n\t */\r\n\tprotected _zoomControl: ZoomControl;\r\n\r\n\t/**\r\n\t * A reference to a [[SmallMap]] control instance.\r\n\t *\r\n\t * @type {SmallMap}\r\n\t */\r\n\tprotected _smallMap: SmallMap;\r\n\r\n\t/**\r\n\t * [_zoomGeoPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {IGeoPoint}\r\n\t */\r\n\tprotected _zoomGeoPoint: IGeoPoint;\r\n\r\n\t/**\r\n\t * Default duration of zoom animations (ms).\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic zoomDuration: number = 1000;\r\n\r\n\t/**\r\n\t * Default zooming animation easing function.\r\n\t *\r\n\t * @type {function}\r\n\t */\r\n\tpublic zoomEasing: (value: number) => number = $ease.cubicOut;\r\n\r\n\t/**\r\n\t * Smallest available zoom level. The map will not allow to zoom out past\r\n\t * this setting.\r\n\t *\r\n\t * NOTE: Should be power of 2.\r\n\t *\r\n\t * @defautl 1\r\n\t * @type {number}\r\n\t */\r\n\tpublic minZoomLevel: number = 1;\r\n\r\n\t/**\r\n\t * Biggest available zoom level. The map will not allow to zoom in past\r\n\t * this setting.\r\n\t *\r\n\t * NOTE: Should be power of 2.\r\n\t *\r\n\t * @default 32\r\n\t * @type {number}\r\n\t */\r\n\tpublic maxZoomLevel: number = 32;\r\n\r\n\t/**\r\n\t * [_prevZoomLevel description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _prevZoomLevel: number;\r\n\r\n\t/**\r\n\t * [_prevZoomGeoPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {IGeoPoint}\r\n\t */\r\n\tprotected _prevZoomGeoPoint: IGeoPoint = { latitude: 0, longitude: 0 };\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @type {MapSeries}\r\n\t */\r\n\tpublic _seriesType: MapSeries;\r\n\r\n\t/**\r\n\t * A reference to currently playing animation, e.g. zooming.\r\n\t *\r\n\t * @type {Animation}\r\n\t */\r\n\tprotected _mapAnimation: Animation;\r\n\r\n\tprotected _mouseWheelDisposer: IDisposer;\r\n\r\n\tprotected _zoomGeoPointReal: IGeoPoint;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapChart\";\r\n\r\n\t\t// Set default projection\r\n\t\tthis.projection = new Projection();\r\n\r\n\t\tthis.deltaLongitude = 0;\r\n\t\tthis.maxPanOut = 0.7;\r\n\t\tthis.homeZoomLevel = 1;\r\n\r\n\t\t// Set padding\r\n\t\tthis.padding(0, 0, 0, 0);\r\n\r\n\t\t// so that the map would render in a hidden div too\r\n\t\tthis.minWidth = 10;\r\n\t\tthis.minHeight = 10;\r\n\r\n\t\tthis.events.once(\"inited\", () => {\r\n\t\t\tthis.goHome(0);\r\n\t\t});\r\n\r\n\t\t// Create a container for map series\r\n\t\tlet seriesContainer = this.seriesContainer;\r\n\t\tseriesContainer.draggable = true;\r\n\t\tseriesContainer.inert = true;\r\n\t\tseriesContainer.resizable = true;\r\n\t\tseriesContainer.events.on(\"transformed\", this.handleMapTransform, this, false);\r\n\t\tseriesContainer.events.on(\"doublehit\", this.handleDoubleHit, this, false);\r\n\t\tseriesContainer.events.on(\"drag\", this.handleDrag, this, false);\r\n\t\tseriesContainer.zIndex = 0;\r\n\t\tseriesContainer.background.fillOpacity = 0;\r\n\r\n\t\t// Set up events\r\n\t\t//this.events.on(\"validated\", this.updateExtremes, this);\r\n\t\tthis.events.on(\"datavalidated\", this.updateExtremes, this, false);\r\n\r\n\t\t// Set up main chart container, e.g. set backgrounds and events to monitor\r\n\t\t// size changes, etc.\r\n\t\tlet chartContainer = this.chartContainer;\r\n\t\tthis._disposers.push(seriesContainer.events.on(\"maxsizechanged\", () => {\r\n\t\t\tif (this.inited) {\r\n\t\t\t\tif (this._mapAnimation) {\r\n\t\t\t\t\tthis._mapAnimation.stop();\r\n\t\t\t\t}\r\n\t\t\t\tthis.updateScaleRatio();\r\n\t\t\t\tthis.zoomToGeoPoint(this._zoomGeoPointReal, this.zoomLevel, true, 0);\r\n\r\n\t\t\t\tthis.series.each((series) => {\r\n\t\t\t\t\tseries.updateTooltipBounds();\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}, undefined, false));\r\n\r\n\t\tlet chartContainerBg = chartContainer.background;\r\n\t\tchartContainerBg.fillOpacity = 0;\r\n\t\tchartContainerBg.events.on(\"down\", (e) => { this.seriesContainer.dragStart(e.target.interactions.downPointers.getIndex(0)); }, this);\r\n\t\tchartContainerBg.events.on(\"up\", (e) => { this.seriesContainer.dragStop() }, this);\r\n\t\tchartContainerBg.events.on(\"doublehit\", this.handleDoubleHit, this);\r\n\t\tchartContainerBg.focusable = true;\r\n\r\n\t\tchartContainer.events.on(\"down\", this.handleMapDown, this, false);\r\n\r\n\t\t// Add description to background\r\n\t\tthis.background.fillOpacity = 0;\r\n\t\tthis.background.readerTitle = this.language.translate(\"Use plus and minus keys on your keyboard to zoom in and out\");\r\n\r\n\t\t// Add keyboard events for panning\r\n\t\tthis._disposers.push(getInteraction().body.events.on(\"keyup\", (ev) => {\r\n\t\t\tif (this.topParent.hasFocused && (!this._zoomControl || !this._zoomControl.thumb.isFocused)) {\r\n\t\t\t\tswitch (keyboard.getEventKey(ev.event)) {\r\n\t\t\t\t\tcase \"up\":\r\n\t\t\t\t\t\tthis.pan({ x: 0, y: 0.1 });\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"down\":\r\n\t\t\t\t\t\tthis.pan({ x: 0, y: -0.1 });\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"left\":\r\n\t\t\t\t\t\tthis.pan({ x: 0.1, y: 0 });\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"right\":\r\n\t\t\t\t\t\tthis.pan({ x: -0.1, y: 0 });\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}, this));\r\n\r\n\t\tthis.mouseWheelBehavior = \"zoom\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Prevents map to be dragged out of the container area\r\n\t * @ignore\r\n\t */\r\n\tprotected handleDrag() {\r\n\t\t// not good doing it with adapters.\r\n\t\tlet ww = this.seriesWidth * this.zoomLevel * this.scaleRatio;\r\n\t\tlet hh = this.seriesHeight * this.zoomLevel * this.scaleRatio;\r\n\t\tlet x = this.seriesContainer.pixelX;\r\n\t\tlet y = this.seriesContainer.pixelY;\r\n\r\n\t\tlet maxPanOut = this.maxPanOut;\r\n\r\n\t\tlet minX = Math.min(this.maxWidth * (1 - maxPanOut) - ww / 2, -ww * (maxPanOut - 0.5));\r\n\t\tif (x < minX) {\r\n\t\t\tx = minX;\r\n\t\t}\r\n\r\n\t\tlet maxX = Math.max(this.maxWidth * maxPanOut + ww / 2, this.maxWidth + ww * (maxPanOut - 0.5));\r\n\t\tif (x > maxX) {\r\n\t\t\tx = maxX;\r\n\t\t}\r\n\r\n\r\n\t\tlet minY = Math.min(this.maxHeight * (1 - maxPanOut) - hh / 2, -hh * (maxPanOut - 0.5));\r\n\t\tif (y < minY) {\r\n\t\t\ty = minY;\r\n\t\t}\r\n\r\n\t\tlet maxY = Math.max(this.maxHeight * maxPanOut + hh / 2, this.maxHeight + hh * (maxPanOut - 0.5));\r\n\t\tif (y > maxY) {\r\n\t\t\ty = maxY;\r\n\t\t}\r\n\r\n\t\tthis.seriesContainer.moveTo({ x: x, y: y }, undefined, undefined, true);\r\n\r\n\t\tthis._zoomGeoPointReal = this.zoomGeoPoint;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Map\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Handles event when a pointer presses down on the map, e.g. user presses\r\n\t * down mouse or touches the map on a screen.\r\n\t *\r\n\t * Stops all animations currently going on.\r\n\t */\r\n\tprotected handleMapDown(): void {\r\n\t\tif (this._mapAnimation) {\r\n\t\t\tthis._mapAnimation.stop();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Handles the event when user doubleclicks or dooubletaps the map: zooms\r\n\t * in on the reference point.\r\n\t *\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"doublehit\"]}  event  Original event\r\n\t */\r\n\tprotected handleDoubleHit(event: AMEvent<Sprite, ISpriteEvents>[\"doublehit\"]) {\r\n\t\tlet svgPoint: IPoint = $utils.documentPointToSvg(event.point, this.htmlContainer);\r\n\t\tlet geoPoint: IGeoPoint = this.svgPointToGeo(svgPoint);\r\n\t\tthis.zoomIn(geoPoint);\r\n\t}\r\n\r\n\t/**\r\n\t * Handles mouse wheel event, e.g. user rotates mouse wheel while over the\r\n\t * map: zooms in or out depending on the direction of the wheel turn.\r\n\t *\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"wheel\"]}  event  Original event\r\n\t */\r\n\tprotected handleWheel(event: AMEvent<Sprite, ISpriteEvents>[\"wheel\"]) {\r\n\r\n\t\tlet svgPoint: IPoint = $utils.documentPointToSvg(event.point, this.htmlContainer);\r\n\t\tlet geoPoint: IGeoPoint = this.svgPointToGeo(svgPoint);\r\n\r\n\t\tif (event.shift.y < 0) {\r\n\t\t\tthis.zoomIn(geoPoint);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.zoomOut(geoPoint);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Specifies what should chart do if when mouse wheel is rotated.\r\n\t *\r\n\t * @param {\"zoom\" | \"none\"} mouse wheel behavior\r\n\t * @default zoomX\r\n\t */\r\n\tpublic set mouseWheelBehavior(value: \"zoom\" | \"none\") {\r\n\r\n\t\tif (this.setPropertyValue(\"mouseWheelBehavior\", value)) {\r\n\t\t\tif (value != \"none\") {\r\n\t\t\t\tthis._mouseWheelDisposer = this.chartContainer.events.on(\"wheel\", this.handleWheel, this, false);\r\n\t\t\t\tthis._disposers.push(this._mouseWheelDisposer);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this._mouseWheelDisposer) {\r\n\t\t\t\t\tthis._mouseWheelDisposer.dispose();\r\n\t\t\t\t}\r\n\t\t\t\tthis.chartContainer.wheelable = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return { \"zoom\" | \"none\"}  mouse wheel behavior\r\n\t */\r\n\tpublic get mouseWheelBehavior(): \"zoom\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"mouseWheelBehavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * Projection to use for the map.\r\n\t *\r\n\t * Available projections:\r\n\t * * Eckert6\r\n\t * * Mercator\r\n\t * * Miller\r\n\t * * Orthographic\r\n\t *\r\n\t * ```TypeScript\r\n\t * map.projection = new am4maps.projections.Mercator();\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * map.projection = new am4maps.projections.Mercator();\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"projection\": \"Mercator\"\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {Projection}  projection  Projection\r\n\t */\r\n\tpublic set projection(projection: Projection) {\r\n\t\tprojection.deltaLongitude = this.deltaLongitude;\r\n\t\tthis.setPropertyValue(\"projection\", projection, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Projection} Projection\r\n\t */\r\n\tpublic get projection(): Projection {\r\n\t\treturn this.getPropertyValue(\"projection\");\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates the longitudes and latitudes of the most distant points from\r\n\t * the center in all four directions: West, East, North, and South.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateExtremes(): void {\r\n\r\n\t\tthis.west = null;\r\n\t\tthis.east = null;\r\n\t\tthis.north = null;\r\n\t\tthis.south = null;\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif ((this.west > series.west) || !$type.isNumber(this.west)) {\r\n\t\t\t\tthis.west = series.west;\r\n\t\t\t}\r\n\t\t\tif ((this.east < series.east) || !$type.isNumber(this.east)) {\r\n\t\t\t\tthis.east = series.east;\r\n\t\t\t}\r\n\r\n\t\t\tif ((this.north < series.north) || !$type.isNumber(this.north)) {\r\n\t\t\t\tthis.north = series.north;\r\n\t\t\t}\r\n\t\t\tif ((this.south > series.south) || !$type.isNumber(this.south)) {\r\n\t\t\t\tthis.south = series.south;\r\n\t\t\t}\r\n\t\t});\r\n\t\tif ($type.isNumber(this.east) && $type.isNumber(this.north)) {\r\n\t\t\t// must reset\r\n\t\t\tthis.projection.centerPoint = { x: 0, y: 0 };\r\n\t\t\tthis.projection.scale = 1;\r\n\r\n\t\t\t// temporary setting deltaLongitude to 0 in order to measure w/h correctly\r\n\t\t\tlet deltaLongitude = this.projection.deltaLongitude;\r\n\t\t\tthis.projection.deltaLongitude = 0;\r\n\t\t\tlet westPoint: IPoint = this.projection.convert({ longitude: this.west, latitude: (this.south - this.north) / 2 });\r\n\t\t\tlet eastPoint: IPoint = this.projection.convert({ longitude: this.east, latitude: (this.south - this.north) / 2 });\r\n\r\n\t\t\tlet northPoint: IPoint = this.projection.convert({ longitude: (this.east - this.west) / 2, latitude: this.north });\r\n\t\t\tlet southPoint: IPoint = this.projection.convert({ longitude: (this.east - this.west) / 2, latitude: this.south });\r\n\t\t\tthis.projection.deltaLongitude = deltaLongitude;\r\n\r\n\t\t\tthis.projection.centerPoint = { x: westPoint.x + (eastPoint.x - westPoint.x) / 2, y: northPoint.y + (southPoint.y - northPoint.y) / 2 };\r\n\r\n\t\t\tlet scaleRatio: number;\r\n\r\n\t\t\tlet seriesWidth = eastPoint.x - westPoint.x;\r\n\t\t\tlet seriesHeight = southPoint.y - northPoint.y;\r\n\r\n\t\t\tlet vScale: number = this.chartContainer.innerWidth / seriesWidth;\r\n\t\t\tlet hScale: number = this.chartContainer.innerHeight / seriesHeight;\r\n\r\n\t\t\tif (vScale > hScale) {\r\n\t\t\t\tscaleRatio = hScale;\r\n\t\t\t} else {\r\n\t\t\t\tscaleRatio = vScale;\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.isNaN(scaleRatio) || scaleRatio == Infinity) {\r\n\t\t\t\tscaleRatio = 1;\r\n\t\t\t}\r\n\r\n\t\t\tthis.projection.scale = scaleRatio;\r\n\t\t\tthis.seriesWidth = seriesWidth * scaleRatio;\r\n\t\t\tthis.seriesHeight = seriesHeight * scaleRatio;\r\n\r\n\r\n\t\t\tlet northPoint2: IPoint = this.projection.convert({ longitude: (this.east - this.west) / 2, latitude: this.north });\r\n\t\t\tlet westPoint2: IPoint = this.projection.convert({ longitude: this.west, latitude: (this.south - this.north) / 2 });\r\n\r\n\r\n\t\t\t//this.seriesContainer.width = this.seriesWidth; // not good, doesn't resize\r\n\t\t\t//this.seriesContainer.height = this.seriesHeight; // not good, doesn't resize\r\n\t\t\tthis.seriesContainer.definedBBox = { x: westPoint2.x, y: northPoint2.y, width: this.seriesWidth, height:this.seriesHeight};\r\n\r\n\t\t\tthis.updateScaleRatio();\r\n\r\n\t\t\tlet seriesContainer: Container = this.seriesContainer;\r\n\t\t\tlet chartContainer: Container = this.chartContainer;\r\n\r\n\t\t\tseriesContainer.x = chartContainer.pixelWidth / 2;\r\n\t\t\tseriesContainer.y = chartContainer.pixelHeight / 2;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * (Re)calculates a ratio which should be used to scale the actual map so\r\n\t * that it fits perfectly into available space. Helps to avoid redrawing of all the map if container size changes\r\n\t * @ignore\r\n\t */\r\n\tprotected updateScaleRatio(): void {\r\n\t\tlet scaleRatio: number;\r\n\r\n\t\tlet vScale: number = this.chartContainer.innerWidth / this.seriesWidth;\r\n\t\tlet hScale: number = this.chartContainer.innerHeight / this.seriesHeight;\r\n\r\n\t\tif (vScale > hScale) {\r\n\t\t\tscaleRatio = hScale;\r\n\t\t} else {\r\n\t\t\tscaleRatio = vScale;\r\n\t\t}\r\n\r\n\t\tif ($type.isNaN(scaleRatio) || scaleRatio == Infinity) {\r\n\t\t\tscaleRatio = 1;\r\n\t\t}\r\n\r\n\t\tif (scaleRatio != this.scaleRatio) {\r\n\t\t\tthis.scaleRatio = scaleRatio;\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\tseries.scale = this.scaleRatio;\r\n\t\t\t\tseries.updateTooltipBounds();\r\n\t\t\t});\r\n\r\n\t\t\tthis.dispatch(\"scaleratiochanged\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a point within map container to geographical (lat/long)\r\n\t * coordinates.\r\n\t *\r\n\t * @param  {IPoint}     point  Source point\r\n\t * @return {IGeoPoint}         Geo-point\r\n\t */\r\n\tpublic svgPointToGeo(point: IPoint): IGeoPoint {\r\n\t\tlet series: MapSeries = <MapSeries>this.series.getIndex(0);\r\n\t\tif (series) {\r\n\t\t\tlet seriesPoint: IPoint = $utils.svgPointToSprite(point, series);\r\n\t\t\treturn this.seriesPointToGeo(seriesPoint);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts geographical (lat/long) coordinates to an X/Y point within map's\r\n\t * container.\r\n\t *\r\n\t * @param  {IGeoPoint}  point  Source geo-point\r\n\t * @return {IPoint}            Point\r\n\t */\r\n\tpublic geoPointToSVG(point: IGeoPoint): IPoint {\r\n\t\tlet series: MapSeries = <MapSeries>this.series.getIndex(0);\r\n\t\tif (series) {\r\n\t\t\tlet seriesPoint: IPoint = this.geoPointToSeries(point);\r\n\t\t\treturn $utils.spritePointToSvg(seriesPoint, series);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a point (X/Y) within actual objects of the map to geographical\r\n\t * (lat/long) coordinates.\r\n\t *\r\n\t * @param  {IPoint}     point  Source point\r\n\t * @return {IGeoPoint}         Geo-point\r\n\t */\r\n\tpublic seriesPointToGeo(point: IPoint): IGeoPoint {\r\n\t\treturn this.projection.invert(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts geographical (lat/long) coordinates to an X/Y point within\r\n\t * actual elements/objects of the maps.\r\n\t *\r\n\t * @param  {IGeoPoint}  point  Source geo-point\r\n\t * @return {IPoint}            Point\r\n\t */\r\n\tpublic geoPointToSeries(point: IGeoPoint): IPoint {\r\n\t\treturn this.projection.convert(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Map data in GeoJSON format.\r\n\t *\r\n\t * The Map supports the following GeoJSON objects: `Point`, `LineString`,\r\n\t * `Polygon`, `MultiPoint`, `MultiLineString`, and `MultiPolygon`.\r\n\t *\r\n\t * @see {@link http://geojson.org/} Official GeoJSON format specification\r\n\t * @param {Object} geoJSON GeoJSON data\r\n\t */\r\n\tpublic set geodata(geodata: Object) {\r\n\t\tif (geodata != this._geodata) {\r\n\t\t\tthis._geodata = geodata;\r\n\t\t\tthis.invalidateData();\r\n\r\n\t\t\t$iter.each(this._dataUsers.iterator(), (x) => {\r\n\t\t\t\tx.invalidateData();\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Object} GeoJSON data\r\n\t */\r\n\tpublic get geodata(): Object {\r\n\t\treturn this._geodata;\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the map to particular zoom level and centers on a latitude/longitude\r\n\t * coordinate.\r\n\t *\r\n\t * @param  {IGeoPoint}  point      Center coordinate\r\n\t * @param  {number}     zoomLevel  Zoom level\r\n\t * @param  {boolean}    center     Center on the given coordinate?\r\n\t * @param  {number}     duration   Duration for zoom animation (ms)\r\n\t * @return {Animation}             Zoom animation\r\n\t */\r\n\tpublic zoomToGeoPoint(point: IGeoPoint, zoomLevel: number, center?: boolean, duration?: number): Animation {\r\n\r\n\t\t//let svgPoint: IPoint = $utils.documentPointToSvg(event.point, this.htmlContainer);\r\n\t\t//let geoPoint: IGeoPoint = this.svgPointToGeo(svgPoint);\r\n\r\n\r\n\t\tif (!point) {\r\n\t\t\tpoint = this.zoomGeoPoint;\r\n\t\t}\r\n\r\n\t\tif (!point) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis._zoomGeoPointReal = point;\r\n\r\n\t\tzoomLevel = $math.fitToRange(zoomLevel, this.minZoomLevel, this.maxZoomLevel);\r\n\r\n\t\tlet seriesPoint: IPoint = this.projection.convert(point);\r\n\r\n\t\tlet svgPoint: IPoint = this.geoPointToSVG(point);\r\n\t\tif (center) {\r\n\t\t\tsvgPoint = {\r\n\t\t\t\tx: this.maxWidth / 2,\r\n\t\t\t\ty: this.maxHeight / 2\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(duration)) {\r\n\t\t\tduration = this.zoomDuration;\r\n\t\t}\r\n\r\n\t\tthis._mapAnimation = this.seriesContainer.animate(\r\n\t\t\t[{\r\n\t\t\t\tproperty: \"scale\",\r\n\t\t\t\tto: zoomLevel\r\n\t\t\t}, {\r\n\t\t\t\tproperty: \"x\",\r\n\t\t\t\tto: svgPoint.x - seriesPoint.x * zoomLevel * this.scaleRatio - this.pixelPaddingLeft\r\n\t\t\t}, {\r\n\t\t\t\tproperty: \"y\",\r\n\t\t\t\tto: svgPoint.y - seriesPoint.y * zoomLevel * this.scaleRatio - this.pixelPaddingTop\r\n\t\t\t}], duration, this.zoomEasing);\r\n\r\n\t\tthis._disposers.push(this._mapAnimation.events.on(\"animationended\", () => {\r\n\t\t\tthis._zoomGeoPointReal = this.zoomGeoPoint;\r\n\t\t}))\r\n\r\n\t\tthis.seriesContainer.validatePosition();\r\n\r\n\t\treturn this._mapAnimation;\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the map to a particular map object.\r\n\t *\r\n\t * @param  {MapObject}  mapObject  Target map object\r\n\t * @param  {number}     zoomLevel  Zoom level\r\n\t * @param  {boolean}    center     Center on the given coordinate?\r\n\t * @param  {number}     duration   Duration for zoom animation (ms)\r\n\t * @return {Animation}             Zoom animation\r\n\t */\r\n\tpublic zoomToMapObject(mapObject: MapObject, zoomLevel?: number, center?: boolean, duration?: number): Animation {\r\n\r\n\t\tif (center == undefined) {\r\n\t\t\tcenter = true;\r\n\t\t}\r\n\r\n\t\tif (mapObject instanceof MapImage) {\r\n\t\t\tif ($type.isNaN(zoomLevel)) {\r\n\t\t\t\tzoomLevel = 5;\r\n\t\t\t}\r\n\t\t\treturn this.zoomToGeoPoint({ latitude: mapObject.latitude, longitude: mapObject.longitude }, zoomLevel, center, duration);\r\n\t\t}\r\n\r\n\t\tif (mapObject instanceof MapPolygon) {\r\n\t\t\tlet dataItem = mapObject.dataItem;\r\n\t\t\tif ($type.isNumber(zoomLevel)) {\r\n\t\t\t\treturn this.zoomToGeoPoint({ latitude: mapObject.latitude, longitude: mapObject.longitude }, zoomLevel, center, duration);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn this.zoomToRectangle(dataItem.north, dataItem.east, dataItem.south, dataItem.west, null, center, duration);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the map to a particular viewport.\r\n\t *\r\n\t * The `north`, `east`, `south`, and `west` define boundaries of the\r\n\t * imaginary viewort we want to zoom the map to.\r\n\t *\r\n\t * `level` is not actual zoom level. The map will determine the zoom level\r\n\t * required to accommodated such zoom, and will adjust it by `level` if set.\r\n\t *\r\n\t * @param  {number}     north     Latitude of the North-most boundary\r\n\t * @param  {number}     east      Longitude of the East-most boundary\r\n\t * @param  {number}     south     Latitude of the South-most boundary\r\n\t * @param  {number}     west      Longitude of the West-most boundary\r\n\t * @param  {number}     level     Adjust zoom level\r\n\t * @param  {boolean}    center    Center on the given coordinate?\r\n\t * @param  {number}     duration  Duration for zoom animation (ms)\r\n\t * @return {Animation}            Zoom animation\r\n\t */\r\n\tpublic zoomToRectangle(north: number, east: number, south: number, west: number, level?: number, center?: boolean, duration?: number): Animation {\r\n\t\tif ($type.isNaN(level)) {\r\n\t\t\tlevel = 1;\r\n\t\t}\r\n\r\n\t\tlet zoomLevel = level * Math.min((this.south - this.north) / (south - north), (this.west - this.east) / (west - east));\r\n\r\n\t\treturn this.zoomToGeoPoint({ latitude: north + (south - north) / 2, longitude: west + (east - west) / 2 }, zoomLevel, center, duration);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms in the map, optionally centering on particular latitude/longitude\r\n\t * point.\r\n\t *\r\n\t * @param  {IGeoPoint}  geoPoint  Optional center point\r\n\t * @param  {number}     duration  Duration for zoom animation (ms)\r\n\t * @return {Animation}            Zoom animation\r\n\t */\r\n\tpublic zoomIn(geoPoint?: IGeoPoint, duration?: number): Animation {\r\n\t\treturn this.zoomToGeoPoint(geoPoint, this.zoomLevel * 2, false, duration);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms out the map, optionally centering on particular latitude/longitude\r\n\t * point.\r\n\t *\r\n\t * @param  {IGeoPoint}  geoPoint  Optional center point\r\n\t * @param  {number}     duration  Duration for zoom animation (ms)\r\n\t * @return {Animation}            Zoom animation\r\n\t */\r\n\tpublic zoomOut(geoPoint?: IGeoPoint, duration?: number): Animation {\r\n\t\treturn this.zoomToGeoPoint(geoPoint, this.zoomLevel / 2, false, duration);\r\n\t}\r\n\r\n\t/**\r\n\t * Pans the maps using relative coordinates. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * {\r\n\t *   x: 0.1,\r\n\t *   y: -0.1\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * The above will move the map by 10% to the right, and by 10% upwards.\r\n\t *\r\n\t * @param {IPoint}  shift     Vertical and horizontal shift\r\n\t * @param {number}  duration  Pan animation duration (ms)\r\n\t */\r\n\tpublic pan(shift: IPoint, duration?: number): void {\r\n\t\tlet point = this.geoPointToSVG(this.zoomGeoPoint);\r\n\t\tpoint.x += this.pixelWidth * shift.x;\r\n\t\tpoint.y += this.pixelHeight * shift.y;\r\n\t\tthis.zoomToGeoPoint(this.svgPointToGeo(point), this.zoomLevel, true, duration);\r\n\t}\r\n\r\n\t/**\r\n\t * Current lat/long coordinates for the center of the viewport. (default\r\n\t * zoom reference point)\r\n\t *\r\n\t * @readonly\r\n\t * @return {IGeoPoint} Coordinates\r\n\t */\r\n\tpublic get zoomGeoPoint(): IGeoPoint {\r\n\t\treturn this.svgPointToGeo({\r\n\t\t\tx: this.pixelWidth / 2,\r\n\t\t\ty: this.pixelHeight / 2\r\n\t\t});\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Current zoom level.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Zoom level\r\n\t */\r\n\tpublic get zoomLevel(): number {\r\n\t\treturn this.seriesContainer.scale;\r\n\t}\r\n\r\n\tpublic set zoomLevel(value: number) {\r\n\t\tthis.seriesContainer.scale = value;\r\n\t}\r\n\r\n\t/**\r\n\t * Dispatches events after some map transformation, like pan or zoom.\r\n\t */\r\n\tprotected handleMapTransform(): void {\r\n\t\tif (this.zoomLevel != this._prevZoomLevel) {\r\n\t\t\tthis.dispatch(\"zoomlevelchanged\");\r\n\t\t\tthis._prevZoomLevel = this.zoomLevel;\r\n\t\t}\r\n\r\n\t\tif (this.zoomGeoPoint && (this._prevZoomGeoPoint.latitude != this.zoomGeoPoint.latitude || this._prevZoomGeoPoint.longitude != this.zoomGeoPoint.longitude)) {\r\n\t\t\tthis.dispatch(\"mappositionchanged\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A [[SmallMap]] to be used on the map.\r\n\t *\r\n\t * Please note, that accessing this property will NOT create a small map\r\n\t * if it has not yet been created. (except in JSON)\r\n\t *\r\n\t * ```TypeScript\r\n\t * // Create a small map\r\n\t * map.smallMap = new am4maps.SmallMap();\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * // Create a small map\r\n\t * map.smallMap = new am4maps.SmallMap();\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"smallMap\": {}\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {SmallMap}  smallMap  Small map\r\n\t */\r\n\tpublic set smallMap(smallMap: SmallMap) {\r\n\t\tif (this._smallMap) {\r\n\t\t\tthis.removeDispose(this._smallMap);\r\n\t\t}\r\n\t\tthis._smallMap = smallMap;\r\n\t\tthis._smallMap.chart = this;\r\n\t\tsmallMap.parent = this.chartContainer;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {SmallMap} Small map\r\n\t */\r\n\tpublic get smallMap(): SmallMap {\r\n\t\tif (!this._smallMap) {\r\n\t\t\tlet smallMap: SmallMap = new SmallMap();\r\n\t\t\tthis.smallMap = smallMap;\r\n\t\t}\r\n\t\treturn this._smallMap;\r\n\t}\r\n\r\n\t/**\r\n\t * A [[ZoomControl]] to be used on the map.\r\n\t *\r\n\t * Please note, that accessing this property will NOT create a zoom control\r\n\t * if it has not yet been created. (except in JSON)\r\n\t *\r\n\t * ```TypeScript\r\n\t * // Create a zoom control\r\n\t * map.zoomControl = new am4maps.ZoomControl();\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * // Create a zoom control\r\n\t * map.zoomControl = new am4maps.ZoomControl();\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"zoomControl\": {}\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {ZoomControl}  zoomControl  Zoom control\r\n\t */\r\n\tpublic set zoomControl(zoomControl: ZoomControl) {\r\n\t\tif (this._zoomControl) {\r\n\t\t\tthis.removeDispose(this._zoomControl);\r\n\t\t}\r\n\t\tthis._zoomControl = zoomControl;\r\n\t\tzoomControl.chart = this;\r\n\t\tzoomControl.parent = this.chartContainer;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {ZoomControl} Zoom control\r\n\t */\r\n\tpublic get zoomControl(): ZoomControl {\r\n\t\treturn this._zoomControl;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a map series of appropriate type.\r\n\t *\r\n\t * @return {MapSeries} Map series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new MapSeries();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Degrees to shift map center by.\r\n\t *\r\n\t * E.g. if set to -160, the longitude 20 will become a new center, creating\r\n\t * a Pacific-centered map.\r\n\t *\r\n\t * @param {number}  value  Map center shift\r\n\t */\r\n\tpublic set deltaLongitude(value: number) {\r\n\t\tif (this.setPropertyValue(\"deltaLongitude\", $geo.wrapAngleTo180(value))) {\r\n\t\t\tthis.invalidateProjection();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Map center shift\r\n\t */\r\n\tpublic get deltaLongitude(): number {\r\n\t\treturn this.getPropertyValue(\"deltaLongitude\");\r\n\t}\r\n\r\n\t/**\r\n\t * Max pan out\r\n\t *\r\n\t * @param {number} Max pan out\r\n\t */\r\n\tpublic set maxPanOut(value: number) {\r\n\t\tthis.setPropertyValue(\"maxPanOut\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Max pan out\r\n\t */\r\n\tpublic get maxPanOut(): number {\r\n\t\treturn this.getPropertyValue(\"maxPanOut\");\r\n\t}\r\n\r\n\t/**\r\n\t * The geographical point to center map on when it is first loaded.\r\n\t *\r\n\t * The map will also be centered to this point when you call `goHome()`\r\n\t * method.\r\n\t *\r\n\t * @param {IGeoPoint}  value  Home geo point\r\n\t */\r\n\tpublic set homeGeoPoint(value: IGeoPoint) {\r\n\t\tthis.setPropertyValue(\"homeGeoPoint\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {IGeoPoint} Home geo point\r\n\t */\r\n\tpublic get homeGeoPoint(): IGeoPoint {\r\n\t\treturn this.getPropertyValue(\"homeGeoPoint\");\r\n\t}\r\n\r\n\t/**\r\n\t * The zoom level to put the map in when it is first loaded.\r\n\t *\r\n\t * The map will also be set to this zoom level when you call `goHome()`\r\n\t * method.\r\n\t *\r\n\t * @param {number}  value  Home zoom level\r\n\t */\r\n\tpublic set homeZoomLevel(value: number) {\r\n\t\tthis.setPropertyValue(\"homeZoomLevel\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Home zoom level\r\n\t */\r\n\tpublic get homeZoomLevel(): number {\r\n\t\treturn this.getPropertyValue(\"homeZoomLevel\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Invalidates projection, causing all series to be redrawn.\r\n\t */\r\n\tprotected invalidateProjection() {\r\n\t\t//\t\tthis.projection.deltaLatitude = this.deltaLatitude;\r\n\t\tthis.projection.deltaLongitude = this.deltaLongitude;\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.invalidate();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a [[DataSource]] to be used for loading Component's data.\r\n\t *\r\n\t * @param {DataSource} value Data source\r\n\t */\r\n\tpublic set geodataSource(value: DataSource) {\r\n\t\tif (this._dataSources[\"geodata\"]) {\r\n\t\t\tthis.removeDispose(this._dataSources[\"geodata\"]);\r\n\t\t}\r\n\t\tthis._dataSources[\"geodata\"] = value;\r\n\t\tthis._dataSources[\"geodata\"].component = this;\r\n\t\tthis.events.on(\"inited\", () => {\r\n\t\t\tthis.loadData(\"geodata\")\r\n\t\t}, this, false);\r\n\t\tthis.setDataSourceEvents(value, \"geodata\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a [[DataSource]] specifically for loading Component's data.\r\n\t *\r\n\t * @return {DataSource} Data source\r\n\t */\r\n\tpublic get geodataSource(): DataSource {\r\n\t\tif (!this._dataSources[\"geodata\"]) {\r\n\t\t\tthis.getDataSource(\"geodata\");\r\n\t\t}\r\n\t\treturn this._dataSources[\"geodata\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\t// Instantiate projection\r\n\t\tif ($type.hasValue(config[\"projection\"]) && $type.isString(config[\"projection\"])) {\r\n\t\t\tconfig[\"projection\"] = this.createClassInstance(config[\"projection\"]);\r\n\t\t}\r\n\r\n\t\t// Set up small map\r\n\t\tif ($type.hasValue(config.smallMap) && !$type.hasValue(config.smallMap.type)) {\r\n\t\t\tconfig.smallMap.type = \"SmallMap\";\r\n\t\t}\r\n\r\n\t\t// Set up zoom control\r\n\t\tif ($type.hasValue(config.zoomControl) && !$type.hasValue(config.zoomControl.type)) {\r\n\t\t\tconfig.zoomControl.type = \"ZoomControl\";\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\t/**\r\n * This function is used to sort element's JSON config properties, so that\r\n * some properties that absolutely need to be processed last, can be put at\r\n * the end.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {string}  a  Element 1\r\n * @param  {string}  b  Element 2\r\n * @return {number}     Sorting number\r\n */\r\n\tprotected configOrder(a: string, b: string): Ordering {\r\n\t\tif (a == b) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t// Must come last\r\n\t\telse if (a == \"smallMap\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"smallMap\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"series\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"series\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.configOrder(a, b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Adds `projection` to \"as is\" fields.\r\n\t *\r\n\t * @param  {string}   field  Field name\r\n\t * @return {boolean}         Assign as is?\r\n\t */\r\n\tprotected asIs(field: string): boolean {\r\n\t\treturn field == \"projection\" || super.asIs(field);\r\n\t}\r\n\r\n\t/**\r\n\t * Geo point of map center\r\n\t *\r\n\t * @readonly\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic get centerGeoPoint(): IGeoPoint {\r\n\t\treturn this.svgPointToGeo({ x: this.measuredWidth / 2, y: this.measuredHeight / 2 });\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Resets the map to its original position and zoom level.\r\n\t */\r\n\tpublic goHome(duration?: number) {\r\n\t\tlet homeGeoPoint = this.homeGeoPoint;\r\n\t\tif (!homeGeoPoint) {\r\n\t\t\thomeGeoPoint = this.centerGeoPoint;\r\n\t\t}\r\n\t\tif (homeGeoPoint) {\r\n\t\t\tthis.zoomToGeoPoint(homeGeoPoint, this.homeZoomLevel, true, duration);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapChart\"] = MapChart;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/MapChart.ts","/**\r\n * Map line module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapLine } from \"./MapLine\";\r\nimport { IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapLineObject]].\r\n */\r\nexport interface IMapLineObjectProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Sets object's relative position (0-1) within the line.\r\n\t *\r\n\t * `0` will place the object at the beginning of the line. `1` - at the end.\r\n\t *\r\n\t * Any intermediate number will place the object at some point within the\r\n\t * line.\r\n\t * \r\n\t * @type {number}\r\n\t */\r\n\tposition?: number;\r\n\r\n\t/**\r\n\t * If set to `true`, the object will be automatically rotated to face the\r\n\t * direction of the line at the specific position.\r\n\t *\r\n\t * This allows creating images that has its \"front\" always facing the logical\r\n\t * direction of the line.\r\n\t *\r\n\t * @default false\r\n\t * @type {boolean}\r\n\t */\r\n\tadjustRotation?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[MapLineObject]].\r\n */\r\nexport interface IMapLineObjectEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapLineObject]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapLineObjectAdapters extends IContainerAdapters, IMapLineObjectProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a line on the map.\r\n *\r\n * @see {@link IMapLineObjectEvents} for a list of available events\r\n * @see {@link IMapLineObjectAdapters} for a list of available Adapters\r\n */\r\nexport class MapLineObject extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IMapLineObjectProperties}\r\n\t */\r\n\tpublic _properties!: IMapLineObjectProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IMapLineObjectAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapLineObjectAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapLineObjectEvents}\r\n\t */\r\n\tpublic _events!: IMapLineObjectEvents;\r\n\r\n\t/**\r\n\t * A reference to the [[MapLine]] object this object is attached to.\r\n\t *\r\n\t * @todo Review if necessary (same as parent)\r\n\t * @type {MapLine}\r\n\t */\r\n\tpublic mapLine: MapLine;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.adjustRotation = true;\r\n\t\tthis.className = \"MapLineObject\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.layout = \"none\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates element's position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validatePosition() {\r\n\t\tif (this.mapLine) {\r\n\t\t\tlet point: IOrientationPoint = this.mapLine.positionToPoint(this.position);\r\n\t\t\tthis.x = point.x;\r\n\t\t\tthis.y = point.y;\r\n\r\n\t\t\tif (this.adjustRotation) {\r\n\t\t\t\tthis.rotation = point.angle;\r\n\t\t\t}\r\n\r\n\t\t\tlet dataItem = this.mapLine.dataItem;\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tlet series = this.mapLine.dataItem.component;\r\n\t\t\t\tthis.scale = 1 / series.scale;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validatePosition();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets object's relative position (0-1) within the line.\r\n\t *\r\n\t * `0` will place the object at the beginning of the line. `1` - at the end.\r\n\t *\r\n\t * Any intermediate number will place the object at some point within the\r\n\t * line.\r\n\t *\r\n\t * @param {number}  value  Position within the line (0-1)\r\n\t */\r\n\tpublic set position(value: number) {\r\n\t\tthis.setPropertyValue(\"position\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Position within the line\r\n\t */\r\n\tpublic get position(): number {\r\n\t\treturn this.getPropertyValue(\"position\");\r\n\t}\r\n\r\n\t/**\r\n\t * If set to `true`, the object will be automatically rotated to face the\r\n\t * direction of the line at the specific position.\r\n\t *\r\n\t * This allows creating images that has its \"front\" always facing the logical\r\n\t * direction of the line.\r\n\t *\r\n\t * @default false\r\n\t * @param {boolean}  value  Auto-rotate\r\n\t */\r\n\tpublic set adjustRotation(value: boolean) {\r\n\t\tthis.setPropertyValue(\"adjustRotation\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Auto-rotate\r\n\t */\r\n\tpublic get adjustRotation(): boolean {\r\n\t\treturn this.getPropertyValue(\"adjustRotation\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapLineObject\"] = MapLineObject;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapLineObject.ts","/**\r\n * Map polygon series module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapSeries, MapSeriesDataItem, GEOJSONGeometry, IMapSeriesProperties, IMapSeriesDataFields, IMapSeriesAdapters, IMapSeriesEvents } from \"./MapSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapPolygon } from \"./MapPolygon\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { IMapPolygonDataObject } from \"../types/MapChart\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $mapUtils from \"./MapUtils\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapPolygonSeries]]\r\n * @see {@link DataItem}\r\n */\r\nexport class MapPolygonSeriesDataItem extends MapSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[MapPolygon]] element related to this data item.\r\n\t *\r\n\t * @type {MapPolygon}\r\n\t */\r\n\tprotected _mapPolygon: MapPolygon;\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a single polygon.\r\n\t *\r\n\t * @type {number[][][]}\r\n\t */\r\n\tprotected _polygon: number[][][];\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-part polygon.\r\n\t *\r\n\t * @type {number[][][][]}\r\n\t */\r\n\tprotected _multiPolygon: number[][][][];\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a single polygon.\r\n\t *\r\n\t * @type {IGeoPoint[][]}\r\n\t */\r\n\tprotected _geoPolygon: IGeoPoint[][];\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a multi-part polygon.\r\n\t *\r\n\t * @type {IGeoPoint[][][]}\r\n\t */\r\n\tprotected _multiGeoPolygon: IGeoPoint[][][];\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @type {MapPolygonSeries}\r\n\t */\r\n\tpublic _component!: MapPolygonSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapPolygonSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[MapPolygon]] element related to this data item.\r\n\t *\r\n\t * @readonly\r\n\t * @return {MapPolygon} Element\r\n\t */\r\n\tpublic get mapPolygon(): MapPolygon {\r\n\t\tif (!this._mapPolygon) {\r\n\t\t\tlet mapPolygon = this.component.mapPolygons.create();\r\n\t\t\tthis._mapPolygon = mapPolygon;\r\n\t\t\tthis.addSprite(mapPolygon);\r\n\r\n\t\t\tthis._disposers.push(mapPolygon);\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tthis.component.mapPolygons.removeValue(mapPolygon);\r\n\t\t\t}));\r\n\t\t}\r\n\t\treturn this._mapPolygon;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a single polygon. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   [\r\n\t *     [ 100, 150 ],\r\n\t *     [ 120, 200 ],\r\n\t *     [ 150, 200 ],\r\n\t *     [ 170, 240 ],\r\n\t *     [ 100, 150 ]\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @param {number[][][]}  polygon  Coordinates\r\n\t */\r\n\tpublic set polygon(polygon: number[][][]) {\r\n\t\tthis._polygon = polygon;\r\n\t\tthis.multiGeoPolygon = $mapUtils.multiPolygonToGeo([polygon]);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number[]} Coordinates\r\n\t */\r\n\tpublic get polygon(): number[][][] {\r\n\t\treturn this._polygon;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-part polygon. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   // Part 1\r\n\t *   [\r\n\t *     [\r\n\t *       [ 100, 150 ],\r\n\t *       [ 120, 200 ],\r\n\t *       [ 150, 220 ],\r\n\t *       [ 170, 240 ],\r\n\t *       [ 100, 150 ]\r\n\t *     ]\r\n\t *   ],\r\n\t *\r\n\t *   // Part 2\r\n\t *   [\r\n\t *     [\r\n\t *       [ 300, 350 ],\r\n\t *       [ 320, 400 ],\r\n\t *       [ 350, 420 ],\r\n\t *       [ 370, 440 ],\r\n\t *       [ 300, 350 ]\r\n\t *     ]\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @param {number[][][]}  multiPolygon  Coordinates\r\n\t */\r\n\tpublic set multiPolygon(multiPolygon: number[][][][]) {\r\n\t\tthis._multiPolygon = multiPolygon;\r\n\t\tthis.multiGeoPolygon = $mapUtils.multiPolygonToGeo(multiPolygon);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number[]} Coordinates\r\n\t */\r\n\tpublic get multiPolygon(): number[][][][] {\r\n\t\treturn this._multiPolygon;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a single polygon. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   [\r\n\t *     { latitude: -10.0, longitude: -10.0 },\r\n\t *     { latitude: 10.0, longitude: -10.0 },\r\n\t *     { latitude: 10.0, longitude: 10.0 },\r\n\t *     { latitude: -10.0, longitude: -10.0 }\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.6} GeoJSON Polygon reference\r\n\t * @param {IGeoPoint[][]}  geoPolygon  Coordinates\r\n\t */\r\n\tpublic set geoPolygon(geoPolygon: IGeoPoint[][]) {\r\n\t\tthis._geoPolygon = geoPolygon;\r\n\t\tthis.multiGeoPolygon = [geoPolygon];\r\n\t}\r\n\r\n\t/**\r\n\t * @return {IGeoPoint[]} Coordinates\r\n\t */\r\n\tpublic get geoPolygon(): IGeoPoint[][] {\r\n\t\treturn this._geoPolygon;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a multi-part polygon. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   [\r\n\t *     [\r\n\t *       { longitude: 180.0, latitude: 40.0 },\r\n\t *       { longitude: 180.0, latitude: 50.0 },\r\n\t *       { longitude: 170.0, latitude: 50.0 },\r\n\t *       { longitude: 170.0, latitude: 40.0 },\r\n\t *       { longitude: 180.0, latitude: 40.0 }\r\n\t *     ]\r\n\t *   ],\r\n\t *   [\r\n\t *     [\r\n\t *       { longitude: -170.0, latitude: 40.0 },\r\n\t *       { longitude: -170.0, latitude: 50.0 },\r\n\t *       { longitude: -180.0, latitude: 50.0 },\r\n\t *       { longitude: -180.0, latitude: 40.0 },\r\n\t *       { longitude: -170.0, latitude: 40.0 }\r\n\t *     ]\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.7} GeoJSON MultiPolygon reference\r\n\t * @param {IGeoPoint[][][]}  multiGeoPolygon  Coordinates\r\n\t */\r\n\tpublic set multiGeoPolygon(multiGeoPolygon: IGeoPoint[][][]) {\r\n\t\tthis._multiGeoPolygon = multiGeoPolygon;\r\n\t\tthis.updateAreaExtremes(multiGeoPolygon);\r\n\t\tthis.mapPolygon.multiGeoPolygon = this._multiGeoPolygon;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {IGeoPoint[]} Coordinates\r\n\t */\r\n\tpublic get multiGeoPolygon(): IGeoPoint[][][] {\r\n\t\treturn this._multiGeoPolygon;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the item's bounding coordinates: coordinates of the East, West,\r\n\t * North, and South-most points.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IGeoPoint[]}  geoPoints  Points of the element\r\n\t */\r\n\tpublic updateAreaExtremes(multiGeoPolygon: IGeoPoint[][][]): void {\r\n\t\tfor (let i = 0, len = multiGeoPolygon.length; i < len; i++) {\r\n\t\t\tlet geoPolygon: IGeoPoint[][] = multiGeoPolygon[i];\r\n\t\t\tlet surface: IGeoPoint[] = geoPolygon[0];\r\n\t\t\tthis.updateExtremes(surface);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[MapPolygonSeries]].\r\n */\r\nexport interface IMapPolygonSeriesDataFields extends IMapSeriesDataFields {\r\n\r\n\t/**\r\n\t * Field name that holds polygon pixels.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tpolygon?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-polygon pixels.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tmultiPolygon?: string;\r\n\r\n\t/**\r\n\t * Field name that holds polygon data in Geo coordinates.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tgeoPolygon?: string;\r\n\r\n\t/**\r\n\t * Field name that holds poly-polygon data in Geo coordinates.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tmultiGeoPolygon?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[MapPolygonSeries]].\r\n */\r\nexport interface IMapPolygonSeriesProperties extends IMapSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[MapPolygonSeries]].\r\n */\r\nexport interface IMapPolygonSeriesEvents extends IMapSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapPolygonSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapPolygonSeriesAdapters extends IMapSeriesAdapters, IMapPolygonSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A series of map polygon elements.\r\n *\r\n * @see {@link IMapPolygonSeriesEvents} for a list of available Events\r\n * @see {@link IMapPolygonSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapPolygonSeries extends MapSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IMapPolygonSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IMapPolygonSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IMapPolygonSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IMapPolygonSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IMapPolygonSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapPolygonSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapPolygonSeriesEvents}\r\n\t */\r\n\tpublic _events!: IMapPolygonSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {MapPolygonSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapPolygonSeriesDataItem;\r\n\r\n\t/**\r\n\t * A related chart/map object, this element is drawn on.\r\n\t *\r\n\t * @type {MapChart}\r\n\t */\r\n\tpublic chart: MapChart;\r\n\r\n\t/**\r\n\t * A list of map polygons in the series.\r\n\t *\r\n\t * @type {ListTemplate<MapImage>}\r\n\t */\r\n\tprotected _mapPolygons: ListTemplate<MapPolygon>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\tthis.parsingStepDuration = 1000; // to avoid some extra redrawing\r\n\r\n\t\tthis.className = \"MapPolygonSeries\";\r\n\r\n\t\t// Set data fields\r\n\t\tthis.dataFields.multiPolygon = \"multiPolygon\";\r\n\t\tthis.dataFields.polygon = \"polygon\";\r\n\r\n\t\tthis.dataFields.geoPolygon = \"geoPolygon\";\r\n\t\tthis.dataFields.multiGeoPolygon = \"multiGeoPolygon\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {MapPolygonSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapPolygonSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected processIncExc(){\r\n\t\tthis.mapPolygons.clear();\r\n\t\tsuper.processIncExc();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates series data, effectively causing the whole series to be\r\n\t * redrawn.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tif (this.data.length > 0 && this._parseDataFrom == 0) {\r\n\t\t\tthis.mapPolygons.clear();\r\n\t\t}\r\n\r\n\t\tthis.west = null;\r\n\t\tthis.east = null;\r\n\t\tthis.north = null;\r\n\t\tthis.south = null;\r\n\r\n\t\t// process geoJSON and created map objects\r\n\t\tif (this.useGeodata || this.geodata) {\r\n\t\t\tlet geoJSON: any = !this._dataSources[\"geodata\"] ? this.chart.geodata : undefined;\r\n\r\n\t\t\tif(this.geodata){\r\n\t\t\t\tgeoJSON = this.geodata;\r\n\t\t\t}\r\n\r\n\t\t\tif (geoJSON) {\r\n\r\n\t\t\t\tlet features: any[];\r\n\r\n\t\t\t\tif (geoJSON.type == \"FeatureCollection\") {\r\n\t\t\t\t\tfeatures = geoJSON.features;\r\n\t\t\t\t}\r\n\t\t\t\telse if (geoJSON.type == \"Feature\") {\r\n\t\t\t\t\tfeatures = [geoJSON];\r\n\t\t\t\t}\r\n\t\t\t\telse if ([\"Point\", \"LineString\", \"Polygon\", \"MultiPoint\", \"MultiLineString\", \"MultiPolygon\"].indexOf(geoJSON.type) != -1) {\r\n\t\t\t\t\tfeatures = [{ geometry: geoJSON }];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tconsole.log(\"nothing found in geoJSON\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (features) {\r\n\t\t\t\t\tfor (let i = 0, len = features.length; i < len; i++) {\r\n\r\n\t\t\t\t\t\tlet feature: any = features[i];\r\n\t\t\t\t\t\tlet geometry: any = feature.geometry;\r\n\t\t\t\t\t\tif (geometry) {\r\n\t\t\t\t\t\t\tlet type: GEOJSONGeometry = <GEOJSONGeometry>geometry.type;\r\n\t\t\t\t\t\t\tlet id: string = feature.id;\r\n\r\n\t\t\t\t\t\t\tif (type == \"Polygon\" || type == \"MultiPolygon\") {\r\n\r\n\t\t\t\t\t\t\t\tif (!this.checkInclude(this.include, this.exclude, id)) {\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet coordinates: any[] = geometry.coordinates;\r\n\r\n\t\t\t\t\t\t\t\tif (coordinates) {\r\n\t\t\t\t\t\t\t\t\t// make the same as MultiPolygon\r\n\t\t\t\t\t\t\t\t\tif (type == \"Polygon\") {\r\n\t\t\t\t\t\t\t\t\t\tcoordinates = [coordinates];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// find data object in user-provided data\r\n\t\t\t\t\t\t\t\tlet dataObject: IMapPolygonDataObject = $array.find(this.data, (value, i) => {\r\n\t\t\t\t\t\t\t\t\treturn value.id == id;\r\n\t\t\t\t\t\t\t\t});\r\n\r\n\r\n\t\t\t\t\t\t\t\t// create one if not found\r\n\t\t\t\t\t\t\t\tif (!dataObject) {\r\n\t\t\t\t\t\t\t\t\tdataObject = { multiPolygon: coordinates, id: id };\r\n\t\t\t\t\t\t\t\t\tthis.data.push(dataObject);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// in case found\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t// if user-provided object doesn't have points data provided in any way:\r\n\t\t\t\t\t\t\t\t\tif (!dataObject.multiPolygon) {\r\n\t\t\t\t\t\t\t\t\t\tdataObject.multiPolygon = coordinates;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// copy properties data to datacontext\r\n\t\t\t\t\t\t\t\t$utils.softCopyProperties(feature.properties, dataObject);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\t// if data is parsed in chunks, polygon list is corrupted, fix it here\r\n\t\t// !important this should go after super!\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tthis.mapPolygons.moveValue(dataItem.mapPolygon);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the series\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\t$iter.each(this.mapPolygons.iterator(), (mapPolygon) => {\t\t\t\r\n\t\t\tmapPolygon.validate();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * List of polygon elements in the series.\r\n\t *\r\n\t * @return {ListTemplate<MapPolygon>} Polygon list\r\n\t */\r\n\tpublic get mapPolygons(): ListTemplate<MapPolygon> {\r\n\r\n\t\tif (!this._mapPolygons) {\r\n\t\t\tlet polygonTemplate: MapPolygon = new MapPolygon();\r\n\r\n\t\t\tlet mapPolygons: ListTemplate<MapPolygon> = new ListTemplate<MapPolygon>(polygonTemplate);\r\n\t\t\tthis._disposers.push(new ListDisposer(mapPolygons));\r\n\t\t\tthis._disposers.push(mapPolygons.template);\r\n\t\t\tmapPolygons.template.focusable = true;\r\n\t\t\tmapPolygons.events.on(\"inserted\", this.handleObjectAdded, this, false);\r\n\t\t\tthis._mapPolygons = mapPolygons;\r\n\t\t}\r\n\r\n\t\treturn this._mapPolygons;\r\n\t}\r\n\r\n\t/**\r\n\t * returns MapPolygon by id in geoJSON file\r\n\t * @param {string} polygon id\r\n\t * @return {MapPolygon}\r\n\t */\r\n\tpublic getPolygonById(id: string): MapPolygon {\r\n\t\treturn $iter.find(this.mapPolygons.iterator(), (mapPolygon) => {\r\n\t\t\tlet dataContext: any = mapPolygon.dataItem.dataContext;\r\n\t\t\treturn dataContext.id == id;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[Series]].\r\n\t *\r\n\t * @param {Series}  source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tthis.mapPolygons.template.copyFrom(source.mapPolygons.template);\r\n\t\tsuper.copyFrom(source);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapPolygonSeries\"] = MapPolygonSeries;\r\nregistry.registeredClasses[\"MapPolygonSeriesDataItem\"] = MapPolygonSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapPolygonSeries.ts","/**\r\n * Map spline series module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapLineSeries, MapLineSeriesDataItem, IMapLineSeriesProperties, IMapLineSeriesDataFields, IMapLineSeriesAdapters, IMapLineSeriesEvents } from \"./MapLineSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapChart, MapLineType } from \"../types/MapChart\";\r\nimport { MapSpline } from \"./MapSpline\";\r\nimport { ListTemplate, IListEvents } from \"../../core/utils/List\";\r\nimport { IMapDataObject, IMapPolygonDataObject, IMapLineDataObject } from \"../types/MapChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapSplineSeries]]\r\n * @see {@link DataItem}\r\n */\r\nexport class MapSplineSeriesDataItem extends MapLineSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[MapSpline]] element related to this data item.\r\n\t *\r\n\t * @type {MapSpline}\r\n\t */\r\n\tpublic _mapLine: MapSpline;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @type {Component}\r\n\t */\r\n\tpublic _component!: MapSplineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapSplineSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[MapSplineSeries]].\r\n */\r\nexport interface IMapSplineSeriesDataFields extends IMapLineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[MapSplineSeries]].\r\n */\r\nexport interface IMapSplineSeriesProperties extends IMapLineSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[MapSplineSeries]].\r\n */\r\nexport interface IMapSplineSeriesEvents extends IMapLineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapSplineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapSplineSeriesAdapters extends IMapLineSeriesAdapters, IMapSplineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A series of map spline elements.\r\n *\r\n * @see {@link IMapSplineSeriesEvents} for a list of available Events\r\n * @see {@link IMapSplineSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapSplineSeries extends MapLineSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IMapSplineSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IMapSplineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IMapSplineSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IMapSplineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IMapSplineSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapSplineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapSplineSeriesEvents}\r\n\t */\r\n\tpublic _events!: IMapSplineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {MapSplineSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapSplineSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the line items in this series.\r\n\t *\r\n\t * @type {MapSpline}\r\n\t */\r\n\tpublic _mapLine: MapSpline;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapSplineSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {MapSplineSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapSplineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new line instance of suitable type.\r\n\t *\r\n\t * @return {MapSpline} New line\r\n\t */\r\n\tprotected createLine(): this[\"_mapLine\"] {\r\n\t\treturn new MapSpline();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapSplineSeries\"] = MapSplineSeries;\r\nregistry.registeredClasses[\"MapSplineSeriesDataItem\"] = MapSplineSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapSplineSeries.ts","/**\r\n * Map image series module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapSeries, MapSeriesDataItem, GEOJSONGeometry, IMapSeriesProperties, IMapSeriesDataFields, IMapSeriesAdapters, IMapSeriesEvents } from \"./MapSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapImage } from \"./MapImage\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { IMapImageDataObject } from \"../types/MapChart\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $mapUtils from \"./MapUtils\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapImageSeries]]\r\n * @see {@link DataItem}\r\n */\r\nexport class MapImageSeriesDataItem extends MapSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[MapImage]] element related to this data item.\r\n\t *\r\n\t * @type {MapImage}\r\n\t */\r\n\tprotected _mapImage: MapImage;\r\n\r\n\t/**\r\n\t * [_point description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number[]}\r\n\t */\r\n\tprotected _point: number[];\r\n\r\n\t/**\r\n\t * Geographical coordinates image is placed at.\r\n\t *\r\n\t * @type {IGeoPoint}\r\n\t */\r\n\tprotected _geoPoint: IGeoPoint;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @type {Component}\r\n\t */\r\n\tpublic _component!: MapImageSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapImageSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[MapImage]] element related to this data item.\r\n\t *\r\n\t * @return {MapImage} Element\r\n\t */\r\n\tpublic get mapImage(): MapImage {\r\n\t\tif (!this._mapImage) {\r\n\t\t\tlet mapImage = this.component.mapImages.create();\r\n\t\t\tthis.addSprite(mapImage);\r\n\t\t\tthis._mapImage = mapImage;\r\n\t\t\tthis._disposers.push(mapImage);\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tthis.component.mapImages.removeValue(mapImage);\r\n\t\t\t}));\r\n\t\t}\r\n\t\treturn this._mapImage;\r\n\t}\r\n\r\n\t/**\r\n\t * [point description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {number[]} point [description]\r\n\t */\r\n\tpublic set point(point: number[]) {\r\n\t\tthis._point = point;\r\n\t\tthis.geoPoint = $mapUtils.pointToGeo(point);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number[]} [description]\r\n\t */\r\n\tpublic get point(): number[] {\r\n\t\treturn this._point;\r\n\t}\r\n\r\n\t/**\r\n\t * Geographical coordinates (lat/long) image is placed at.\r\n\t *\r\n\t * @param {IGeoPoint} geoPoint Image coordinates\r\n\t */\r\n\tpublic set geoPoint(geoPoint: IGeoPoint) {\r\n\t\tthis._geoPoint = geoPoint;\r\n\t\tthis.updateExtremes([this._geoPoint]);\r\n\t\tthis.mapImage.latitude = this._geoPoint.latitude;\r\n\t\tthis.mapImage.longitude = this._geoPoint.longitude;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {IGeoPoint} Image coordinates\r\n\t */\r\n\tpublic get geoPoint(): IGeoPoint {\r\n\t\treturn this._geoPoint;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[MapImageSeries]].\r\n */\r\nexport interface IMapImageSeriesDataFields extends IMapSeriesDataFields {\r\n\r\n\t/**\r\n\t * Field name that holds image point data in pixels.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tpoint?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-image point data in pixels.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tmultiPoint?: string;\r\n\r\n\t/**\r\n\t * Field name that holds image point data in Geo coordinates.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tgeoPoint?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-image point data in Geo coordinates.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tmultiGeoPoint?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[MapImageSeries]].\r\n */\r\nexport interface IMapImageSeriesProperties extends IMapSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[MapImageSeries]].\r\n */\r\nexport interface IMapImageSeriesEvents extends IMapSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapImageSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapImageSeriesAdapters extends IMapSeriesAdapters, IMapImageSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A series of map image (marker) elements.\r\n *\r\n * @see {@link IMapImageSeriesEvents} for a list of available Events\r\n * @see {@link IMapImageSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapImageSeries extends MapSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IMapImageSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IMapImageSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IMapImageSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IMapImageSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IMapImageSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapImageSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapImageSeriesEvents}\r\n\t */\r\n\tpublic _events!: IMapImageSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {MapImageSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapImageSeriesDataItem;\r\n\r\n\t/**\r\n\t * A related chart/map object, this image is drawn on.\r\n\t *\r\n\t * @type {MapChart}\r\n\t */\r\n\tpublic chart: MapChart;\r\n\r\n\t/**\r\n\t * A list of map images in the series.\r\n\t *\r\n\t * @type {ListTemplate<MapImage>}\r\n\t */\r\n\tprotected _mapImages: ListTemplate<MapImage>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapImageSeries\";\r\n\r\n\t\t// Set data fields\r\n\t\tthis.dataFields.multiPoint = \"multiPoint\";\r\n\t\tthis.dataFields.point = \"point\";\r\n\r\n\t\tthis.dataFields.geoPoint = \"geoPoint\";\r\n\t\tthis.dataFields.multiGeoPoint = \"multiGeoPoint\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {MapImageSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapImageSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the data of the sries, effectively forcing it to redraw\r\n\t * all of its elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tif (this.data.length > 0) {\r\n\t\t\tthis.mapImages.clear();\r\n\t\t}\r\n\r\n\t\t// process geoJSON and created map objects\r\n\t\tif (this.useGeodata) {\r\n\t\t\tif (this.useGeodata || this.geodata) {\r\n\t\t\t\tlet geoJSON: any = this.chart.geodata;\r\n\r\n\t\t\t\tlet features: any[];\r\n\r\n\t\t\t\tif (geoJSON.type == \"FeatureCollection\") {\r\n\t\t\t\t\tfeatures = geoJSON.features;\r\n\t\t\t\t}\r\n\t\t\t\telse if (geoJSON.type == \"Feature\") {\r\n\t\t\t\t\tfeatures = [geoJSON];\r\n\t\t\t\t}\r\n\t\t\t\telse if ([\"Point\", \"LineString\", \"Polygon\", \"MultiPoint\", \"MultiLineString\", \"MultiPolygon\"].indexOf(geoJSON.type) != -1) {\r\n\t\t\t\t\tfeatures = [{ geometry: geoJSON }];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tconsole.log(\"nothing found in geoJSON\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (features) {\r\n\t\t\t\t\tfor (let i = 0, len = features.length; i < len; i++) {\r\n\r\n\t\t\t\t\t\tlet feature: any = features[i];\r\n\t\t\t\t\t\tlet geometry: any = feature.geometry;\r\n\t\t\t\t\t\tif (geometry) {\r\n\t\t\t\t\t\t\tlet type: GEOJSONGeometry = <GEOJSONGeometry>geometry.type;\r\n\t\t\t\t\t\t\tlet id: string = feature.id;\r\n\t\t\t\t\t\t\tif (type == \"Point\" || type == \"MultiPoint\") {  // todo: we don't support multipoints at the moment actually\r\n\r\n\t\t\t\t\t\t\t\tif (!this.checkInclude(this.include, this.exclude, id)) {\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet coordinates: any[] = geometry.coordinates;\r\n\r\n\t\t\t\t\t\t\t\tif (coordinates) {\r\n\t\t\t\t\t\t\t\t\t// make the same as MultiPoint\r\n\t\t\t\t\t\t\t\t\tif (type == \"MultiPoint\") {\r\n\t\t\t\t\t\t\t\t\t\tcoordinates = [coordinates];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet dataObject: IMapImageDataObject = $array.find(this.data, (value, i) => {\r\n\t\t\t\t\t\t\t\t\treturn value.id == id;\r\n\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t\tif (!dataObject) {\r\n\t\t\t\t\t\t\t\t\tdataObject = { multiPoint: coordinates, id: id };\r\n\t\t\t\t\t\t\t\t\tthis.data.push(dataObject);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tif (!dataObject.multiPoint) {\r\n\t\t\t\t\t\t\t\t\t\tdataObject.multiPoint = coordinates;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// copy properties data to datacontext\r\n\t\t\t\t\t\t\t\t$utils.softCopyProperties(feature.properties, dataObject);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\t\t// important! this should go after super.validateData\r\n\t\t// if data is parsed in chunks, images list is corrupted, fix it here\r\n\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tthis.mapImages.moveValue(dataItem.mapImage);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * A list of map images in the series.\r\n\t *\r\n\t * @return {ListTemplate<MapImage>} Map images\r\n\t */\r\n\tpublic get mapImages(): ListTemplate<MapImage> {\r\n\r\n\t\tif (!this._mapImages) {\r\n\t\t\tlet template: MapImage = new MapImage();\r\n\t\t\tlet mapImages = new ListTemplate<MapImage>(template);\r\n\t\t\tthis._disposers.push(new ListDisposer(mapImages));\r\n\t\t\tthis._disposers.push(mapImages.template);\r\n\t\t\tmapImages.template.focusable = true;\r\n\t\t\tmapImages.events.on(\"inserted\", this.handleObjectAdded, this, false);\r\n\t\t\tthis._mapImages = mapImages;\r\n\t\t}\r\n\r\n\t\treturn this._mapImages;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates data element, effectively triggering its redrawal.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]) {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\t\tdataItem.mapImage.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the series\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\t$iter.each(this.mapImages.iterator(), (mapImage) => {\r\n\t\t\tmapImage.validatePosition();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[Series]].\r\n\t *\r\n\t * @param {Series}  source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tthis.mapImages.template.copyFrom(source.mapImages.template);\r\n\t\tsuper.copyFrom(source);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapImageSeries\"] = MapImageSeries;\r\nregistry.registeredClasses[\"MapImageSeriesDataItem\"] = MapImageSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapImageSeries.ts","/**\r\n * Map arc series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapLineSeries, MapLineSeriesDataItem, IMapLineSeriesProperties, IMapLineSeriesDataFields, IMapLineSeriesAdapters, IMapLineSeriesEvents } from \"./MapLineSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapChart, MapLineType } from \"../types/MapChart\";\r\nimport { MapArc } from \"./MapArc\";\r\nimport { ListTemplate, IListEvents } from \"../../core/utils/List\";\r\nimport { IMapDataObject, IMapPolygonDataObject, IMapLineDataObject } from \"../types/MapChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapArcSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class MapArcSeriesDataItem extends MapLineSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[MapArc]] element related to this data item.\r\n\t *\r\n\t * @type {MapArc}\r\n\t */\r\n\tpublic _mapLine: MapArc;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {Component}\r\n\t */\r\n\tpublic _component!: MapArcSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapArcSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[MapArcSeries]].\r\n */\r\nexport interface IMapArcSeriesDataFields extends IMapLineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[MapArcSeries]].\r\n */\r\nexport interface IMapArcSeriesProperties extends IMapLineSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[MapArcSeries]].\r\n */\r\nexport interface IMapArcSeriesEvents extends IMapLineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapArcSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapArcSeriesAdapters extends IMapLineSeriesAdapters, IMapArcSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A series of arc elements. (curved lines)\r\n *\r\n * @see {@link IMapArcSeriesEvents} for a list of available Events\r\n * @see {@link IMapArcSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapArcSeries extends MapLineSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IMapArcSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IMapArcSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IMapArcSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IMapArcSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IMapArcSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapArcSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapArcSeriesEvents}\r\n\t */\r\n\tpublic _events!: IMapArcSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {MapArcSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapArcSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the line items in this series.\r\n\t *\r\n\t * @type {MapArc}\r\n\t */\r\n\tpublic _mapLine: MapArc;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapArcSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {MapArcSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapArcSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new line instance of suitable type.\r\n\t *\r\n\t * @return {MapArc} New line\r\n\t */\r\n\tprotected createLine(): this[\"_mapLine\"] {\r\n\t\treturn new MapArc();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapArcSeries\"] = MapArcSeries;\r\nregistry.registeredClasses[\"MapArcSeriesDataItem\"] = MapArcSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapArcSeries.ts","export { Mercator } from \"./projections/Mercator\";\nexport { Miller } from \"./projections/Miller\";\nexport { Eckert6 } from \"./projections/Eckert6\";\nexport { Orthographic } from \"./projections/Orthographic\";\nexport { Projection } from \"./projections/Projection\";\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/projections.ts","/**\r\n * Functionality for Mercator projection\r\n * \r\n * The function(s) below are from D3.js library (https://d3js.org/)\r\n * \r\n * ```\r\n * Copyright 2017 Mike Bostock\r\n * \r\n * Redistribution and use in source and binary forms, with or without \r\n * modification, are permitted provided that the following conditions are met:\r\n * \r\n * 1. Redistributions of source code must retain the above copyright notice, \r\n *    this list of conditions and the following disclaimer.\r\n * \r\n * 2. Redistributions in binary form must reproduce the above copyright notice, \r\n *    this list of conditions and the following disclaimer in the documentation \r\n *    and/or other materials provided with the distribution.\r\n * \r\n * 3. Neither the name of the copyright holder nor the names of its \r\n *    contributors may be used to endorse or promote products derived from this \r\n *    software without specific prior written permission.\r\n * \r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" \r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE \r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE \r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE \r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR \r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS \r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN \r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) \r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE \r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * ```\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Projection } from \"./Projection\";\r\nimport { IGeoPoint } from \"../../../core/defs/IGeoPoint\";\r\nimport { IPoint } from \"../../../core/defs/IPoint\";\r\nimport { registry } from \"../../../core/Registry\";\r\n\r\n/**\r\n * Mercator projection.\r\n */\r\nexport class Mercator extends Projection {\r\n\r\n\t/**\r\n\t * Converts screen coordinates to latitude/longitude in radians\r\n\t * @param  {number}     x  X\r\n\t * @param  {number}     y  Y\r\n\t * @return {IGeoPoint}     Geographical coordinates\r\n\t */\r\n\tpublic unproject(x: number, y: number): IGeoPoint {\r\n\t\treturn {\r\n\t\t\tlongitude: x,\r\n\t\t\tlatitude: 2 * Math.atan(Math.exp(y)) - Math.PI / 2\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Converts geographical coordinates to screen coordinates.\r\n\t * \r\n\t * @param  {number}  lambda  Lambda parameter\r\n\t * @param  {number}  phi     Phi parameter\r\n\t * @return {IPoint}          Screen coordinates\r\n\t */\r\n\tpublic project(lambda: number, phi: number): IPoint {\r\n\t\treturn {\r\n\t\t\tx: lambda,\r\n\t\t\ty: Math.log(Math.tan((Math.PI / 2 + phi) / 2))\r\n\t\t};\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Mercator\"] = Mercator;\n\n\n// WEBPACK FOOTER //\n// ../../../../../../src/.internal/charts/map/projections/Mercator.ts","/**\n * Functionality for Miller projection\n *\n * The function(s) below are from D3.js library (https://d3js.org/)\n * \n * ```\n * Copyright 2017 Mike Bostock\n * \n * Redistribution and use in source and binary forms, with or without \n * modification, are permitted provided that the following conditions are met:\n * \n * 1. Redistributions of source code must retain the above copyright notice, \n *    this list of conditions and the following disclaimer.\n * \n * 2. Redistributions in binary form must reproduce the above copyright notice, \n *    this list of conditions and the following disclaimer in the documentation \n *    and/or other materials provided with the distribution.\n * \n * 3. Neither the name of the copyright holder nor the names of its \n *    contributors may be used to endorse or promote products derived from this \n *    software without specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" \n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE \n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE \n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE \n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR \n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS \n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN \n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) \n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE \n * POSSIBILITY OF SUCH DAMAGE.\n * ```\n */\n\n/**\n * ============================================================================\n * IMPORTS\n * ============================================================================\n * @hidden\n */\nimport { Projection } from \"./Projection\";\nimport { IGeoPoint } from \"../../../core/defs/IGeoPoint\";\nimport { IPoint } from \"../../../core/defs/IPoint\";\nimport { registry } from \"../../../core/Registry\";\n\n/**\n * Miller projection.\n */\nexport class Miller extends Projection {\n\n\t/**\n\t * Converts screen coordinates to latitude/longitude.\n\t * \n\t * @param  {number}     x  X\n\t * @param  {number}     y  Y\n\t * @return {IGeoPoint}     Geographical coordinates in radians\n\t */\n\tpublic unproject(x: number, y: number): IGeoPoint {\n\t\treturn {\n\t\t\tlongitude: x,\n\t\t\tlatitude: 2.5 * Math.atan(Math.exp(0.8 * y)) - 0.625 * Math.PI\n\t\t};\n\t}\n\n\t/**\n\t * Converts geographical coordinates to screen coordinates.\n\t * \n\t * @param  {number}  lambda  Lambda parameter\n\t * @param  {number}  phi     Phi parameter\n\t * @return {IPoint}          Screen coordinates\n\t */\n\tpublic project(lambda: number, phi: number): IPoint {\n\t\treturn {\n\t\t\tx: lambda,\n\t\t\ty: 1.25 * Math.log(Math.tan(Math.PI / 4 + 0.4 * phi))\n\t\t};\n\t}\n\n}\n\n/**\n * Register class in system, so that it can be instantiated using its name from\n * anywhere.\n * \n * @ignore\n */\nregistry.registeredClasses[\"Miller\"] = Miller;\n\n\n// WEBPACK FOOTER //\n// ../../../../../../src/.internal/charts/map/projections/Miller.ts","/**\r\n * Functionality for Eckert6 projection\r\n *\r\n * The function(s) below are from D3.js library (https://d3js.org/)\r\n * \r\n * ```\r\n * Copyright 2017 Mike Bostock\r\n * \r\n * Redistribution and use in source and binary forms, with or without \r\n * modification, are permitted provided that the following conditions are met:\r\n * \r\n * 1. Redistributions of source code must retain the above copyright notice, \r\n *    this list of conditions and the following disclaimer.\r\n * \r\n * 2. Redistributions in binary form must reproduce the above copyright notice, \r\n *    this list of conditions and the following disclaimer in the documentation \r\n *    and/or other materials provided with the distribution.\r\n * \r\n * 3. Neither the name of the copyright holder nor the names of its \r\n *    contributors may be used to endorse or promote products derived from this \r\n *    software without specific prior written permission.\r\n * \r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" \r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE \r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE \r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE \r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR \r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS \r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN \r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) \r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE \r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * ```\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Projection } from \"./Projection\";\r\nimport { IGeoPoint } from \"../../../core/defs/IGeoPoint\";\r\nimport { IPoint } from \"../../../core/defs/IPoint\";\r\nimport { registry } from \"../../../core/Registry\";\r\n\r\n/**\r\n * Eckert6 projection.\r\n */\r\nexport class Eckert6 extends Projection {\r\n\r\n\t/**\r\n\t * Converts screen coordinates to latitude/longitude.\r\n\t * \r\n\t * @param  {number}     x  X\r\n\t * @param  {number}     y  Y\r\n\t * @return {IGeoPoint}     Geographical coordinates in radians\r\n\t */\r\n\tpublic unproject(x: number, y: number): IGeoPoint {\r\n\t\tlet j = 1 + Math.PI / 2,\r\n\t\t\tk = Math.sqrt(j / 2);\r\n\t\treturn {\r\n\t\t\tlongitude: x * 2 * k / (1 + Math.cos(y *= k)),\r\n\t\t\tlatitude: Math.asin((y + Math.sin(y)) / j)\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Converts geographical coordinates to screen coordinates.\r\n\t * \r\n\t * @param  {number}  lambda  Lambda parameter\r\n\t * @param  {number}  phi     Phi parameter\r\n\t * @return {IPoint}          Screen coordinates\r\n\t */\r\n\tpublic project(lambda: number, phi: number): IPoint {\r\n\t\tlet k = (1 + Math.PI / 2) * Math.sin(phi);\r\n\t\tfor (let i = 0, delta = Infinity; i < 10 && Math.abs(delta) > 0.00001; i++) {\r\n\t\t\tphi -= delta = (phi + Math.sin(phi) - k) / (1 + Math.cos(phi));\r\n\t\t}\r\n\t\tk = Math.sqrt(2 + Math.PI);\r\n\t\treturn {\r\n\t\t\tx: lambda * (1 + Math.cos(phi)) / k,\r\n\t\t\ty: 2 * phi / k\r\n\t\t};\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Eckert6\"] = Eckert6;\n\n\n// WEBPACK FOOTER //\n// ../../../../../../src/.internal/charts/map/projections/Eckert6.ts","/**\r\n * Functionality for Mercator projection\r\n * \r\n * The function(s) below are from D3.js library (https://d3js.org/)\r\n * \r\n * ```\r\n * Copyright 2017 Mike Bostock\r\n * \r\n * Redistribution and use in source and binary forms, with or without \r\n * modification, are permitted provided that the following conditions are met:\r\n * \r\n * 1. Redistributions of source code must retain the above copyright notice, \r\n *    this list of conditions and the following disclaimer.\r\n * \r\n * 2. Redistributions in binary form must reproduce the above copyright notice, \r\n *    this list of conditions and the following disclaimer in the documentation \r\n *    and/or other materials provided with the distribution.\r\n * \r\n * 3. Neither the name of the copyright holder nor the names of its \r\n *    contributors may be used to endorse or promote products derived from this \r\n *    software without specific prior written permission.\r\n * \r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" \r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE \r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE \r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE \r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR \r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS \r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN \r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) \r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE \r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * ```\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Projection } from \"./Projection\";\r\nimport { IGeoPoint } from \"../../../core/defs/IGeoPoint\";\r\nimport { IGeoRectangle } from \"../../../core/defs/IGeoRectangle\";\r\nimport { IPoint } from \"../../../core/defs/IPoint\";\r\nimport { registry } from \"../../../core/Registry\";\r\nimport * as $math from \"../../../core/utils/Math\";\r\n\r\n/**\r\n * Orthographic projection.\r\n */\r\nexport class Orthographic extends Projection {\r\n\r\n\t/**\r\n\t * Converts geographical coordinates to screen coordinates.\r\n\t * \r\n\t * @param  {number}  lambda  Lambda parameter\r\n\t * @param  {number}  phi     Phi parameter\r\n\t * @return {IPoint}          Screen coordinates\r\n\t */\r\n\tpublic project(lambda: number, phi: number): IPoint {\r\n\t\treturn { x: Math.cos(phi) * Math.sin(lambda), y: Math.sin(phi) };\r\n\t}\r\n\r\n\r\n\tpublic getClipRectangle1(): IGeoPoint[] {\r\n\t\tlet longitude = 90 - this.deltaLongitude;\r\n\t\tlet latitude = -this.deltaLatitude;\r\n\r\n\t\tlet smallNum = 0.00001;\r\n\t\treturn [{ longitude: longitude - 180, latitude: latitude - 90 }, { longitude: longitude - smallNum, latitude: latitude - 90 }, { longitude: longitude - smallNum, latitude: latitude + 90 }, { longitude: longitude - 180, latitude: latitude + 90 }];\r\n\t}\r\n\r\n\r\n\tpublic getRect1(): IGeoRectangle {\r\n\t\tlet longitude = 90 - this.deltaLongitude;\r\n\t\tlet latitude = -this.deltaLatitude;\r\n\r\n\t\treturn { north: latitude + 90, south: latitude - 90, west: longitude - 180, east: longitude };\r\n\t}\r\n\r\n\tpublic getClipRectangle2(): IGeoPoint[] {\r\n\t\tlet longitude = 90 - this.deltaLongitude;\r\n\t\tlet latitude = -this.deltaLatitude;\r\n\r\n\t\tlet smallNum = 0.00001;\r\n\r\n\t\tlet delta: number;\r\n\r\n\t\tif (longitude > 0) {\r\n\t\t\tdelta = -360;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdelta = 360;\r\n\t\t}\r\n\r\n\t\treturn [{ longitude: smallNum + longitude - 180 + delta, latitude: latitude - 90 }, { longitude: longitude - smallNum + delta, latitude: latitude - 90 }, { longitude: longitude - smallNum + delta, latitude: latitude + 90 }, { longitude: smallNum + longitude - 180 + delta, latitude: latitude + 90 }];\r\n\t}\r\n\r\n\r\n\r\n\tpublic getRect2(): IGeoRectangle {\r\n\t\tlet longitude = 90 - this.deltaLongitude;\r\n\t\tlet latitude = -this.deltaLatitude;\r\n\r\n\t\tlet delta: number;\r\n\r\n\t\tif (longitude > 0) {\r\n\t\t\tdelta = -360;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdelta = 360;\r\n\t\t}\r\n\t\treturn { north: latitude + 90, south: latitude - 90, west: longitude - 180 + delta, east: longitude + delta };\r\n\t}\r\n\r\n\r\n\r\n\tprotected clipGeoArea(geoArea: IGeoPoint[][][]): IGeoPoint[][][] {\r\n\t\tif (!geoArea) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet clippedArea: IGeoPoint[][][] = [];\r\n\r\n\t\tlet clipRectangle1 = this.getClipRectangle1();\r\n\t\tlet clipRectangle2 = this.getClipRectangle2();\r\n\r\n\t\tlet rect1 = this.getRect1();\r\n\t\tlet rect2 = this.getRect2();\r\n\r\n\t\tfor (let i = 0, len = geoArea.length; i < len; i++) {\r\n\r\n\t\t\tlet surface: IGeoPoint[] = geoArea[i][0];\r\n\t\t\tlet hole: IGeoPoint[] = geoArea[i][1];\r\n\r\n\t\t\tlet clippedAreas: IGeoPoint[][][] = [];\r\n\r\n\t\t\tif (surface) {\r\n\r\n\t\t\t\tlet surfaceRect = this.getExtremes(surface);\r\n\r\n\t\t\t\tif (!this.isInside(surfaceRect, rect1) && !this.isOutside(surfaceRect, rect1)) {\r\n\t\t\t\t\tlet clippedSurface1: IGeoPoint[] = this.clip(surface, clipRectangle1);\r\n\t\t\t\t\tlet clippedHole1: IGeoPoint[] = this.clip(hole, clipRectangle1);\r\n\t\t\t\t\tclippedAreas.push([clippedSurface1, clippedHole1]);\r\n\t\t\t\t}\r\n\t\t\t\telse if (this.isInside(surfaceRect, rect1)) {\r\n\t\t\t\t\tclippedAreas.push([surface, hole]);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!this.isInside(surfaceRect, rect2) && !this.isOutside(surfaceRect, rect2)) {\r\n\t\t\t\t\tlet clippedSurface2: IGeoPoint[] = this.clip(surface, clipRectangle2);\r\n\t\t\t\t\tlet clippedHole2: IGeoPoint[] = this.clip(hole, clipRectangle2);\r\n\r\n\t\t\t\t\tclippedAreas.push([clippedSurface2, clippedHole2]);\r\n\t\t\t\t}\r\n\t\t\t\telse if (this.isInside(surfaceRect, rect2)) {\r\n\t\t\t\t\tclippedAreas.push([surface, hole]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (let area of clippedAreas) {\r\n\t\t\t\tclippedArea.push(area);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (let i = 0, len = clippedArea.length; i < len; i++) {\r\n\r\n\t\t\tlet surface: IGeoPoint[] = clippedArea[i][0];\r\n\t\t\t//let hole: IGeoPoint[] = clippedArea[i][1];\r\n\r\n\t\t\tif (surface) {\r\n\r\n\t\t\t\tlet len = surface.length;\r\n\r\n\t\t\t\tlet prevPoint = surface[len - 1];\r\n\r\n\t\t\t\tfor (let i = 0; i < len; i++) {\r\n\t\t\t\t\tlet point = surface[i];\r\n\r\n\t\t\t\t\tif ($math.round(point.longitude, 4) == $math.round(prevPoint.longitude, 4)) {\r\n\t\t\t\t\t\tlet stepCount = Math.abs((prevPoint.latitude - point.latitude) * 2);\r\n\t\t\t\t\t\tlet extraPoints: IGeoPoint[] = [];\r\n\r\n\t\t\t\t\t\tif (stepCount > 1) {\r\n\t\t\t\t\t\t\tfor (let s = 1; s < stepCount; s++) {\r\n\t\t\t\t\t\t\t\textraPoints.push({ longitude: prevPoint.longitude, latitude: prevPoint.latitude + (point.latitude - prevPoint.latitude) / stepCount * s })\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tsurface.splice(i, 0, ...extraPoints);\r\n\t\t\t\t\t\t\ti = i + extraPoints.length;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tprevPoint = point;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn clippedArea;\r\n\t}\r\n\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Orthographic\"] = Orthographic;\n\n\n// WEBPACK FOOTER //\n// ../../../../../../src/.internal/charts/map/projections/Orthographic.ts","/**\r\n * This module contains funcitonality related to geographical projections\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IGeoPoint } from \"../../../core/defs/IGeoPoint\";\r\nimport { IGeoRectangle } from \"../../../core/defs/IGeoRectangle\";\r\nimport { IPoint } from \"../../../core/defs/IPoint\";\r\nimport { registry } from \"../../../core/Registry\";\r\nimport * as $math from \"../../../core/utils/Math\";\r\nimport * as $geo from \"../Geo\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This is a base class for a geographical projection.\r\n */\r\nexport class Projection {\r\n\r\n\tpublic deltaLongitude: number = 0;\r\n\r\n\tpublic deltaLatitude: number = 0;\r\n\r\n\tpublic deltaGama: number = 0;\r\n\r\n\tpublic centerPoint: IPoint = { x: 0, y: 0 };\r\n\r\n\tpublic scale: number = 1;\r\n\r\n\tpublic projectGeoArea(geoArea: IGeoPoint[][][]): IPoint[][][] {\r\n\r\n\t\tlet clippedGeoArea: IGeoPoint[][][] = this.clipGeoArea(geoArea);\r\n\t\tlet convertedPoints: IPoint[][][] = this.convertGeoArea(clippedGeoArea);\r\n\r\n\t\treturn convertedPoints;\r\n\t}\r\n\r\n\tpublic projectGeoLine(geoLine: IGeoPoint[][]): IPoint[][] {\r\n\t\treturn this.convertGeoLine(this.clipGeoLine(geoLine));\r\n\t}\r\n\r\n\tpublic getClipRectangle1(): IGeoPoint[] {\r\n\t\tlet longitude = $geo.wrapAngleTo180(180 - this.deltaLongitude);\r\n\t\tlet latitude = $geo.wrapAngleTo180(this.deltaLatitude);\r\n\r\n\t\tlet smallNum = 0.00001;\r\n\t\treturn [{ longitude: -180, latitude: latitude - 90 }, { longitude: longitude - smallNum, latitude: latitude - 90 }, { longitude: longitude - smallNum, latitude: latitude + 90 }, { longitude: -180, latitude: latitude + 90 }];\r\n\t}\r\n\r\n\tpublic getClipRectangle2(): IGeoPoint[] {\r\n\t\tlet longitude = $geo.wrapAngleTo180(180 - this.deltaLongitude);\r\n\t\t//let latitude = $geo.wrapAngleTo180(this.deltaLatitude);\r\n\r\n\t\tlet smallNum = 0.00001;\r\n\t\treturn [{ longitude: longitude + smallNum, latitude: -90 }, { longitude: 180, latitude: -90 }, { longitude: 180, latitude: 90 }, { longitude: longitude + smallNum, latitude: 90 }];\r\n\t}\r\n\r\n\tpublic getRect1(): IGeoRectangle {\r\n\t\tlet longitude = $geo.wrapAngleTo180(180 - this.deltaLongitude);\r\n\t\tlet latitude = $geo.wrapAngleTo180(this.deltaLatitude);\r\n\r\n\t\treturn { north: latitude + 90, south: latitude - 90, west: longitude - 180, east: longitude };\r\n\t}\r\n\r\n\tpublic getRect2(): IGeoRectangle {\r\n\t\tlet longitude = $geo.wrapAngleTo180(180 - this.deltaLongitude);\r\n\t\tlet latitude = $geo.wrapAngleTo180(this.deltaLatitude);\r\n\r\n\t\treturn { north: latitude + 90, south: latitude - 90, west: longitude, east: (longitude + 180) };\r\n\t}\r\n\r\n\r\n\r\n\tprotected clipGeoLine(geoLine: IGeoPoint[][]): IGeoPoint[][] {\r\n\t\tif (!geoLine) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet clippedLine: IGeoPoint[][] = [];\r\n\r\n\t\tlet clipRectangle1 = this.getClipRectangle1();\r\n\t\tlet clipRectangle2 = this.getClipRectangle2();\r\n\r\n\t\tfor (let i = 0, len = geoLine.length; i < len; i++) {\r\n\t\t\tlet segment: IGeoPoint[] = geoLine[i];\r\n\r\n\t\t\tif (segment) {\r\n\t\t\t\tlet clippedSegments: IGeoPoint[][] = this.clipLine(segment, clipRectangle1);\r\n\t\t\t\tclippedLine = clippedLine.concat(clippedSegments);\r\n\r\n\t\t\t\tif (this.deltaLongitude != 0) {\r\n\t\t\t\t\tlet clippedSegments2: IGeoPoint[][] = this.clipLine(segment, clipRectangle2);\r\n\t\t\t\t\tclippedLine = clippedLine.concat(clippedSegments2);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn clippedLine;\r\n\t}\r\n\r\n\r\n\tprotected clipGeoArea(geoArea: IGeoPoint[][][]): IGeoPoint[][][] {\r\n\r\n\t\tif (!geoArea) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet clippedArea: IGeoPoint[][][] = [];\r\n\r\n\t\tlet clipRectangle1 = this.getClipRectangle1();\r\n\t\tlet clipRectangle2 = this.getClipRectangle2();\r\n\r\n\t\tlet rect1 = this.getRect1();\r\n\t\tlet rect2 = this.getRect2();\r\n\r\n\t\tfor (let i = 0, len = geoArea.length; i < len; i++) {\r\n\r\n\t\t\tlet surface: IGeoPoint[] = geoArea[i][0];\r\n\t\t\tlet hole: IGeoPoint[] = geoArea[i][1];\r\n\r\n\t\t\tlet clippedAreas: IGeoPoint[][][] = [];\r\n\r\n\t\t\tif (surface) {\r\n\r\n\t\t\t\tlet surfaceRect = this.getExtremes(surface);\r\n\r\n\t\t\t\tif (!this.isInside(surfaceRect, rect1) && !this.isOutside(surfaceRect, rect1)) {\r\n\t\t\t\t\tlet clippedSurface1: IGeoPoint[] = this.clip(surface, clipRectangle1);\r\n\t\t\t\t\tlet clippedHole1: IGeoPoint[] = this.clip(hole, clipRectangle1);\r\n\t\t\t\t\tclippedAreas.push([clippedSurface1, clippedHole1]);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tclippedAreas.push([surface, hole]);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!this.isInside(surfaceRect, rect2) && !this.isOutside(surfaceRect, rect2)) {\r\n\t\t\t\t\tlet clippedSurface2: IGeoPoint[] = this.clip(surface, clipRectangle2);\r\n\t\t\t\t\tlet clippedHole2: IGeoPoint[] = this.clip(hole, clipRectangle2);\r\n\t\t\t\t\tclippedAreas.push([clippedSurface2, clippedHole2]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (let area of clippedAreas) {\r\n\t\t\t\tclippedArea.push(area);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn clippedArea;\r\n\t}\r\n\r\n\tprotected convertGeoArea(geoArea: IGeoPoint[][][]): IPoint[][][] {\r\n\r\n\t\tif (!geoArea) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet convertedPoints: IPoint[][][] = [];\r\n\r\n\t\tfor (let i = 0, len = geoArea.length; i < len; i++) {\r\n\r\n\t\t\tlet surface: IGeoPoint[] = geoArea[i][0];\r\n\t\t\tlet hole: IGeoPoint[] = geoArea[i][1];\r\n\r\n\t\t\tlet convertedAreaPoints: IPoint[][] = [];\r\n\r\n\t\t\tif (surface) {\r\n\t\t\t\tlet convertedSurface: IPoint[] = [];\r\n\r\n\t\t\t\tfor (let s = 0, slen = surface.length; s < slen; s++) {\r\n\t\t\t\t\tlet point: IPoint = this.convert(surface[s]);\r\n\r\n\t\t\t\t\tconvertedSurface.push(point);\r\n\t\t\t\t}\r\n\t\t\t\tconvertedAreaPoints.push(convertedSurface);\r\n\t\t\t}\r\n\r\n\t\t\tif (hole) {\r\n\t\t\t\tlet convertedHole: IPoint[] = [];\r\n\t\t\t\tfor (let s = 0, hlen = hole.length; s < hlen; s++) {\r\n\t\t\t\t\tlet point: IPoint = this.convert(hole[s]);\r\n\r\n\t\t\t\t\tconvertedHole.push(point);\r\n\t\t\t\t}\r\n\t\t\t\tconvertedAreaPoints.push(convertedHole);\r\n\t\t\t}\r\n\t\t\tconvertedPoints.push(convertedAreaPoints);\r\n\t\t}\r\n\t\treturn convertedPoints;\r\n\t}\r\n\r\n\tprotected convertGeoLine(geoLine: IGeoPoint[][]): IPoint[][] {\r\n\t\tif (!geoLine) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet convertedPoints: IPoint[][] = [];\r\n\r\n\t\tfor (let i = 0, len = geoLine.length; i < len; i++) {\r\n\r\n\t\t\tlet segment: IGeoPoint[] = geoLine[i];\r\n\r\n\t\t\tlet convertedSegmentPoints: IPoint[] = [];\r\n\r\n\t\t\tfor (let s = 0, slen = segment.length; s < slen; s++) {\r\n\t\t\t\tlet geoPoint: IGeoPoint = segment[s];\r\n\r\n\t\t\t\tlet point: IPoint = this.convert(geoPoint);\r\n\t\t\t\tconvertedSegmentPoints.push(point);\r\n\t\t\t}\r\n\r\n\t\t\tconvertedPoints.push(convertedSegmentPoints);\r\n\t\t}\r\n\t\treturn convertedPoints;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a geographical point (lat/long) to a screen point (x/y)\r\n\t * @param  {IGeoPoint} geoPoint Geo point (lat/long)\r\n\t * @return {IPoint}             Screen point (x/y)\r\n\t */\r\n\tpublic convert(geoPoint: IGeoPoint): IPoint {\r\n\t\tgeoPoint = $geo.normalizePoint(geoPoint);\r\n\t\tgeoPoint = this.rotate(geoPoint, this.deltaLongitude, this.deltaLatitude, this.deltaGama);\r\n\t\tlet pointInRadians: IPoint = this.project(geoPoint.longitude * $math.RADIANS, geoPoint.latitude * $math.RADIANS);\r\n\t\treturn {\r\n\t\t\tx: $math.round(pointInRadians.x * $math.DEGREES - this.centerPoint.x, 4) * this.scale,\r\n\t\t\ty: $math.round(-pointInRadians.y * $math.DEGREES - this.centerPoint.y, 4) * this.scale\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a screen point (x/y) to a geographical point (lat/long)\r\n\t * @param  {IPoint}    point Screen point (x/y)\r\n\t * @return {IGeoPoint}       Geo point (lat/long)\r\n\t */\r\n\tpublic invert(point: IPoint): IGeoPoint {\r\n\t\tlet pointInRadians: IGeoPoint = this.unproject((point.x / this.scale + this.centerPoint.x) * $math.RADIANS, (-point.y / this.scale - this.centerPoint.y) * $math.RADIANS);\r\n\r\n\t\tlet geoPoint = { longitude: pointInRadians.longitude * $math.DEGREES, latitude: pointInRadians.latitude * $math.DEGREES };\r\n\r\n\t\tgeoPoint = this.unrotate(geoPoint, this.deltaLongitude, this.deltaLatitude, this.deltaGama);\r\n\r\n\t\treturn geoPoint;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns X/Y coordinates.\r\n\t * Individual projections will override this method to apply their own \r\n\t * projection logic.\r\n\t * @param  {number} lambda [description]\r\n\t * @param  {number} phi    [description]\r\n\t * @return {IPoint}        X/Y coordinates\r\n\t * @todo Needs description\r\n\t */\r\n\tpublic project(lambda: number, phi: number): IPoint {\r\n\t\treturn { x: lambda, y: phi };\r\n\t}\r\n\r\n\t/**\r\n\t * Returns geographical coordinates (lat/long).\r\n\t * Individual projections will override this method to apply their own \r\n\t * projection logic.\r\n\t * @param  {number}    x X coordinate\r\n\t * @param  {number}    y Y coordinate\r\n\t * @return {IGeoPoint}   Geographical point\r\n\t * @todo Needs description\r\n\t */\r\n\tpublic unproject(x: number, y: number): IGeoPoint {\r\n\t\treturn { longitude: x, latitude: y };\r\n\t}\r\n\r\n\r\n\trotate(geoPoint: IGeoPoint, deltaLongitude: number, deltaLatitude: number, deltaGamma?: number): IGeoPoint {\r\n\r\n\t\tlet deltaLambda = deltaLongitude * $math.RADIANS;\r\n\t\tlet deltaPhi = deltaLatitude * $math.RADIANS;\r\n\t\tdeltaGamma = deltaGamma * $math.RADIANS;\r\n\r\n\t\tlet lambda = geoPoint.longitude * $math.RADIANS + deltaLambda;\r\n\t\tlet phi = geoPoint.latitude * $math.RADIANS;\r\n\r\n\t\tlet cosDeltaPhi = Math.cos(deltaPhi);\r\n\t\tlet sinDeltaPhi = Math.sin(deltaPhi);\r\n\t\tlet cosDeltaGamma = Math.cos(deltaGamma);\r\n\t\tlet sinDeltaGamma = Math.sin(deltaGamma);\r\n\r\n\t\tlet cosPhi = Math.cos(phi);\r\n\r\n\t\tlet x = Math.cos(lambda) * cosPhi;\r\n\t\tlet y = Math.sin(lambda) * cosPhi;\r\n\t\tlet z = Math.sin(phi);\r\n\t\tlet k = z * cosDeltaPhi + x * sinDeltaPhi;\r\n\r\n\t\treturn { longitude: $math.DEGREES * Math.atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi), latitude: $math.DEGREES * Math.asin(k * cosDeltaGamma + y * sinDeltaGamma) };\r\n\t}\r\n\r\n\tunrotate(geoPoint: IGeoPoint, deltaLongitude: number, deltaLatitude: number, deltaGamma?: number): IGeoPoint {\r\n\r\n\t\tlet deltaLambda = deltaLongitude * $math.RADIANS;\r\n\t\tlet deltaPhi = deltaLatitude * $math.RADIANS;\r\n\t\tdeltaGamma = deltaGamma * $math.RADIANS;\r\n\r\n\t\tlet lambda = geoPoint.longitude * $math.RADIANS - deltaLambda;\r\n\t\tlet phi = geoPoint.latitude * $math.RADIANS;\r\n\r\n\t\tlet cosDeltaPhi = Math.cos(deltaPhi);\r\n\t\tlet sinDeltaPhi = Math.sin(deltaPhi);\r\n\t\tlet cosDeltaGamma = Math.cos(deltaGamma);\r\n\t\tlet sinDeltaGamma = Math.sin(deltaGamma);\r\n\r\n\t\tlet cosPhi = Math.cos(phi);\r\n\r\n\t\tlet x = Math.cos(lambda) * cosPhi;\r\n\t\tlet y = Math.sin(lambda) * cosPhi;\r\n\t\tlet z = Math.sin(phi);\r\n\t\tlet k = z * cosDeltaGamma - y * sinDeltaGamma;\r\n\r\n\t\treturn { longitude: $math.DEGREES * Math.atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi), latitude: $math.DEGREES * Math.asin(k * cosDeltaPhi - x * sinDeltaPhi) };\r\n\t}\r\n\r\n\r\n\r\n\tclipLine(subjectPolyline: IGeoPoint[], clipPolygon: IGeoPoint[]): IGeoPoint[][] {\r\n\r\n\t\tif (!subjectPolyline || subjectPolyline.length == 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet cp1: IGeoPoint;\r\n\t\tlet cp2: IGeoPoint;\r\n\r\n\t\tvar inside = function(p: IGeoPoint) {\r\n\t\t\treturn (cp2.longitude - cp1.longitude) * (p.latitude - cp1.latitude) > (cp2.latitude - cp1.latitude) * (p.longitude - cp1.longitude);\r\n\t\t};\r\n\r\n\t\tlet s: IGeoPoint;\r\n\t\tlet e: IGeoPoint;\r\n\r\n\t\t//@todo: make a separate function\r\n\t\tvar intersection = function() {\r\n\t\t\tlet dc = { longitude: cp1.longitude - cp2.longitude, latitude: cp1.latitude - cp2.latitude };\r\n\t\t\tlet dp = { longitude: s.longitude - e.longitude, latitude: s.latitude - e.latitude };\r\n\t\t\tlet n1 = cp1.longitude * cp2.latitude - cp1.latitude * cp2.longitude;\r\n\t\t\tlet n2 = s.longitude * e.latitude - s.latitude * e.longitude;\r\n\t\t\tlet n3 = 1.0 / (dc.longitude * dp.latitude - dc.latitude * dp.longitude);\r\n\r\n\t\t\treturn { longitude: (n1 * dp.longitude - n2 * dc.longitude) * n3, latitude: (n1 * dp.latitude - n2 * dc.latitude) * n3 };\r\n\t\t};\r\n\r\n\t\tvar segment: IGeoPoint[] = subjectPolyline;\r\n\r\n\t\tcp1 = clipPolygon[clipPolygon.length - 1];\r\n\r\n\t\tfor (let j in clipPolygon) {\r\n\t\t\tcp2 = clipPolygon[j];\r\n\t\t\tlet inputList = segment;\r\n\t\t\tsegment = [];\r\n\t\t\ts = inputList[0];\r\n\t\t\tfor (let i = 0, len = inputList.length; i < len; i++) {\r\n\t\t\t\te = inputList[i];\r\n\r\n\t\t\t\tif (inside(e)) {\r\n\t\t\t\t\tif (!inside(s)) {\r\n\t\t\t\t\t\tsegment.push(intersection());\r\n\t\t\t\t\t}\r\n\t\t\t\t\tsegment.push(e);\r\n\t\t\t\t}\r\n\t\t\t\telse if (inside(s)) {\r\n\t\t\t\t\tsegment.push(intersection());\r\n\t\t\t\t}\r\n\r\n\t\t\t\ts = e;\r\n\t\t\t}\r\n\t\t\tcp1 = cp2;\r\n\t\t}\r\n\r\n\t\treturn [segment];\r\n\t}\r\n\r\n\r\n\r\n\r\n\t//@todo add credits to roseta code\r\n\t//@todo: someday make it better\r\n\tclip(subjectPolygon: IGeoPoint[], clipPolygon: IGeoPoint[]) {\r\n\r\n\t\tif (!subjectPolygon || subjectPolygon.length == 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet cp1: IGeoPoint;\r\n\t\tlet cp2: IGeoPoint;\r\n\r\n\t\tvar inside = function(p: IGeoPoint) {\r\n\t\t\treturn (cp2.longitude - cp1.longitude) * (p.latitude - cp1.latitude) > (cp2.latitude - cp1.latitude) * (p.longitude - cp1.longitude);\r\n\t\t};\r\n\r\n\t\tlet s: IGeoPoint;\r\n\t\tlet e: IGeoPoint;\r\n\t\t//@todo: make a separate function\r\n\t\tvar intersection = function() {\r\n\t\t\tlet dc = { longitude: cp1.longitude - cp2.longitude, latitude: cp1.latitude - cp2.latitude };\r\n\t\t\tlet dp = { longitude: s.longitude - e.longitude, latitude: s.latitude - e.latitude };\r\n\t\t\tlet n1 = cp1.longitude * cp2.latitude - cp1.latitude * cp2.longitude;\r\n\t\t\tlet n2 = s.longitude * e.latitude - s.latitude * e.longitude;\r\n\t\t\tlet n3 = 1.0 / (dc.longitude * dp.latitude - dc.latitude * dp.longitude);\r\n\r\n\t\t\treturn { longitude: (n1 * dp.longitude - n2 * dc.longitude) * n3, latitude: (n1 * dp.latitude - n2 * dc.latitude) * n3 };\r\n\t\t};\r\n\r\n\t\tvar outputList = subjectPolygon;\r\n\r\n\t\tcp1 = clipPolygon[clipPolygon.length - 1];\r\n\r\n\t\tfor (let j in clipPolygon) {\r\n\t\t\tcp2 = clipPolygon[j];\r\n\t\t\tlet inputList = outputList;\r\n\t\t\toutputList = [];\r\n\t\t\ts = inputList[inputList.length - 1]; //last on the input list\r\n\t\t\tfor (let i in inputList) {\r\n\t\t\t\te = inputList[i];\r\n\r\n\t\t\t\tif (inside(e)) {\r\n\t\t\t\t\tif (!inside(s)) {\r\n\t\t\t\t\t\toutputList.push(intersection());\r\n\t\t\t\t\t}\r\n\t\t\t\t\toutputList.push(e);\r\n\t\t\t\t}\r\n\t\t\t\telse if (inside(s)) {\r\n\t\t\t\t\toutputList.push(intersection());\r\n\t\t\t\t}\r\n\t\t\t\ts = e;\r\n\t\t\t}\r\n\t\t\tcp1 = cp2;\r\n\t\t}\r\n\t\treturn outputList;\r\n\t}\r\n\r\n\t//@todo: move to some utils?\r\n\tpublic getExtremes(geoPoints: IGeoPoint[]): IGeoRectangle {\r\n\r\n\t\tlet west: number = geoPoints[0].longitude;\r\n\t\tlet east: number = geoPoints[0].longitude;\r\n\t\tlet north: number = geoPoints[0].latitude;\r\n\t\tlet south: number = geoPoints[0].latitude;\r\n\r\n\t\tfor (let s: number = 0; s < geoPoints.length; s++) {\r\n\t\t\tlet longitude: number = geoPoints[s].longitude;\r\n\t\t\tlet latitude: number = geoPoints[s].latitude;\r\n\r\n\t\t\tif ((west > longitude)) {\r\n\t\t\t\twest = longitude;\r\n\t\t\t}\r\n\t\t\tif ((east < longitude)) {\r\n\t\t\t\teast = longitude;\r\n\t\t\t}\r\n\r\n\t\t\tif ((north < latitude)) {\r\n\t\t\t\tnorth = latitude;\r\n\t\t\t}\r\n\t\t\tif ((south > latitude)) {\r\n\t\t\t\tsouth = latitude;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn { north: north, east: east, south: south, west: west };\r\n\t}\r\n\r\n\t//@todo: move to some utils?\r\n\tpublic isInside(r1: IGeoRectangle, r2: IGeoRectangle) {\r\n\t\tif (r1.north < r2.north && r1.south > r2.south && r1.west > r2.west && r1.east < r2.east) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t//@todo: move to some utils?\r\n\tpublic isOutside(r1: IGeoRectangle, r2: IGeoRectangle) {\r\n\t\tif (r1.south > r2.north || r1.north < r2.south || r1.west > r2.east || r1.east < r2.west) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n\t//@todo: move to some utils?\r\n\t//@todo: add credits to: https://www.movable-type.co.uk/scripts/latlong.html\r\n\tpublic intermediatePoint(pointA: IGeoPoint, pointB: IGeoPoint, position: number) {\r\n\t\tvar phi1 = pointA.latitude * $math.RADIANS;\r\n\t\tlet lambda1 = pointA.longitude * $math.RADIANS;\r\n\r\n\t\tlet phi2 = pointB.latitude * $math.RADIANS;\r\n\t\tlet lambda2 = pointB.longitude * $math.RADIANS;\r\n\r\n\t\tvar sinPhi1 = Math.sin(phi1);\r\n\t\tlet cosPhi1 = Math.cos(phi1);\r\n\t\tlet sinLambda1 = Math.sin(lambda1);\r\n\t\tlet cosLambda1 = Math.cos(lambda1);\r\n\t\tvar sinPhi2 = Math.sin(phi2);\r\n\t\tlet cosPhi2 = Math.cos(phi2);\r\n\t\tlet sinLambda2 = Math.sin(lambda2);\r\n\t\tlet cosLambda2 = Math.cos(lambda2);\r\n\r\n\t\t// distance between points\r\n\t\tvar deltaPhi = phi2 - phi1;\r\n\t\tvar deltaLambda = lambda2 - lambda1;\r\n\t\tvar a = Math.sin(deltaPhi / 2) * Math.sin(deltaPhi / 2) + Math.cos(phi1) * Math.cos(phi2) * Math.sin(deltaLambda / 2) * Math.sin(deltaLambda / 2);\r\n\t\tvar delta = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n\r\n\t\tvar A = Math.sin((1 - position) * delta) / Math.sin(delta);\r\n\t\tvar B = Math.sin(position * delta) / Math.sin(delta);\r\n\r\n\t\tvar x = A * cosPhi1 * cosLambda1 + B * cosPhi2 * cosLambda2;\r\n\t\tvar y = A * cosPhi1 * sinLambda1 + B * cosPhi2 * sinLambda2;\r\n\t\tvar z = A * sinPhi1 + B * sinPhi2;\r\n\r\n\t\tvar phi3 = Math.atan2(z, Math.sqrt(x * x + y * y));\r\n\t\tvar lambda3 = Math.atan2(y, x);\r\n\r\n\t\treturn { latitude: phi3 * $math.DEGREES, longitude: lambda3 * $math.DEGREES };\r\n\t};\r\n}\r\n\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Projection\"] = Projection;\n\n\n// WEBPACK FOOTER //\n// ../../../../../../src/.internal/charts/map/projections/Projection.ts"],"sourceRoot":""}